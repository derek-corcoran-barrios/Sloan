plot(IslandBirds)
data("Birdstack")
#and see it
plot(Birdstack)
plot(scale(Birdstack))
valuetable <- getValues(ScaledRaster)
ScaledRaster <- scale(Birdstack)
valuetable <- getValues(ScaledRaster)
summary(valuetable)
valuetable <- getValues(ScaledRaster)
####Now set seed(Kmeans has a random component to it, if you do this your result will always be the same)
set.seed(123)
##centers is the important value, in this case it is 5, that means the environment will be divided into 5 habitat types
km1 <- kmeans(na.omit(valuetable), centers = 5, iter.max = 100, nstart = 10)
rNA <- setValues(raster(ScaledRaster), 0)
for(i in 1:nlayers(ScaledRaster)){
rNA[is.na(ScaledRaster[[i]])] <- 1
}
plot(rNA)
rNA <- getValues(rNA)
# convert valuetable to a data.frame
valuetable <- as.data.frame(valuetable)
# if rNA is a 0, assign the cluster value at that position
valuetable$class[rNA==0] <- km1$cluster
# if rNA is a 1, assign an NA at that position
valuetable$class[rNA==1] <- NA
# create a blank raster
classes1 <- raster(ScaledRaster)
# assign values from the 'class' column of valuetable
classes1 <- setValues(classes1, valuetable$class)
plot(classes1, legend=TRUE, colNA="black")
set.seed(12)
df.class.1 <- data.frame(id=c(1,2,3,4,5), v=c(1,NA,NA,NA,NA))
class1 <- subs(classes1, df.class.1f,subswithNA=FALSE)
points1<-sampleRandom(class1f,12, na.rm=TRUE, xy=TRUE, sp=TRUE)
df.class.2 <- data.frame(id=c(1,2,3,4,5), v=c(NA,2,NA,NA,NA))
class2 <- subs(classes1, df.class.2f,subswithNA=FALSE)
points2 <-sampleRandom(class2f,12, na.rm=TRUE, xy=TRUE, sp=TRUE)
df.class.3 <- data.frame(id=c(1,2,3,4,5), v=c(NA,NA,3,NA,NA))
class3 <- subs(classes1, df.class.3f,subswithNA=FALSE)
points3<-sampleRandom(class3f,12, na.rm=TRUE, xy=TRUE, sp=TRUE)
df.class.4 <- data.frame(id=c(1,2,3,4,5), v=c(NA,NA,NA,4,NA))
class4 <- subs(classes1, df.class.4f,subswithNA=FALSE)
points4<-sampleRandom(class4f,12, na.rm=TRUE, xy=TRUE, sp= TRUE)
df.class.5 <- data.frame(id=c(1,2,3,4,5), v=c(NA,NA,NA,NA,5))
class5 <- subs(classes1, df.class.5f,subswithNA=FALSE)
points5<-sampleRandom(class5f,12, na.rm=TRUE, xy=TRUE, sp=TRUE)
df.class.1 <- data.frame(id=c(1,2,3,4,5), v=c(1,NA,NA,NA,NA))
class1 <- subs(classes1, df.class.1,subswithNA=FALSE)
points1<-sampleRandom(class1,12, na.rm=TRUE, xy=TRUE, sp=TRUE)
df.class.2 <- data.frame(id=c(1,2,3,4,5), v=c(NA,2,NA,NA,NA))
class2 <- subs(classes1, df.class.2,subswithNA=FALSE)
points2 <-sampleRandom(class2,12, na.rm=TRUE, xy=TRUE, sp=TRUE)
df.class.3 <- data.frame(id=c(1,2,3,4,5), v=c(NA,NA,3,NA,NA))
class3 <- subs(classes1, df.class.3,subswithNA=FALSE)
points3<-sampleRandom(class3,12, na.rm=TRUE, xy=TRUE, sp=TRUE)
df.class.4 <- data.frame(id=c(1,2,3,4,5), v=c(NA,NA,NA,4,NA))
class4 <- subs(classes1, df.class.4,subswithNA=FALSE)
points4<-sampleRandom(class4,12, na.rm=TRUE, xy=TRUE, sp= TRUE)
df.class.5 <- data.frame(id=c(1,2,3,4,5), v=c(NA,NA,NA,NA,5))
class5 <- subs(classes1, df.class.5,subswithNA=FALSE)
points5<-sampleRandom(class5f,12, na.rm=TRUE, xy=TRUE, sp=TRUE)
points5<-sampleRandom(class5,12, na.rm=TRUE, xy=TRUE, sp=TRUE)
class5
plot(class5)
plot(class1)
plot(class2)
plot(class4)
points(5)
points5
getwd()
plot(classes1)
plot(classes1)
points(class2, add= TRUE)
plot(classes1)
points(points5)
plot(classes1)
points(points2)
trainNBA <- dplyr::filter(past_gamesFiltPlayoff, Season != 2017 & Type == "regular_season" | Season != 2016 & Type == "Playoffs")
testNBA <- dplyr::filter(past_gamesFiltPlayoff, Season == 2017 & Type == "regular_season" | Season == 2016 & Type == "Playoffs")
past_gamesFiltPlayoff <- readRDS("past_gamesFiltPlayoff.rds")
#Train set playoffs 2012 through 2015 and regular season 2013 through 2016
trainNBA <- dplyr::filter(past_gamesFiltPlayoff, Season != 2017 & Type == "regular_season" | Season != 2016 & Type == "Playoffs")
testNBA <- dplyr::filter(past_gamesFiltPlayoff, Season == 2017 & Type == "regular_season" | Season == 2016 & Type == "Playoffs")
BRT2017_31_Mar <- readRDS("BRT2017_31_Mar.rds")
testNBA$PredictedBRT <- predict(BRT2017_31_Mar, testNBA[,7:8])
ggplot(testNBA, aes(x = HomeRes, y = PredictedBRT)) + geom_smooth() + geom_point()
summary(BRT2017_31_Mar)
print(BRT2017_31_Mar)
plot(BRT2017_31_Mar)
View(testNBA)
TestNBAb <- testNBA[complete.cases(testNBA),]
library(reshape2)
predict_comparison <- melt(TestNBAb, id.vars = "HomeRes", measure.vars = c("VegasPRed", "PredicredBRT"))
predict_comparison <- melt(TestNBAb, id.vars = "HomeRes", measure.vars = c("VegasPred", "PredictedBRT"))
ggplot(predict_comparison, aes(x = Diff, y = value)) + geom_point(aes(color = variable)) + geom_smooth(method = lm, aes(fill=variable, color = variable)) + xlab("Observed spread") + ylab("Predicted spread") + theme(legend.position = "bottom")
ggplot(predict_comparison, aes(x = HomeRes, y = value)) + geom_point(aes(color = variable)) + geom_smooth(method = lm, aes(fill=variable, color = variable)) + xlab("Observed spread") + ylab("Predicted spread") + theme(legend.position = "bottom")
postResample(pred = TestNBAb$PredictedBRT, obs = TestNBAb$HomeRes)
postResample(pred = TestNBAb$VegasPred, obs = TestNBAb$HomeRes)
library(caret)
postResample(pred = TestNBAb$PredictedBRT, obs = TestNBAb$HomeRes)
postResample(pred = TestNBAb$VegasPred, obs = TestNBAb$HomeRes)
postResample(pred = TestNBAb$PredictedBRT, obs = TestNBAb$HomeRes)
a <- postResample(pred = TestNBAb$VegasPred, obs = TestNBAb$HomeRes)
a
str(a)
str(a)[1]
a[1]
postResample(pred = TestNBAb$VegasPred, obs = TestNBAb$HomeRes)
round(postResample(pred = TestNBAb$VegasPred, obs = TestNBAb$HomeRes[2]),2)
round(postResample(pred = TestNBAb$VegasPred, obs = TestNBAb$HomeRes)[2],2)
library(rjson)
library(grid)
library(gridExtra)
library(png)
library(RCurl)
library(ggplot2)
library(jpeg)
library(hexbin)
library(sp)
library(knitr)
library(raster)
library(rasterVis)
library(dplyr)
shotDataTotal2016 <- readRDS("shotDataTotal2016.rds")
shotDataTotal2017 <- readRDS("shotDataTotal2017.rds")
court <- readRDS("court.rds")
SeasondataOff <- shotDataTotal2017
SeasondataOff <- dplyr::filter(SeasondataOff, LOC_Y < MAX_Y)
SeasondataOff <- dplyr::filter(SeasondataOff, LOC_Y < 280)
xbnds <- range(SeasondataOff$LOC_X)
ybnds <- range(SeasondataOff$LOC_Y)
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
Totalhex <- makeHexData(SeasondataOff)
Totalhex <- makeHexData(SeasondataOff, nbins = 30)
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, 30, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
Totalhex <- makeHexData(SeasondataOff, nbins = 30)
Totalhex <- makeHexData(SeasondataOff)
View(Totalhex)
plot(Totalhex)
plot(Totalhex$x, Totalhex$y)
?arrange
arrange(Totalhex, x, y)
arrange(Totalhex, x, y)[1:5]
arrange(Totalhex, x, y)[1:5,]
a <- arrange(Totalhex, x, y)[1:5,]
plot(a$x, a$y)
diff(a$y)
a <- arrange(Totalhex, x, y)[1:40,]
a <- arrange(Totalhex, x, y)[1:5,]
a <- arrange(Totalhex, x, y)[1:40,]
a
SeasondataOff <- dplyr::filter(SeasondataOff, LOC_Y < 270)
Totalhex <- makeHexData(SeasondataOff)
a <- arrange(Totalhex, x, y)[1:40,]
a
diff(a$y)
pacman::p_load(XML, lubridate)
?readHTMLTable
source('~/Documents/Sloan/WordPress.R')
if (!require("pacman")) install.packages("pacman")
pacman::p_load(rjson, grid, gridExtra, png, RCurl, ggplot2, jpeg, hexbin, sp, knitr, raster, rasterVis, dplyr)
by_team <- readRDS("by_team.rds")
teamID <- by_team$team_id
teamName <- by_team$team_city
defensiveURL <- list()
shotData <- list()
shotDatafDef <- list()
shotURLtotal <- paste("http://stats.nba.com/stats/shotchartdetail?CFID=33&CFPARAMS=2016-17&ContextFilter=&ContextMeasure=FGA&DateFrom=&DateTo=&GameID=&GameSegment=&LastNGames=0&LeagueID=00&Location=&MeasureType=Base&Month=0&OpponentTeamID=0&Outcome=&PaceAdjust=N&PerMode=PerGame&Period=0&PlayerID=0&PlusMinus=N&Position=&Rank=N&RookieYear=&Season=2016-17&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=&mode=Advanced&showDetails=0&showShots=1&showZones=0&PlayerPosition=", sep = "")
# import from JSON
shotDataTotal <- fromJSON(file = shotURLtotal, method="C")
shotchartTotal2017 <- data.frame(matrix(unlist(shotDataTotal$resultSets[[1]][[3]]), ncol = 24, byrow = TRUE))
View(shotchartTotal2017)
colnames(shotchartTotal2017)<- shotDataTotal$resultSets[[1]][[2]]
shotchartTotal2017$LOC_X <- as.numeric(as.character(shotchartTotal2017$LOC_X))
shotchartTotal2017$LOC_Y <- as.numeric(as.character(shotchartTotal2017$LOC_Y))
shotDataTotal2017 <- shotchartTotal2017
shotDataTotal2017$TEAM_NAME <- gsub("Detroit Pistons", "Det", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Atlanta Hawks", "Atl", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Chicago Bulls", "Chi", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Boston Celtics", "Bos", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Cleveland Cavaliers", "Cle", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("New Orleans Pelicans", "NO", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Golden State Warriors", "GSW", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Orlando Magic", "ORL", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Washington Wizards", "Was", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Philadelphia 76ers", "Phi", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Brooklyn Nets", "Bkn", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Utah Jazz", "Uta", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Miami Heat", "Mia", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Charlotte Hornets", "Cha", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Toronto Raptors", "Tor", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Indiana Pacers", "Ind", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Houston Rockets", "Hou", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Denver Nuggets", "Den", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Memphis Grizzlies", "Mem", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("New York Knicks", "NY", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Milwaukee Bucks", "Mil", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Oklahoma City Thunder", "Okc", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("San Antonio Spurs", "Sas", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Dallas Mavericks", "Dal", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Phoenix Suns", "Pho", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Portland Trail Blazers", "Por", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("LA Clippers", "Lac", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Sacramento Kings", "Sac", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Los Angeles Lakers", "Lal", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Minnesota Timberwolves", "Min", shotDataTotal2017$TEAM_NAME)
saveRDS(shotDataTotal2017, 'shotDataTotal2017.rds')
shotDatafDef2017 <- shotDatafDef
for (i in 1:length(teamID)){
defensiveURL[[i]] <- paste("http://stats.nba.com/stats/shotchartdetail?CFID=33&CFPARAMS=2016-17&ContextFilter=&ContextMeasure=FGA&DateFrom=&DateTo=&GameID=&GameSegment=&LastNGames=0&LeagueID=00&Location=&MeasureType=Base&Month=0&OpponentTeamID=", by_team$team_id[i],"&Outcome=&PaceAdjust=N&PerMode=PerGame&Period=0&PlayerID=0&PlusMinus=N&Position=&Rank=N&RookieYear=&Season=2016-17&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=&mode=Advanced&showDetails=0&showShots=1&showZones=0&PlayerPosition=", sep = "")
# import from JSON
shotData[[i]] <- fromJSON(file = defensiveURL[[i]], method="C")
# unlist shot data, save into a data frame
##########
#  shotDatafDef[[i]] <- data.frame(matrix(ncol = 24, nrow = 1))
#colnames(shotDatafDef[[i]]) <-  shotData[[i]]$resultSets[[1]][[2]]
#  for(j in 1:length(shotData[[i]]$resultSets[[1]][[3]])){
#    shotDatafDef[[i]][j,] <- unlist(shotData[[i]]$resultSets[[1]][[3]][[j]])
#  }
####################
shotDatafDef[[i]] <- data.frame(matrix(unlist(shotData[[i]]$resultSets[[1]][[3]]), ncol = 24, byrow = TRUE))
colnames(shotDatafDef[[i]]) <-  shotData[[i]]$resultSets[[1]][[2]]
#####################
# covert x and y coordinates into numeric
shotDatafDef[[i]]$LOC_X <- as.numeric(as.character(shotDatafDef[[i]]$LOC_X))
shotDatafDef[[i]]$LOC_Y <- as.numeric(as.character(shotDatafDef[[i]]$LOC_Y))
shotDatafDef[[i]]$SHOT_DISTANCE <- as.numeric(as.character(shotDatafDef[[i]]$SHOT_DISTANCE))
}
names(shotDatafDef) <- teamName
shotDatafDef2017 <- shotDatafDef
names(shotDatafDef2017) <- c("Atl", "Bos", "Cle", "NO", "Chi", "Dal", "Den", "GSW", "Hou", "Lac", "Lal", "Mia", "Mil", "Min", "Bkn", "NY", "ORL", "Ind", "Phi", "Pho", "Por", "Sac", "Sas", "Okc", "Tor", "Uta", "Mem", "Was", "Det", "Cha")
shotDatafDef2017
pacman::p_load(XML, lubridate)
Months <- c("october", "november", "december", "january", "february", "march", "april")
URLs <- paste("http://www.basketball-reference.com/leagues/NBA_2017_games-", Months,".html", sep = "")
schedule <- list()
for(i in 1:length(Months)){
schedule[[i]] <- readHTMLTable(URLs[[i]])
schedule[[i]] <- schedule[[i]]$schedule
}
schedule <- do.call("rbind", schedule)
schedule$Date <- mdy(as.character(schedule$Date))
schedule[,4] <- as.numeric(as.character(schedule[,4]))
schedule[,6] <- as.numeric(as.character(schedule[,6]))
schedule[,3] <- gsub("Detroit Pistons", "Det", schedule[,3])
schedule[,3] <- gsub("Atlanta Hawks", "Atl", schedule[,3])
schedule[,3] <- gsub("Chicago Bulls", "Chi", schedule[,3])
schedule[,3] <- gsub("Boston Celtics", "Bos", schedule[,3])
schedule[,3] <- gsub("Cleveland Cavaliers", "Cle", schedule[,3])
schedule[,3] <- gsub("New Orleans Pelicans", "NO", schedule[,3])
schedule[,3] <- gsub("Golden State Warriors", "GSW", schedule[,3])
schedule[,3] <- gsub("Orlando Magic", "ORL", schedule[,3])
schedule[,3] <- gsub("Washington Wizards", "Was", schedule[,3])
schedule[,3] <- gsub("Philadelphia 76ers", "Phi", schedule[,3])
schedule[,3] <- gsub("Brooklyn Nets", "Bkn", schedule[,3])
schedule[,3] <- gsub("Utah Jazz", "Uta", schedule[,3])
schedule[,3] <- gsub("Miami Heat", "Mia", schedule[,3])
schedule[,3] <- gsub("Charlotte Hornets", "Cha", schedule[,3])
schedule[,3] <- gsub("Toronto Raptors", "Tor", schedule[,3])
schedule[,3] <- gsub("Indiana Pacers", "Ind", schedule[,3])
schedule[,3] <- gsub("Houston Rockets", "Hou", schedule[,3])
schedule[,3] <- gsub("Denver Nuggets", "Den", schedule[,3])
schedule[,3] <- gsub("Memphis Grizzlies", "Mem", schedule[,3])
schedule[,3] <- gsub("New York Knicks", "NY", schedule[,3])
schedule[,3] <- gsub("Milwaukee Bucks", "Mil", schedule[,3])
schedule[,3] <- gsub("Oklahoma City Thunder", "Okc", schedule[,3])
schedule[,3] <- gsub("San Antonio Spurs", "Sas", schedule[,3])
schedule[,3] <- gsub("Dallas Mavericks", "Dal", schedule[,3])
schedule[,3] <- gsub("Phoenix Suns", "Pho", schedule[,3])
schedule[,3] <- gsub("Portland Trail Blazers", "Por", schedule[,3])
schedule[,3] <- gsub("Los Angeles Clippers", "Lac", schedule[,3])
schedule[,3] <- gsub("Sacramento Kings", "Sac", schedule[,3])
schedule[,3] <- gsub("Los Angeles Lakers", "Lal", schedule[,3])
schedule[,3] <- gsub("Minnesota Timberwolves", "Min", schedule[,3])
schedule[,5] <- gsub("Detroit Pistons", "Det", schedule[,5])
schedule[,5] <- gsub("Atlanta Hawks", "Atl", schedule[,5])
schedule[,5] <- gsub("Chicago Bulls", "Chi", schedule[,5])
schedule[,5] <- gsub("Boston Celtics", "Bos", schedule[,5])
schedule[,5] <- gsub("Cleveland Cavaliers", "Cle", schedule[,5])
schedule[,5] <- gsub("New Orleans Pelicans", "NO", schedule[,5])
schedule[,5] <- gsub("Golden State Warriors", "GSW", schedule[,5])
schedule[,5] <- gsub("Orlando Magic", "ORL", schedule[,5])
schedule[,5] <- gsub("Washington Wizards", "Was", schedule[,5])
schedule[,5] <- gsub("Philadelphia 76ers", "Phi", schedule[,5])
schedule[,5] <- gsub("Brooklyn Nets", "Bkn", schedule[,5])
schedule[,5] <- gsub("Utah Jazz", "Uta", schedule[,5])
schedule[,5] <- gsub("Miami Heat", "Mia", schedule[,5])
schedule[,5] <- gsub("Charlotte Hornets", "Cha", schedule[,5])
schedule[,5] <- gsub("Toronto Raptors", "Tor", schedule[,5])
schedule[,5] <- gsub("Indiana Pacers", "Ind", schedule[,5])
schedule[,5] <- gsub("Houston Rockets", "Hou", schedule[,5])
schedule[,5] <- gsub("Denver Nuggets", "Den", schedule[,5])
schedule[,5] <- gsub("Memphis Grizzlies", "Mem", schedule[,5])
schedule[,5] <- gsub("New York Knicks", "NY", schedule[,5])
schedule[,5] <- gsub("Milwaukee Bucks", "Mil", schedule[,5])
schedule[,5] <- gsub("Oklahoma City Thunder", "Okc", schedule[,5])
schedule[,5] <- gsub("San Antonio Spurs", "Sas", schedule[,5])
schedule[,5] <- gsub("Dallas Mavericks", "Dal", schedule[,5])
schedule[,5] <- gsub("Phoenix Suns", "Pho", schedule[,5])
schedule[,5] <- gsub("Portland Trail Blazers", "Por", schedule[,5])
schedule[,5] <- gsub("Los Angeles Clippers", "Lac", schedule[,5])
schedule[,5] <- gsub("Sacramento Kings", "Sac", schedule[,5])
schedule[,5] <- gsub("Los Angeles Lakers", "Lal", schedule[,5])
schedule[,5] <- gsub("Minnesota Timberwolves", "Min", schedule[,5])
future_games <- schedule[schedule$Date >= Sys.Date(),]
source('~/Documents/Sloan/WordPress.R')
BRT <- readRDS("BRT2017_31_Mar.rds")
future_games$spread <- round(predict(BRT, data.frame(defAPPS = unlist(future_games$defAPPS), offAPPS = unlist(future_games$offAPPS)), type="raw"), digits = 2)
View(future_games)
str(future_games)
dplyr::filter(future_games, Date == Sys.Date())
source('~/Documents/Sloan/WordPress.R')
source('~/Documents/Sloan/WordPress.R')
source('~/Documents/Sloan/WordPress.R')
source('~/Documents/Sloan/WordPress.R')
source('~/Documents/Sloan/WordPress.R')
source('~/Documents/Sloan/WordPress.R')
if (!require("pacman")) install.packages("pacman")
pacman::p_load(rjson, grid, gridExtra, png, RCurl, ggplot2, jpeg, hexbin, sp, knitr, raster, rasterVis, dplyr)
by_team <- readRDS("by_team.rds")
teamID <- by_team$team_id
teamName <- by_team$team_city
defensiveURL <- list()
shotData <- list()
shotDatafDef <- list()
shotURLtotal <- paste("http://stats.nba.com/stats/shotchartdetail?CFID=33&CFPARAMS=2016-17&ContextFilter=&ContextMeasure=FGA&DateFrom=&DateTo=&GameID=&GameSegment=&LastNGames=0&LeagueID=00&Location=&MeasureType=Base&Month=0&OpponentTeamID=0&Outcome=&PaceAdjust=N&PerMode=PerGame&Period=0&PlayerID=0&PlusMinus=N&Position=&Rank=N&RookieYear=&Season=2016-17&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=&mode=Advanced&showDetails=0&showShots=1&showZones=0&PlayerPosition=", sep = "")
# import from JSON
shotDataTotal <- fromJSON(file = shotURLtotal, method="C")
source('~/Documents/Sloan/WordPress.R')
if (!require("pacman")) install.packages("pacman")
pacman::p_load(rjson, grid, gridExtra, png, RCurl, ggplot2, jpeg, hexbin, sp, knitr, raster, rasterVis, dplyr)
by_team <- readRDS("by_team.rds")
teamID <- by_team$team_id
teamName <- by_team$team_city
defensiveURL <- list()
shotData <- list()
shotDatafDef <- list()
shotURLtotal <- paste("http://stats.nba.com/stats/shotchartdetail?CFID=33&CFPARAMS=2016-17&ContextFilter=&ContextMeasure=FGA&DateFrom=&DateTo=&GameID=&GameSegment=&LastNGames=0&LeagueID=00&Location=&MeasureType=Base&Month=0&OpponentTeamID=0&Outcome=&PaceAdjust=N&PerMode=PerGame&Period=0&PlayerID=0&PlusMinus=N&Position=&Rank=N&RookieYear=&Season=2016-17&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=&mode=Advanced&showDetails=0&showShots=1&showZones=0&PlayerPosition=", sep = "")
# import from JSON
shotDataTotal <- fromJSON(file = shotURLtotal, method="C")
source('~/Documents/Sloan/WordPress.R')
source('~/Documents/Sloan/WordPress.R')
if (!require("pacman")) install.packages("pacman")
pacman::p_load(rjson, grid, gridExtra, png, RCurl, ggplot2, jpeg, hexbin, sp, knitr, raster, rasterVis, dplyr)
by_team <- readRDS("by_team.rds")
teamID <- by_team$team_id
teamName <- by_team$team_city
defensiveURL <- list()
shotData <- list()
shotDatafDef <- list()
shotURLtotal <- paste("http://stats.nba.com/stats/shotchartdetail?CFID=33&CFPARAMS=2016-17&ContextFilter=&ContextMeasure=FGA&DateFrom=&DateTo=&GameID=&GameSegment=&LastNGames=0&LeagueID=00&Location=&MeasureType=Base&Month=0&OpponentTeamID=0&Outcome=&PaceAdjust=N&PerMode=PerGame&Period=0&PlayerID=0&PlusMinus=N&Position=&Rank=N&RookieYear=&Season=2016-17&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=&mode=Advanced&showDetails=0&showShots=1&showZones=0&PlayerPosition=", sep = "")
# import from JSON
shotDataTotal <- fromJSON(file = shotURLtotal, method="C")
shotDataTotal <- fromJSON(file = shotURLtotal, method="C")
shotDataTotal <- fromJSON(file = shotURLtotal, method="C")
shotDataTotal <- fromJSON(file = shotURLtotal, method="C")
shotDataTotal <- fromJSON(file = shotURLtotal, method="C")
shotDataTotal <- fromJSON(file = shotURLtotal, method="C")
shotDataTotal <- fromJSON(file = shotURLtotal, method="C")
source('~/Documents/Sloan/WordPress.R')
source('~/Documents/Sloan/WordPress.R')
source('~/Documents/Sloan/WordPress.R')
source('~/Documents/Sloan/WordPress.R')
if (!require("pacman")) install.packages("pacman")
pacman::p_load(rjson, grid, gridExtra, png, RCurl, ggplot2, jpeg, hexbin, sp, knitr, raster, rasterVis, dplyr)
#library(rjson)
#library(grid)
#library(gridExtra)
#library(png)
#library(RCurl)
#library(ggplot2)
#library(jpeg)
#library(hexbin)
#library(sp)
#library(knitr)
#library(raster)
#library(rasterVis)
#library(dplyr)
by_team <- readRDS("by_team.rds")
teamID <- by_team$team_id
teamName <- by_team$team_city
defensiveURL <- list()
shotData <- list()
shotDatafDef <- list()
shotURLtotal <- paste("http://stats.nba.com/stats/shotchartdetail?CFID=33&CFPARAMS=2016-17&ContextFilter=&ContextMeasure=FGA&DateFrom=&DateTo=&GameID=&GameSegment=&LastNGames=0&LeagueID=00&Location=&MeasureType=Base&Month=0&OpponentTeamID=0&Outcome=&PaceAdjust=N&PerMode=PerGame&Period=0&PlayerID=0&PlusMinus=N&Position=&Rank=N&RookieYear=&Season=2016-17&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=&mode=Advanced&showDetails=0&showShots=1&showZones=0&PlayerPosition=", sep = "")
# import from JSON
shotDataTotal <- fromJSON(file = shotURLtotal, method="C")
head(mtcars)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(rjson, grid, gridExtra, png, RCurl, ggplot2, jpeg, hexbin, sp, knitr, raster, rasterVis, dplyr)
by_team <- readRDS("by_team.rds")
teamID <- by_team$team_id
teamName <- by_team$team_city
defensiveURL <- list()
shotData <- list()
shotDatafDef <- list()
shotURLtotal <- paste("http://stats.nba.com/stats/shotchartdetail?CFID=33&CFPARAMS=2016-17&ContextFilter=&ContextMeasure=FGA&DateFrom=&DateTo=&GameID=&GameSegment=&LastNGames=0&LeagueID=00&Location=&MeasureType=Base&Month=0&OpponentTeamID=0&Outcome=&PaceAdjust=N&PerMode=PerGame&Period=0&PlayerID=0&PlusMinus=N&Position=&Rank=N&RookieYear=&Season=2016-17&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=&mode=Advanced&showDetails=0&showShots=1&showZones=0&PlayerPosition=", sep = "")
shotDataTotal <- fromJSON(file = shotURLtotal, method="C")
if (!require("pacman")) install.packages("pacman")
pacman::p_load(rjson, grid, gridExtra, png, RCurl, ggplot2, jpeg, hexbin, sp, knitr, raster, rasterVis, dplyr)
by_team <- readRDS("by_team.rds")
teamID <- by_team$team_id
teamName <- by_team$team_city
defensiveURL <- list()
shotData <- list()
shotDatafDef <- list()
shotURLtotal <- paste("http://stats.nba.com/stats/shotchartdetail?CFID=33&CFPARAMS=2016-17&ContextFilter=&ContextMeasure=FGA&DateFrom=&DateTo=&GameID=&GameSegment=&LastNGames=0&LeagueID=00&Location=&MeasureType=Base&Month=0&OpponentTeamID=0&Outcome=&PaceAdjust=N&PerMode=PerGame&Period=0&PlayerID=0&PlusMinus=N&Position=&Rank=N&RookieYear=&Season=2016-17&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=&mode=Advanced&showDetails=0&showShots=1&showZones=0&PlayerPosition=", sep = "")
# import from JSON
shotDataTotal <- fromJSON(file = shotURLtotal, method="C")
if (!require("pacman")) install.packages("pacman")
pacman::p_load(rjson, grid, gridExtra, png, RCurl, ggplot2, jpeg, hexbin, sp, knitr, raster, rasterVis, dplyr)
by_team <- readRDS("by_team.rds")
teamID <- by_team$team_id
teamName <- by_team$team_city
defensiveURL <- list()
shotData <- list()
shotDatafDef <- list()
by_team
shotURLtotal <- paste("http://stats.nba.com/stats/shotchartdetail?CFID=33&CFPARAMS=2016-17&ContextFilter=&ContextMeasure=FGA&DateFrom=&DateTo=&GameID=&GameSegment=&LastNGames=0&LeagueID=00&Location=&MeasureType=Base&Month=0&OpponentTeamID=0&Outcome=&PaceAdjust=N&PerMode=PerGame&Period=0&PlayerID=0&PlusMinus=N&Position=&Rank=N&RookieYear=&Season=2016-17&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=&mode=Advanced&showDetails=0&showShots=1&showZones=0&PlayerPosition=", sep = "")
shotURLtotal <- paste("http://stats.nba.com/stats/shotchartdetail?CFID=33&CFPARAMS=2016-17&ContextFilter=&ContextMeasure=FGA&DateFrom=&DateTo=&GameID=&GameSegment=&LastNGames=0&LeagueID=00&Location=&MeasureType=Base&Month=0&OpponentTeamID=1610612764&Outcome=&PaceAdjust=N&PerMode=PerGame&Period=0&PlayerID=0&PlusMinus=N&Position=&Rank=N&RookieYear=&Season=2016-17&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=&mode=Advanced&showDetails=0&showShots=1&showZones=0&PlayerPosition=", sep = "")
shotDataTotal <- fromJSON(file = shotURLtotal, method="C")
setInternet2(TRUE)
shotDataTotal <- fromJSON(file = shotURLtotal, method="C")
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, caret)
shotDataTotal2017<- readRDS("shotDataTotal2017.rds")
shotDataTotal2017$GAME_DATE <- lubridate::ymd(shotDataTotal2017$GAME_DATE)
saveRDS(shotDataTotal2017, "shotDataTotal2017.rds")
shotDatafDef2017 <- readRDS("shotDatafDef2017.rds")
for (i in 1:length(shotDatafDef2017)){
shotDatafDef2017[[i]]$GAME_DATE <- lubridate::ymd(shotDatafDef2017[[i]]$GAME_DATE)
}
saveRDS(shotDatafDef2017, "shotDatafDef2017.rds")
saveRDS(shotDataTotal2017, "shotDataTotal2017.rds")
summary(shotDataTotal2017)
unique(shotDataTotal2017$TEAM_NAME)
unique(shotDataTotal2017$HTM)
a <- dplyr::filter(shotDataTotal2017, HTM == "GSW" | VTM == "GSW")
a
summary(a)
nrow(a)
unique(a$TEAM_NAME)
nrow(dplyr::filter(a, TEAM_NAME == "GSW"))
nrow(dplyr::filter(a, TEAM_NAME == "GSW"))/nrow(dplyr::filter(a, TEAM_NAME != "GSW"))
library(hexbin)
library(lattice)
x <- rnorm(1e6)
y <- rnorm(1e6)
hexbinplot(x ~ y, aspect = 1, bins=50,
#xlab = expression(alpha), ylab = expression(beta),
style = "nested.centroids",
panel = function(...) {
panel.hexbinplot(...)
})
#########
#Function to plot
library(plotrix)
hexmap <- function(xcor,ycor,colval, label, title){
plot(min(c(xcor,ycor)):(max(c(xcor,ycor))+1),min(c(xcor,ycor)):(max(c(xcor,ycor))+1), type="n", frame.plot=F, xaxt="n", yaxt="n", xlab="", ylab="", main = title)
data <- data.frame(xcor,ycor)
apply(data, 1, function(zone) hexagon(zone[1],zone[2],col=colval, unitcell=0.95,border="white"))
text(xcor+ 0.5,ycor + 0.5,labels=label, cex=0.9)
}
#Attacking away team +  - -
dataAtackA <- data.frame(where = c( "30/100", "70/150", "0/1"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(3))
hexmap(dataAtackA$x,dataAtackA$y,"firebrick1", dataAtackA$where, NULL)
#Defending home team + - +
dataAtackB <- data.frame(where = c( "25/90", "75/130", "30/78"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(1))
hexmap(dataAtackB$x,dataAtackB$y,"dodgerblue1", dataAtackB$where, NULL)
#Average NBA
dataAtackC <- data.frame(where = c( "250/1000", "800/1600", "450/1000"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(1))
hexmap(dataAtackC$x,dataAtackC$y,3, dataAtackC$where, NULL)
#####Points per shot
#Attacking away team +  - -
dataAtackA <- data.frame(where = c( "30x3/100 = 0.9", "70x2/150=0.93", "0x2/1=0"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(3))
hexmap(dataAtackA$x,dataAtackA$y,"firebrick1", dataAtackA$where, NULL)
#Defending home team + - +
dataAtackB <- data.frame(where = c( "25x3/90 = 0.83", "75x2/130=1.15", "30x2/78=0.77"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(1))
hexmap(dataAtackB$x,dataAtackB$y,"dodgerblue1", dataAtackB$where, NULL)
#Average NBA
dataAtackC <- data.frame(where = c( "250x3/1000 = 0.75", "800x2/1600=1", "450x2/1000=0.9"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(1))
hexmap(dataAtackC$x,dataAtackC$y,3, dataAtackC$where, NULL)
#######Points over average
#Attacking away team +  - -
dataAtackA <- data.frame(where = c( "0.9-0.75=0.15", "0.93-1=-0.07", "0-0.9=-0.9"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(3))
hexmap(dataAtackA$x,dataAtackA$y,"firebrick1", dataAtackA$where, NULL)
#Defending home team + - +
dataAtackB <- data.frame(where = c( "0.83-0.75 \n =0.08", "1.15-0.15=1", "0.77-0.9=-0.13"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(1))
hexmap(dataAtackB$x,dataAtackB$y,"dodgerblue1", dataAtackB$where, NULL)
######Avobe Average PPS (AAPPS)
dataAtackA <- data.frame(where = c( "0.15+0.08=0.23", "-0.07+1=0.93", "-0.9+-0.13=-1.03"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(3))
hexmap(dataAtackA$x,dataAtackA$y,"firebrick1", dataAtackA$where, NULL)
hexmap2 <- function(xcor,ycor,colval, label, title){
plot(min(c(xcor,ycor)):(max(c(xcor,ycor))+1),min(c(xcor,ycor)):(max(c(xcor,ycor))+1), type="n", frame.plot=F, xaxt="n", yaxt="n", xlab="", ylab="", main = title)
data <- data.frame(xcor,ycor)
apply(data, 1, function(zone) hexagon(zone[1],zone[2],col=colval, unitcell=0.95,border="white"))
text(xcor+ 0.5,ycor + 0.5,labels=label, cex=0.7)
text(3.7, 4.5, "3point")
}
