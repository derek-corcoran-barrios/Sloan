colnames(datos2012) <- gsub("Washington.Wizards", "WAS", colnames(datos2012))
rownames(datos2012) <- gsub("Washington", "WAS", rownames(datos2012))
colnames(datos2012) <- gsub("Philadelphia.76ers", "PHI", colnames(datos2012))
rownames(datos2012) <- gsub("Philadelphia", "PHI", rownames(datos2012))
colnames(datos2012) <- gsub("Brooklyn.Nets", "BKN", colnames(datos2012))
rownames(datos2012) <- gsub("Brooklyn", "BKN", rownames(datos2012))
colnames(datos2012) <- gsub("Utah.Jazz", "UTA", colnames(datos2012))
rownames(datos2012) <- gsub("Utah", "UTA", rownames(datos2012))
colnames(datos2012) <- gsub("Miami.Heat", "MIA", colnames(datos2012))
rownames(datos2012) <- gsub("Miami", "MIA", rownames(datos2012))
colnames(datos2012) <- gsub("Charlotte.Bobcats", "CHR", colnames(datos2012))
rownames(datos2012) <- gsub("Charlotte", "CHR", rownames(datos2012))
colnames(datos2012) <- gsub("Toronto.Raptors", "TOR", colnames(datos2012))
rownames(datos2012) <- gsub("Toronto", "TOR", rownames(datos2012))
colnames(datos2012) <- gsub("Indiana.Pacers", "IND", colnames(datos2012))
rownames(datos2012) <- gsub("Indiana", "IND", rownames(datos2012))
colnames(datos2012) <- gsub("Houston.Rockets", "HOU", colnames(datos2012))
rownames(datos2012) <- gsub("Houston", "HOU", rownames(datos2012))
colnames(datos2012) <- gsub("Denver.Nuggets", "DEN", colnames(datos2012))
rownames(datos2012) <- gsub("Denver", "DEN", rownames(datos2012))
colnames(datos2012) <- gsub("Memphis.Grizzlies", "MEM", colnames(datos2012))
rownames(datos2012) <- gsub("Memphis", "MEM", rownames(datos2012))
colnames(datos2012) <- gsub("New.York.Knicks", "NY", colnames(datos2012))
rownames(datos2012) <- gsub("New York", "NY", rownames(datos2012))
colnames(datos2012) <- gsub("Milwaukee.Bucks", "MIL", colnames(datos2012))
rownames(datos2012) <- gsub("Milwaukee", "MIL", rownames(datos2012))
colnames(datos2012) <- gsub("Oklahoma.City.Thunder", "OKC", colnames(datos2012))
rownames(datos2012) <- gsub("Oklahoma City", "OKC", rownames(datos2012))
colnames(datos2012) <- gsub("San.Antonio.Spurs", "SAN", colnames(datos2012))
rownames(datos2012) <- gsub("San Antonio", "SAN", rownames(datos2012))
colnames(datos2012) <- gsub("Dallas.Mavericks", "DAL", colnames(datos2012))
rownames(datos2012) <- gsub("Dallas", "DAL", rownames(datos2012))
colnames(datos2012) <- gsub("Phoenix.Suns", "PHO", colnames(datos2012))
rownames(datos2012) <- gsub("Phoenix", "PHO", rownames(datos2012))
colnames(datos2012) <- gsub("Portland.Trail.Blazers", "POR", colnames(datos2012))
rownames(datos2012) <- gsub("Portland", "POR", rownames(datos2012))
colnames(datos2012) <- gsub("Los.Angeles.Clippers", "LAC", colnames(datos2012))
rownames(datos2012) <- gsub("LA", "LAC", rownames(datos2012))
colnames(datos2012) <- gsub("Sacramento.Kings", "SAC", colnames(datos2012))
rownames(datos2012) <- gsub("Sacramento", "SAC", rownames(datos2012))
colnames(datos2012) <- gsub("Los.Angeles.Lakers", "LAL", colnames(datos2012))
rownames(datos2012) <- gsub("Los Angeles", "LAL", rownames(datos2012))
colnames(datos2012) <- gsub("Minnesota.Timberwolves", "MIN", colnames(datos2012))
rownames(datos2012) <- gsub("Minnesota", "MIN", rownames(datos2012))
#Add two columns Aberage points per shot
#Def apps is when the away team is defending
#Off apps is when the away team is attacking
NBAOdds$defAPPS <- NA
NBAOdds$offAPPS <- NA
datos <- list(datos2012 = datos2012 ,datos2013 = datos2013, datos2014 = datos2014, datos2015 = datos2015, datos2016= datos2016)
for (i in 1:nrow(NBAOdds)) {
print(i)
if (NBAOdds$Year[i] == 2016){
NBAOdds$offAPPS[i]<- datos$datos2016[rownames(datos$datos2016) == NBAOdds$Home[i],colnames(datos$datos2016) == NBAOdds$Away[i]]
NBAOdds$defAPPS[i] <- datos$datos2016[rownames(datos$datos2016) == NBAOdds$Away[i],colnames(datos$datos2016) == NBAOdds$Home[i]]
}
if (NBAOdds$Year[i] == 2015){
NBAOdds$offAPPS[i]<- datos$datos2015[rownames(datos$datos2015) == NBAOdds$Home[i],colnames(datos$datos2015) == NBAOdds$Away[i]]
NBAOdds$defAPPS[i] <- datos$datos2015[rownames(datos$datos2015) == NBAOdds$Away[i],colnames(datos$datos2015) == NBAOdds$Home[i]]
}
if (NBAOdds$Year[i] == 2014){
NBAOdds$offAPPS[i]<- datos$datos2014[rownames(datos$datos2014) == NBAOdds$Home[i],colnames(datos$datos2014) == NBAOdds$Away[i]]
NBAOdds$defAPPS[i] <- datos$datos2014[rownames(datos$datos2014) == NBAOdds$Away[i],colnames(datos$datos2014) == NBAOdds$Home[i]]
}
if (NBAOdds$Year[i] == 2013){
NBAOdds$offAPPS[i]<- datos$datos2013[rownames(datos$datos2013) == NBAOdds$Home[i],colnames(datos$datos2013) == NBAOdds$Away[i]]
NBAOdds$defAPPS[i] <- datos$datos2013[rownames(datos$datos2013) == NBAOdds$Away[i],colnames(datos$datos2013) == NBAOdds$Home[i]]
}
if (NBAOdds$Year[i] == 2012){
NBAOdds$offAPPS[i]<- datos$datos2012[rownames(datos$datos2012) == NBAOdds$Home[i],colnames(datos$datos2012) == NBAOdds$Away[i]]
NBAOdds$defAPPS[i] <- datos$datos2012[rownames(datos$datos2012) == NBAOdds$Away[i],colnames(datos$datos2012) == NBAOdds$Home[i]]
}
}
ggplot(NBAOdds, aes(x = Home.Spread, y = Diff)) + geom_point() + geom_smooth()
ggplot(NBAOdds, aes(x = defAPPS, y = Diff)) + geom_point() + geom_smooth()
ggplot(NBAOdds, aes(x = offAPPS, y = Diff)) + geom_point() + geom_smooth()
summary(lm(Diff ~ offAPPS + defAPPS, data=NBAOdds))
summary(lm(Diff ~ defAPPS, data=NBAOdds))
summary(lm(Diff ~ offAPPS, data=NBAOdds))
FinalOdds <- NBAOdds
write.csv(FinalOdds, "FinalOdds.csv")
####Regression trees
library(dismo)
library(gbm)
#Divide odds into 2016 vs 2012-2015
NBAOdds2012_2015 <- filter(NBAOdds, Year != 2016)
NBAOdds2016 <- filter(NBAOdds, Year == 2016)
#####Forcast
####Caret version
library(caret)
ctrl <- trainControl(method = "repeatedcv", number=10, repeats=3)
grid <- expand.grid(interaction.depth = seq(1, 7, by = 2),
n.trees = seq(100, 1000, by = 50),
shrinkage = c(0.01, 0.1),
n.minobsinnode=c(1,5,10))
# train the GBM model
set.seed(7)
modelGbmforcast <- train(x = NBAOdds2012_2015[,14:15],y = NBAOdds2012_2015[,12], method = "gbm",  preProcess = c("center", "scale"), verbose = FALSE, trControl = ctrl, tuneGrid = grid)
gbmcaretforecast <- predict(modelGbmforcast, NBAOdds2016[,14:15])
####
#Add BRT fit to model
#Add caret fit to model
NBAOdds2016$GBMfit <- gbmcaretforecast
#Plot predictions
predict_comparison <- melt(NBAOdds2016, id.vars = "Diff", measure.vars = c("Home.Spread", "GBMfit"))
predict_comparison$variable <- ifelse(predict_comparison$variable == "Home.Spread", "Vegas odds","PPS odds")
ggplot(predict_comparison, aes(x = Diff, y = value)) + geom_point(aes(color = variable)) + geom_smooth(method = lm, aes(fill=variable, color = variable)) + xlab("Observed spread") + ylab("Predicted spread") + theme(legend.position = "bottom")
#get The predicted
postResample(pred = NBAOdds2016$GBMfit, obs = NBAOdds2016$Diff)
postResample(pred = NBAOdds2016$Home.Spread, obs = NBAOdds2016$Diff)
####Surface plot
For.predictions <- expand.grid(defAPPS = seq(from = min(NBAOdds$defAPPS), to = max(NBAOdds$defAPPS), length.out = 100),
offAPPS =seq(from= min(NBAOdds$offAPPS),to = max(NBAOdds$offAPPS), length.out = 100))
For.predictions$Spread <- predict(modelGbmforcast, For.predictions)
wireframe(Spread ~  offAPPS + defAPPS, data = For.predictions, colorkey = TRUE, drape = TRUE, pretty = TRUE,scales = list(arrows = FALSE), screen = list(z = -220, x = -80))
#####################################################################################################################################################################################################
########################Pace Adjusted######################################################
########################################################################################
pace2012 <- readRDS("pacetables2012.rds")
pace2013 <- readRDS("pacetables2013.rds")
pace2014 <- readRDS("pacetables2014.rds")
pace2015 <- readRDS("pacetables2015.rds")
pace2016 <- readRDS("pacetables2016.rds")
Pace <- list(pace2012 = pace2012 ,pace2013 = pace2013, pace2014 = pace2014, pace2015 = pace2015, pace2015= pace2015, pace2016 = pace2016)
for (i in 1:nrow(NBAOdds)) {
print(i)
if (NBAOdds$Year[i] == 2016){
NBAOdds$Pace[i]<- Pace$pace2016[rownames(Pace$pace2016) == NBAOdds$Home[i],colnames(Pace$pace2016) == NBAOdds$Away[i]]
}
if (NBAOdds$Year[i] == 2015){
NBAOdds$Pace[i]<- Pace$pace2015[rownames(Pace$pace2015) == NBAOdds$Home[i],colnames(Pace$pace2015) == NBAOdds$Away[i]]
}
if (NBAOdds$Year[i] == 2014){
NBAOdds$Pace[i]<- Pace$pace2014[rownames(Pace$pace2014) == NBAOdds$Home[i],colnames(Pace$pace2014) == NBAOdds$Away[i]]
}
if (NBAOdds$Year[i] == 2013){
NBAOdds$Pace[i]<- Pace$pace2013[rownames(Pace$pace2013) == NBAOdds$Home[i],colnames(Pace$pace2013) == NBAOdds$Away[i]]
}
if (NBAOdds$Year[i] == 2012){
NBAOdds$Pace[i]<- Pace$pace2012[rownames(Pace$pace2012) == NBAOdds$Home[i],colnames(Pace$pace2012) == NBAOdds$Away[i]]
}
}
saveRDS(NBAOdds, "NBAOdds_final.rds")
NBAOdds <- readRDS("NBAOdds_final.rds")
NBAOdds2012_2015 <- filter(NBAOdds, Year != 2016)
NBAOdds2016 <- filter(NBAOdds, Year == 2016)
#####Forcast
####Caret version
library(caret)
ctrl <- trainControl(method = "repeatedcv", number=10, repeats=3)
grid <- expand.grid(interaction.depth = seq(1, 7, by = 2),
n.trees = seq(100, 1000, by = 50),
shrinkage = c(0.01, 0.1),
n.minobsinnode=c(1,5,10))
# train the GBM model
set.seed(7)
modelGbmforcast <- train(x = NBAOdds2012_2015[,14:16],y = NBAOdds2012_2015[,12], method = "gbm",  preProcess = c("center", "scale"), verbose = FALSE, trControl = ctrl, tuneGrid = grid)
gbmcaretforecast <- predict(modelGbmforcast, NBAOdds2016[,14:16])
####
#Add BRT fit to model
#Add caret fit to model
NBAOdds2016$GBMfit <- gbmcaretforecast
#Plot predictions
predict_comparison <- melt(NBAOdds2016, id.vars = "Diff", measure.vars = c("Home.Spread", "GBMfit"))
predict_comparison$variable <- ifelse(predict_comparison$variable == "Home.Spread", "Vegas odds","PPS odds")
ggplot(predict_comparison, aes(x = Diff, y = value)) + geom_point(aes(color = variable)) + geom_smooth(method = lm, aes(fill=variable, color = variable)) + xlab("Observed spread") + ylab("Predicted spread") + theme(legend.position = "bottom")
#get The predicted
postResample(pred = NBAOdds2016$GBMfit, obs = NBAOdds2016$Diff)
postResample(pred = NBAOdds2016$Home.Spread, obs = NBAOdds2016$Diff)
####Surface plot
For.predictions <- expand.grid(defAPPS = seq(from = min(NBAOdds$defAPPS), to = max(NBAOdds$defAPPS), length.out = 100),
offAPPS =seq(from= min(NBAOdds$offAPPS),to = max(NBAOdds$offAPPS), length.out = 100),
Pace = mean(NBAOdds2016$Pace))
For.predictions$Spread <- predict(modelGbmforcast, For.predictions)
wireframe(Spread ~  offAPPS + defAPPS, data = For.predictions, colorkey = TRUE, drape = TRUE, pretty = TRUE,scales = list(arrows = FALSE), screen = list(z = -220, x = -80))
For.predictions <- expand.grid(defAPPS = seq(from = min(NBAOdds$defAPPS), to = max(NBAOdds$defAPPS), length.out = 50),
offAPPS =seq(from= min(NBAOdds$offAPPS),to = max(NBAOdds$offAPPS), length.out = 50),
Pace = mean(NBAOdds2016$Pace))
For.predictions$Spread <- predict(modelGbmforcast, For.predictions)
For.predictions2 <- For.predictions
For.predictions2$Type <- c("Predicted")
For.predictions3 <- For.predictions2[seq(from =1, to = NROW(For.predictions), by = 100),]
For.predictions3$Spread <- 0
For.predictions3$Type <- c("Push")
For.predictions2 <- rbind(For.predictions2, For.predictions3)
#Test 1
wireframe(Spread ~  offAPPS + defAPPS, group = Type, data = For.predictions2, colorkey = TRUE, drape = TRUE, pretty = TRUE,scales = list(arrows = FALSE), screen = list(z = -220, x = -80), par.settings = list(regions=list(alpha=0.75)))
#Test 2
wireframe(Spread ~  offAPPS + defAPPS, group = Type, data = For.predictions2, colorkey = TRUE, drape = TRUE, pretty = TRUE,scales = list(arrows = FALSE), screen = list(z = -220, x = -60), par.settings = list(regions=list(alpha=0.85)))
#Test3
wireframe(Spread ~  offAPPS + defAPPS, group = Type, data = For.predictions2, colorkey = TRUE, drape = TRUE, pretty = TRUE,scales = list(arrows = FALSE), screen = list(z = -220, x = -100))
?wireframe
wireframe(Spread ~  offAPPS + defAPPS, data = For.predictions, colorkey = TRUE, drape = TRUE, pretty = TRUE,scales = list(arrows = FALSE), screen = list(z = -220, x = -80))
wireframe(Spread ~  offAPPS + defAPPS, group = Type, data = For.predictions2, colorkey = TRUE, drape = TRUE, pretty = TRUE,scales = list(arrows = FALSE), screen = list(z = -220, x = -80), par.settings = list(regions=list(alpha=0.75)))
wireframe(Spread ~  offAPPS + defAPPS, group = Type, data = For.predictions2, colorkey = TRUE, drape = TRUE, pretty = TRUE,scales = list(arrows = FALSE), screen = list(z = -220, x = -60), par.settings = list(regions=list(alpha=0.85)))
View(For.predictions)
wireframe(Spread ~  offAPPS + defAPPS, group = Type, data = For.predictions2)
wireframe(Spread ~  offAPPS + defAPPS, data = For.predictions)
library(rjson)
library(grid)
library(gridExtra)
library(png)
library(RCurl)
library(ggplot2)
library(jpeg)
library(hexbin)
library(sp)
library(knitr)
library(raster)
library(rasterVis)
library(dplyr)
by_team <- read.csv("~/Sloan/by_team.csv")
by_team <- by_team[-1,-1]
teamID <- by_team$team_id
teamName <- by_team$team_city
defensiveURL <- list()
shotData <- list()
shotDatafDef <- list()
shotURLtotal <- paste("http://stats.nba.com/stats/shotchartdetail?CFID=33&CFPARAMS=2016-17&ContextFilter=&ContextMeasure=FGA&DateFrom=&DateTo=&GameID=&GameSegment=&LastNGames=0&LeagueID=00&Location=&MeasureType=Base&Month=0&OpponentTeamID=0&Outcome=&PaceAdjust=N&PerMode=PerGame&Period=0&PlayerID=0&PlusMinus=N&Position=&Rank=N&RookieYear=&Season=2016-17&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=&mode=Advanced&showDetails=0&showShots=1&showZones=0&PlayerPosition=", sep = "")
# import from JSON
shotDataTotal <- fromJSON(file = shotURLtotal, method="C")
# unlist shot data, save into a data frame
shotDataTotal <- data.frame(matrix(unlist(shotDataTotal$resultSets[[1]][[3]]), ncol=21, byrow = TRUE))
# covert x and y coordinates into numeric
shotDataTotal$LOC_X <- as.numeric(as.character(shotDataTotal$LOC_X))
shotDataTotal$LOC_Y <- as.numeric(as.character(shotDataTotal$LOC_Y))
shotDataTotal$SHOT_DISTANCE <- as.numeric(as.character(shotDataTotal$SHOT_DISTANCE))
View(shotDataTotal)
shotURLtotal <- paste("http://stats.nba.com/stats/shotchartdetail?CFID=33&CFPARAMS=2016-17&ContextFilter=&ContextMeasure=FGA&DateFrom=&DateTo=&GameID=&GameSegment=&LastNGames=0&LeagueID=00&Location=&MeasureType=Base&Month=0&OpponentTeamID=0&Outcome=&PaceAdjust=N&PerMode=PerGame&Period=0&PlayerID=0&PlusMinus=N&Position=&Rank=N&RookieYear=&Season=2016-17&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=&mode=Advanced&showDetails=0&showShots=1&showZones=0&PlayerPosition=", sep = "")
# import from JSON
shotDataTotal <- fromJSON(file = shotURLtotal, method="C")
str(shotDataTotal)
shotDataTotal$resource
shotDataTotal$parameters
shotDataTotal$resultSets
str(shotDataTotal$resultSets)
class(shotDataTotal$resultSets)
class(shotDataTotal$resultSets[[1]])
str(shotDataTotal$resultSets[[1]])
str(shotDataTotal$resultSets[[1]][[1]])
str(shotDataTotal$resultSets[[1]])
View(shotDataTotal$resultSets[[1]])
shotDataTotal$resultSets[[1]][[1]]
shotDataTotal$resultSets[[1]][[2]]
shotDataTotal$resultSets[[1]][[3]]
shotDataTotal$resultSets[[1]][[2]]
length(shotDataTotal$resultSets[[1]][[3]])
length(shotDataTotal$resultSets[[1]][[3]])/24
length(shotDataTotal$resultSets[[1]][[3]][[1:24]]
)
shotDataTotal$resultSets[[1]][[3]][[1:24]]
shotDataTotal$resultSets[[1]][[3]]
shotDataTotal$resultSets[[1]][[3]][[1]]
unlist(shotDataTotal$resultSets[[1]][[3]][[1]])
unlist(shotDataTotal$resultSets[[1]][[3]][[1]])
class(unlist(shotDataTotal$resultSets[[1]][[3]][[1]]))
unlist(shotDataTotal$resultSets[[1]][[3]][[1]])
shotDataTotal$resultSets[[1]][[2]]
shotDataTotal$resultSets[[1]][[2]]
shotchartTotal2017 <- data.frame()
shotchartTotal2017
colnames(shotchartTotal2017)<- shotDataTotal$resultSets[[1]][[2]]
?data_frame
?data.frame
shotchartTotal2017 <- data.frame(matrix(ncol = 24, nrow = 1))
colnames(shotchartTotal2017)<- shotDataTotal$resultSets[[1]][[2]]
shotchartTotal2017
View(shotchartTotal2017)
shotchartTotal2017[1,] <- unlist(shotDataTotal$resultSets[[1]][[3]][[1]])
View(shotchartTotal2017)
for(i in 1:length(shotDataTotal$resultSets[[1]][[3]]))
{}
length(shotDataTotal$resultSets[[1]][[3]])
shotchartTotal2017 <- data.frame(matrix(ncol = 24, nrow = 1))
colnames(shotchartTotal2017)<- shotDataTotal$resultSets[[1]][[2]]
#fist shot of the season
for(i in 1:length(shotDataTotal$resultSets[[1]][[3]])){
shotchartTotal2017[i,] <- unlist(shotDataTotal$resultSets[[1]][[3]][[i]])
}
View(shotchartTotal2017)
shotchartTotal2017$LOC_X <- as.numeric(as.character(shotchartTotal2017$LOC_X))
shotchartTotal2017$LOC_Y <- as.numeric(as.character(shotchartTotal2017$LOC_Y))
shotchartTotal2017$SHOT_DISTANCE <- as.numeric(as.character(shotchartTotal2017$SHOT_DISTANCE))
shotDataTotal2017 <- shotchartTotal2017
saveRDS(shotDataTotal2017, 'shotDataTotal2017.rds')
str(shotDataTotal2017)
by_team
for (i in 1:length(teamID)){
defensiveURL[[i]] <- paste("http://stats.nba.com/stats/shotchartdetail?CFID=33&CFPARAMS=2016-17&ContextFilter=&ContextMeasure=FGA&DateFrom=&DateTo=&GameID=&GameSegment=&LastNGames=0&LeagueID=00&Location=&MeasureType=Base&Month=0&OpponentTeamID=", by_team$team_id[i],"&Outcome=&PaceAdjust=N&PerMode=PerGame&Period=0&PlayerID=0&PlusMinus=N&Position=&Rank=N&RookieYear=&Season=2016-17&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=&mode=Advanced&showDetails=0&showShots=1&showZones=0&PlayerPosition=", sep = "")
# import from JSON
shotData[[i]] <- fromJSON(file = defensiveURL[[i]], method="C")
# unlist shot data, save into a data frame
shotDatafDef[[i]] <- data.frame(matrix(unlist(shotData[[i]]$resultSets[[1]][[3]]), ncol=21, byrow = TRUE))
# shot data headers
colnames(shotDatafDef[[i]]) <- shotData[[i]]$resultSets[[1]][[2]]
# covert x and y coordinates into numeric
shotDatafDef[[i]]$LOC_X <- as.numeric(as.character(shotDatafDef[[i]]$LOC_X))
shotDatafDef[[i]]$LOC_Y <- as.numeric(as.character(shotDatafDef[[i]]$LOC_Y))
shotDatafDef[[i]]$SHOT_DISTANCE <- as.numeric(as.character(shotDatafDef[[i]]$SHOT_DISTANCE))
}
names(shotDatafDef) <- teamName
for (i in 1:length(teamID)){
defensiveURL[[i]] <- paste("http://stats.nba.com/stats/shotchartdetail?CFID=33&CFPARAMS=2016-17&ContextFilter=&ContextMeasure=FGA&DateFrom=&DateTo=&GameID=&GameSegment=&LastNGames=0&LeagueID=00&Location=&MeasureType=Base&Month=0&OpponentTeamID=", by_team$team_id[i],"&Outcome=&PaceAdjust=N&PerMode=PerGame&Period=0&PlayerID=0&PlusMinus=N&Position=&Rank=N&RookieYear=&Season=2016-17&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=&mode=Advanced&showDetails=0&showShots=1&showZones=0&PlayerPosition=", sep = "")
# import from JSON
shotData[[i]] <- fromJSON(file = defensiveURL[[i]], method="C")
# unlist shot data, save into a data frame
#shotDatafDef[[i]] <- data.frame(matrix(unlist(shotData[[i]]$resultSets[[1]][[3]]), ncol=21, byrow = TRUE))
# shot data headers
#colnames(shotDatafDef[[i]]) <- shotData[[i]]$resultSets[[1]][[2]]
# covert x and y coordinates into numeric
#shotDatafDef[[i]]$LOC_X <- as.numeric(as.character(shotDatafDef[[i]]$LOC_X))
#shotDatafDef[[i]]$LOC_Y <- as.numeric(as.character(shotDatafDef[[i]]$LOC_Y))
#shotDatafDef[[i]]$SHOT_DISTANCE <- as.numeric(as.character(shotDatafDef[[i]]$SHOT_DISTANCE))
}
shotData
shotData$resultSets[[1]][[2]]
shotData[[1]]$resultSets
for (i in 1:length(teamID)){
defensiveURL[[i]] <- paste("http://stats.nba.com/stats/shotchartdetail?CFID=33&CFPARAMS=2016-17&ContextFilter=&ContextMeasure=FGA&DateFrom=&DateTo=&GameID=&GameSegment=&LastNGames=0&LeagueID=00&Location=&MeasureType=Base&Month=0&OpponentTeamID=", by_team$team_id[i],"&Outcome=&PaceAdjust=N&PerMode=PerGame&Period=0&PlayerID=0&PlusMinus=N&Position=&Rank=N&RookieYear=&Season=2016-17&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=&mode=Advanced&showDetails=0&showShots=1&showZones=0&PlayerPosition=", sep = "")
# import from JSON
shotData[[i]] <- fromJSON(file = defensiveURL[[i]], method="C")
# unlist shot data, save into a data frame
shotDatafDef[[i]] <- data.frame(matrix(ncol = 24, nrow = 1))
colnames(shotDatafDef[[i]]) <-  shotData[[i]]$resultSets[[1]][[2]]
for(j in 1:length(shotData[[i]]$resultSets[[1]][[3]])){
shotDatafDef[[i]][j,] <- unlist(shotData[[i]]$resultSets[[1]][[3]][[j]])
}
# covert x and y coordinates into numeric
shotDatafDef[[i]]$LOC_X <- as.numeric(as.character(shotDatafDef[[i]]$LOC_X))
shotDatafDef[[i]]$LOC_Y <- as.numeric(as.character(shotDatafDef[[i]]$LOC_Y))
shotDatafDef[[i]]$SHOT_DISTANCE <- as.numeric(as.character(shotDatafDef[[i]]$SHOT_DISTANCE))
}
names(shotDatafDef) <- teamName
shotDatafDef2017 <- shotDatafDef
str(shotDatafDef2017)
str(shotDatafDef2017[1])
View(shotDatafDef2017[1])
saveRDS(shotDatafDef2017, 'shotDatafDef2017.rds')
names(shotDatafDef2017)
library(rjson)
library(grid)
library(gridExtra)
library(png)
library(RCurl)
library(ggplot2)
library(jpeg)
library(hexbin)
library(sp)
library(knitr)
library(raster)
library(rasterVis)
library(dplyr)
court <- readRDS("court.rds")
court2 <- readRDS("court2.rds")
court3 <- readRDS("court3.rds")
shotDatafDef2016 <- readRDS("shotDatafDef2017.rds")
shotDataTotal2016 <- readRDS("shotDataTotal2017.rds")
shotDatafDef2013 <- readRDS("shotDatafDef2013.rds")
shotDataTotal2013 <- readRDS("shotDataTotal2013.rds")
ShotComparisonGraph <- function(OffTeam, DefTown, SeasondataOff, SeasonDataDef, nbins = 30, maxsize = 7, quant = 0.7) {
#Filter the offensive data of the Offensive Team
Off <- filter(SeasondataOff, TEAM_NAME == OffTeam)
#Filter the Deffensive data of the Defensive team
deff <- SeasonDataDef[names(SeasonDataDef) == DefTown][[1]]
#Get the maximum and minumum values for x and y
xbnds <- range(c(SeasondataOff$LOC_X, deff$LOC_X))
ybnds <- range(c(SeasondataOff$LOC_Y, deff$LOC_Y))
#Make hexbin dataframes out of the teams
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
##Total NBA data
Totalhex <- makeHexData(SeasondataOff)
##Defensive team data
Defhex <- makeHexData(deff)
##Offensive team data
Offhex <- makeHexData(Off)
#Merge offensive and deffensive data with total data by Cell id
DeffbyCell <- merge(Totalhex, Defhex, by = "cid", all = T)
OffByCell <- merge(Totalhex, Offhex, by = "cid", all = T)
##  when calculating the difference empty cells should count as 0
DeffbyCell$PPS.x[is.na(DeffbyCell$PPS.x)] <- 0
DeffbyCell$PPS.y[is.na(DeffbyCell$PPS.y)] <- 0
DeffbyCell$ST.y[is.na(DeffbyCell$ST.y)] <- 0
OffByCell$PPS.x[is.na(OffByCell$PPS.x)] <- 0
OffByCell$PPS.y[is.na(OffByCell$PPS.y)] <- 0
OffByCell$ST.y[is.na(OffByCell$ST.y)] <- 0
#  make a "difference" data.frame
DiffDeff <- data.frame(x = ifelse(is.na(DeffbyCell$x.x), DeffbyCell$x.y, DeffbyCell$x.x),
y = ifelse(is.na(DeffbyCell$y.x), DeffbyCell$y.y, DeffbyCell$y.x),
PPS= DeffbyCell$PPS.y - DeffbyCell$PPS.x,
cid= DeffbyCell$cid,
ST = DeffbyCell$ST.y)
DiffOff <- data.frame(x = ifelse(is.na(OffByCell$x.x), OffByCell$x.y, OffByCell$x.x),
y = ifelse(is.na(OffByCell$y.x), OffByCell$y.y, OffByCell$y.x),
PPS= OffByCell$PPS.y - OffByCell$PPS.x,
ST = OffByCell$ST.x,
cid = OffByCell$cid,
ST = OffByCell$ST.y)
#make team comparisons
Comparison <- merge(DiffOff, DiffDeff, by = "cid", all = T)
Comparison <- Comparison[,-c(6:7)]
Comparison$Diff <- c(Comparison$PPS.x + Comparison$PPS.y)
PPSAA <- weighted.mean((Comparison$PPS.x + Comparison$PPS.y), Comparison$ST.x)
#Legend extractor
g_legend <- function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
#Function to transform hexbins into polygons
hex_coord_df <- function(x, y, width, height, size = 1) {
# like hex_coord but returns a dataframe of vertices grouped by an id variable
dx <- log(size * width / 6)
dy <- log(size * height / 2 / sqrt(3))
hex_x <- rbind(x - 2 * dx, x - dx, x + dx, x + 2 * dx, x + dx, x - dx)
hex_y <- rbind(y, y + dy, y + dy, y, y - dy, y - dy)
id    <- rep(1:length(x), each=6)
data.frame(cbind(x=as.vector(hex_x), y=as.vector(hex_y), id))
}
#Filter by quantile
DiffOff <- filter(DiffOff, ST > quantile(DiffOff$ST, probs = quant))
DiffDeff <- filter(DiffDeff, ST > quantile(DiffDeff$ST, probs = quant))
Comparison <- filter(Comparison, ST.x > quantile(Comparison$ST.x, probs = quant))
#Transform Hexbins into polygons
DFOFF <- hex_coord_df(DiffOff$x, DiffOff$y, (0.05*DiffOff$ST), (0.05*DiffOff$ST), size =1)
DFOFF$PPS <- rep(DiffOff$PPS, each = 6)
DFDEF <- hex_coord_df(DiffDeff$x, DiffDeff$y, DiffDeff$ST, DiffDeff$ST, size =1)
DFDEF$PPS <- rep(DiffDeff$PPS, each = 6)
DFDIF <- hex_coord_df(Comparison$x.x, Comparison$y.x, (0.05*Comparison$ST.x),(0.05*Comparison$ST.x), size =1)
DFDIF$Dif <- rep(Comparison$Diff, each = 6)
#Create Legend
OFFLEG <- ggplot(DFOFF, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(low ="blue", high = "red", limits=c(-1.2, 1.2)) +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold"))+ scale_size(range = c(0, maxsize)) + ylim(c(-40, 270))+ theme(legend.position="bottom") +  ggtitle(paste(OffTeam, "Offensive\n Shot Chart", sep = " "))
leg<-g_legend(OFFLEG)
OFF <- ggplot(DFOFF, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(low ="blue", high = "red", limits=c(-1.2, 1.2)) +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold"))+ scale_size(range = c(0, maxsize)) + ylim(c(-40, 270))+ theme(legend.position="none") +  ggtitle(paste(OffTeam, "Offensive\n Shot Chart", sep = " "))
DEF <- ggplot(DFDEF, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS))+ scale_fill_gradient2(low ="blue", high = "red", limits=c(-1.2, 1.2)) +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold"))+ scale_size(range = c(0, maxsize)) + ylim(c(-40, 270))+ theme(legend.position="none") + ggtitle(paste(DefTown, "defensive\n Shot Chart", sep = " "))
COMP <- ggplot(DFDIF, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = Dif)) + scale_fill_gradient2(low ="blue", high = "red", limits=c(-1.2, 1.2)) +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold"))+ scale_size(range = c(0, maxsize)) +  ylim(c(-40, 270))+ theme(legend.position="none") + ggtitle("Comparison\n Shot Chart")
charts <- arrangeGrob(DEF,OFF, COMP, ncol = 3)
p <- grid.arrange(arrangeGrob(arrangeGrob(DEF,OFF, COMP, ncol = 3),leg,ncol=1,heights=c(7/8,1/8)))
return(list(Off = DiffOff, deff = DiffDeff, Comparison = Comparison, Total = Totalhex, PPSAA = PPSAA, p = p, leg = leg, charts = charts))
}
Com1 <- ShotComparisonGraph(OffTeam = "Golden State Warriors", DefTown = "Portland", SeasondataOff = shotDataTotal2016, SeasonDataDef = shotDatafDef2017, nbins = 30, quant = 0.7)
Com2 <- ShotComparisonGraph(OffTeam = "Cleveland Cavaliers", DefTown = "Golden State", SeasondataOff = shotDataTotal2016, SeasonDataDef = shotDatafDef2017, nbins = 30, quant = 0.7)
grid.arrange(Com1$charts,Com2$charts,Com1$leg,ncol=1,heights=c(3/7, 3/7 ,1/7))
shotDataTotal2017b <- shotDataTotal2017
shotDataTotal2017
unique(shotDataTotal2017$PLAYER_NAME)
unique(shotDataTotal2017$PLAYER_NAME)== "Kyle Korver"
sum(unique(shotDataTotal2017$PLAYER_NAME)== "Kyle Korver")
unique(shotDataTotal2017$TEAM_NAME)
sum(unique(shotDataTotal2017$PLAYER_NAME)== "Mike Dunleavy")
sum(unique(shotDataTotal2017$PLAYER_NAME)== "Mo Williams")
Com1 <- ShotComparisonGraph2(OffTeam = "Golden State Warriors", DefTown = "Cleveland", SeasondataOff = shotDataTotal2016, SeasonDataDef = shotDatafDef2016, nbins = 30, quant = 0.7, focus = "plus")
Com1
shotDataTotal2017b <- shotDataTotal2017
shotDataTotal2017b$TEAM_NAME <-ifelse(shotDataTotal2017b$PLAYER_NAME == "Kyle Korver", "Cleveland Cavaliers", shotDataTotal2017b$TEAM_NAME)
shotDataTotal2017b$TEAM_NAME <-ifelse(shotDataTotal2017b$PLAYER_NAME == "Mike Dunleavy", "Atlanta Hawks", shotDataTotal2017b$TEAM_NAME)
##Only positives
Com1 <- ShotComparisonGraph2(OffTeam = "Cleveland Cavaliers", DefTown = "Golden State", SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017, nbins = 30, quant = 0.7, focus = "plus")
Com2 <- ShotComparisonGraph2(OffTeam = "Golden State Warriors", DefTown = "Cleveland", SeasondataOff = shotDataTotal2017b, SeasonDataDef = shotDatafDef2017, nbins = 30, quant = 0.7, focus = "plus")
grid.arrange(Com1$charts,Com2$charts,Com1$leg,ncol=1,heights=c(3/7, 3/7 ,1/7))
Com1 <- ShotComparisonGraph2(OffTeam = "Cleveland Cavaliers", DefTown = "Golden State", SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017, nbins = 30, quant = 0.7, focus = "plus")
Com2 <- ShotComparisonGraph2(OffTeam = "Cleveland Cavaliers", DefTown = "Golden State", SeasondataOff = shotDataTotal2017b, SeasonDataDef = shotDatafDef2017, nbins = 30, quant = 0.7, focus = "plus")
grid.arrange(Com1$charts,Com2$charts,Com1$leg,ncol=1,heights=c(3/7, 3/7 ,1/7))
Com1$PPSAA
Com2$PPSAA
Com1 <- ShotComparisonGraph2(OffTeam = "Cleveland Cavaliers", DefTown = "Golden State", SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017, nbins = 30, quant = 0.7, focus = "plus")
Com2 <- ShotComparisonGraph2(OffTeam = "Cleveland Cavaliers", DefTown = "Golden State", SeasondataOff = shotDataTotal2017b, SeasonDataDef = shotDatafDef2017, nbins = 30, quant = 0.7, focus = "plus")
grid.arrange(Com1$charts,Com2$charts,Com1$leg,ncol=1,heights=c(3/7, 3/7 ,1/7))
Com1$Off
Com1
Com1$p
plot(Com1$p)
plot(Com1$leg)
plot(Com1$charts)
Com1$charts
Com1$charts[2]
Com1 <- ShotComparisonGraph2(OffTeam = "Cleveland Cavaliers", DefTown = "Golden State", SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017, nbins = 30, quant = 0.7)
Com2 <- ShotComparisonGraph2(OffTeam = "Cleveland Cavaliers", DefTown = "Golden State", SeasondataOff = shotDataTotal2017b, SeasonDataDef = shotDatafDef2017, nbins = 30, quant = 0.7, focus = "plus")
grid.arrange(Com1$charts,Com2$charts,Com1$leg,ncol=1,heights=c(3/7, 3/7 ,1/7))
