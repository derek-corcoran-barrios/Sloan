DiffDeff <- data.frame(x = ifelse(is.na(DeffbyCell$x.x), DeffbyCell$x.y, DeffbyCell$x.x),
y = ifelse(is.na(DeffbyCell$y.x), DeffbyCell$y.y, DeffbyCell$y.x),
PPS= DeffbyCell$PPS.y - DeffbyCell$PPS.x,
cid= DeffbyCell$cid,
ST = DeffbyCell$ST.y)
DiffOff <- data.frame(x = ifelse(is.na(OffByCell$x.x), OffByCell$x.y, OffByCell$x.x),
y = ifelse(is.na(OffByCell$y.x), OffByCell$y.y, OffByCell$y.x),
PPS= OffByCell$PPS.y - OffByCell$PPS.x,
ST = OffByCell$ST.x,
cid = OffByCell$cid,
ST = OffByCell$ST.y)
#make team comparisons
Comparison <- merge(DiffOff, DiffDeff, by = "cid", all = T)
Comparison <- Comparison[,-c(6:7)]
Comparison$Diff <- c(Comparison$PPS.x + Comparison$PPS.y)
PPSAA <- weighted.mean((Comparison$PPS.x + Comparison$PPS.y), Comparison$ST.x)
OFF <- ggplot(DiffOff)  +
annotation_custom(court, -250, 250, -52, 418) +
geom_hex(aes(x = x, y = y, fill = PPS),
stat = "identity", alpha = 0.8) +
guides(alpha = FALSE, size = FALSE) +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold")) + ggtitle(paste(OffTeam, "Offensive\n Shot Chart", sep = " ")) + scale_fill_gradient2(name="Off PPS")
DEF <- ggplot(DiffDeff)  +
annotation_custom(court, -250, 250, -52, 418) +
geom_hex(aes(x = x, y = y, fill = PPS),
stat = "identity", alpha = 0.8) +
guides(alpha = FALSE, size = FALSE) +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold")) + ggtitle(paste(DefTown, "defensive\n Shot Chart", sep = " ")) + scale_fill_gradient2(name="Def PPS")
COMP <- ggplot(Comparison)  +
annotation_custom(court, -250, 250, -52, 418) +
geom_hex(aes(x = x.x, y = y.x, fill = Diff),
stat = "identity", alpha = 0.8) +
guides(alpha = FALSE, size = FALSE) +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold")) + ggtitle("Comparison\n Shot Chart") + scale_fill_gradient2(name="Difference\n PPS")
grid.arrange(DEF, OFF, COMP, ncol=3)
return(list(Off = DiffOff, deff = DiffDeff, Comparison = Comparison, Total = Totalhex, PPSAA = PPSAA))
}
Com2 <- ShotComparison(OffTeam = "Philadelphia 76ers", DefTown = "Cleveland", SeasondataOff = shotDataTotal2016, SeasonDataDef = shotDatafDef2016, nbins = 40)
rm(xbnds)
Com2 <- ShotComparison(OffTeam = "Philadelphia 76ers", DefTown = "Cleveland", SeasondataOff = shotDataTotal2016, SeasonDataDef = shotDatafDef2016, nbins = 40)
shotDataTotal2016$TEAM_NAME
unique(shotDataTotal2016$TEAM_NAME)
defenseve_names <- names(shotDatafDef2016)
defenseve_names
Offensive_teams <- as.character(unique(shotDataTotal2016$TEAM_NAME))
Offensive_teams
Offensive_teams <- as.character(unique(shotDataTotal2016$TEAM_NAME))
defenseve_names <- names(shotDatafDef2016)
comparisons <- list()
comparisons <- list()
for (i in 1:length(Offensive_teams)) {
comparisons[i] <- ShotComparison(OffTeam = Offensive_teams[i], DefTown = defenseve_names[1], SeasondataOff = shotDataTotal2016, SeasonDataDef = shotDatafDef2016, nbins = 40)
print(comparisons[[i]]$PPSAA)
}
str(comparisons)
str(comparisons[[1]])
View(comparisons[[1]])
comparisons
comparisons[1]
str(comparisons)
comparisons[[1]][[3]]
comparisons[[1]][[4]]
comparisons[[1]][[5]]
comparisons[[1]][[6]]
comparisons[[1]][[7]]
comparisons[[1]][[5]]
comparisons[[1]][[1]]
comparisons[[1]][[2]]
comparisons[[1]][[3]]
ShotComparison(OffTeam = Offensive_teams[1], DefTown = defenseve_names[1], SeasondataOff = shotDataTotal2016, SeasonDataDef = shotDatafDef2016, nbins = 40)
ShotComparison(OffTeam = Offensive_teams[1], DefTown = defenseve_names[1], SeasondataOff = shotDataTotal2016, SeasonDataDef = shotDatafDef2016, nbins = 40)$PPSA
df <- data.frame(matrix(ncol = 30, nrow = 30))
colnames(df) <- as.character(unique(shotDataTotal2016$TEAM_NAME))
df <- data.frame(matrix(ncol = 30, nrow = 30))
colnames(df) <- as.character(unique(shotDataTotal2016$TEAM_NAME))
rownames(df) <- names(shotDatafDef2016)
View(df)
Offensive_teams <- as.character(unique(shotDataTotal2016$TEAM_NAME))
defenseve_names <- names(shotDatafDef2016)
Offensive_teams[1]
df$Offensive_teams[1]
colnames(df) == Offensive_teams[[1]]
df[rownames(df) == defenseve_names(1),colnames(df) == Offensive_teams[[1]]]
df[rownames(df) == defenseve_names[1],colnames(df) == Offensive_teams[[1]]]
df[rownames(df) == defenseve_names[1],colnames(df) == Offensive_teams[1]]
df[rownames(df) == defenseve_names[1],colnames(df) == Offensive_teams[1]] <- 1
df
ShotComparison <- function(OffTeam, DefTown, SeasondataOff, SeasonDataDef, nbins = 40) {
#Filter the offensive data of the Offensive Team
Off <- filter(SeasondataOff, TEAM_NAME == OffTeam)
#Filter the Deffensive data of the Defensive team
deff <- SeasonDataDef[names(SeasonDataDef) == DefTown][[1]]
#Get the maximum and minumum values for x and y
xbnds <- range(c(SeasondataOff$LOC_X, deff$LOC_X))
ybnds <- range(c(SeasondataOff$LOC_Y, deff$LOC_Y))
#Make hexbin dataframes out of the teams
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
##Total NBA data
Totalhex <- makeHexData(SeasondataOff)
##Defensive team data
Defhex <- makeHexData(deff)
##Offensive team data
Offhex <- makeHexData(Off)
#Merge offensive and deffensive data with total data by Cell id
DeffbyCell <- merge(Totalhex, Defhex, by = "cid", all = T)
OffByCell <- merge(Totalhex, Offhex, by = "cid", all = T)
##  when calculating the difference empty cells should count as 0
DeffbyCell$PPS.x[is.na(DeffbyCell$PPS.x)] <- 0
DeffbyCell$PPS.y[is.na(DeffbyCell$PPS.y)] <- 0
DeffbyCell$ST.y[is.na(DeffbyCell$ST.y)] <- 0
OffByCell$PPS.x[is.na(OffByCell$PPS.x)] <- 0
OffByCell$PPS.y[is.na(OffByCell$PPS.y)] <- 0
OffByCell$ST.y[is.na(OffByCell$ST.y)] <- 0
#  make a "difference" data.frame
DiffDeff <- data.frame(x = ifelse(is.na(DeffbyCell$x.x), DeffbyCell$x.y, DeffbyCell$x.x),
y = ifelse(is.na(DeffbyCell$y.x), DeffbyCell$y.y, DeffbyCell$y.x),
PPS= DeffbyCell$PPS.y - DeffbyCell$PPS.x,
cid= DeffbyCell$cid,
ST = DeffbyCell$ST.y)
DiffOff <- data.frame(x = ifelse(is.na(OffByCell$x.x), OffByCell$x.y, OffByCell$x.x),
y = ifelse(is.na(OffByCell$y.x), OffByCell$y.y, OffByCell$y.x),
PPS= OffByCell$PPS.y - OffByCell$PPS.x,
ST = OffByCell$ST.x,
cid = OffByCell$cid,
ST = OffByCell$ST.y)
#make team comparisons
Comparison <- merge(DiffOff, DiffDeff, by = "cid", all = T)
Comparison <- Comparison[,-c(6:7)]
Comparison$Diff <- c(Comparison$PPS.x + Comparison$PPS.y)
PPSAA <- weighted.mean((Comparison$PPS.x + Comparison$PPS.y), Comparison$ST.x)
print(PPSAA)
# OFF <- ggplot(DiffOff)  +
#   annotation_custom(court, -250, 250, -52, 418) +
#   geom_hex(aes(x = x, y = y, fill = PPS),
#            stat = "identity", alpha = 0.8) +
#   guides(alpha = FALSE, size = FALSE) +
#   coord_fixed()  +theme(line = element_blank(),
#                         axis.title.x = element_blank(),
#                         axis.title.y = element_blank(),
#                         axis.text.x = element_blank(),
#                         axis.text.y = element_blank(),
#                         legend.title = element_blank(),
#                         plot.title = element_text(size = 17, lineheight = 1.2, face = "bold")) + ggtitle(paste(OffTeam, "Offensive\n Shot Chart", sep = " ")) + scale_fill_gradient2(name="Off PPS")
# DEF <- ggplot(DiffDeff)  +
#   annotation_custom(court, -250, 250, -52, 418) +
#   geom_hex(aes(x = x, y = y, fill = PPS),
#            stat = "identity", alpha = 0.8) +
#   guides(alpha = FALSE, size = FALSE) +
#
#   coord_fixed()  +theme(line = element_blank(),
#                         axis.title.x = element_blank(),
#                         axis.title.y = element_blank(),
#                         axis.text.x = element_blank(),
#                         axis.text.y = element_blank(),
#                         legend.title = element_blank(),
#                         plot.title = element_text(size = 17, lineheight = 1.2, face = "bold")) + ggtitle(paste(DefTown, "defensive\n Shot Chart", sep = " ")) + scale_fill_gradient2(name="Def PPS")
#
# COMP <- ggplot(Comparison)  +
#   annotation_custom(court, -250, 250, -52, 418) +
#   geom_hex(aes(x = x.x, y = y.x, fill = Diff),
#            stat = "identity", alpha = 0.8) +
#   guides(alpha = FALSE, size = FALSE) +
#
#   coord_fixed()  +theme(line = element_blank(),
#                         axis.title.x = element_blank(),
#                         axis.title.y = element_blank(),
#                         axis.text.x = element_blank(),
#                         axis.text.y = element_blank(),
#                         legend.title = element_blank(),
#                         plot.title = element_text(size = 17, lineheight = 1.2, face = "bold")) + ggtitle("Comparison\n Shot Chart") + scale_fill_gradient2(name="Difference\n PPS")
#
# grid.arrange(DEF, OFF, COMP, ncol=3)
return(PPSAA)
}
Offensive_teams <- as.character(unique(shotDataTotal2016$TEAM_NAME))
defenseve_names <- names(shotDatafDef2016)
df <- data.frame(matrix(ncol = 30, nrow = 30))
colnames(df) <- as.character(unique(shotDataTotal2016$TEAM_NAME))
rownames(df) <- names(shotDatafDef2016)
for (i in 1:3) {
Offensive_team <- Offensive_teams[i]
for (j in 1:3){
df[rownames(df) == defenseve_names[j],colnames(df) == Offensive_team] <- ShotComparison(OffTeam = Offensive_team, DefTown = defenseve_names[j], SeasondataOff = shotDataTotal2016, SeasonDataDef = shotDatafDef2016, nbins = 30)
}
}
df <- data.frame(matrix(ncol = 30, nrow = 30))
colnames(df) <- as.character(unique(shotDataTotal2016$TEAM_NAME))
rownames(df) <- names(shotDatafDef2016)
for (i in 1:3) {
for (j in 1:3){
df[rownames(df) == defenseve_names[j],colnames(df) == Offensive_teams[i]] <- ShotComparison(OffTeam = Offensive_team, DefTown = defenseve_names[j], SeasondataOff = shotDataTotal2016, SeasonDataDef = shotDatafDef2016, nbins = 30)
}
}
df[rownames(df) == defenseve_names[1],colnames(df) == Offensive_teams[1]] <- ShotComparison(OffTeam = Offensive_teams[1], DefTown = defenseve_names[1], SeasondataOff = shotDataTotal2016, SeasonDataDef = shotDatafDef2016, nbins = 30)
comparisons <- list()
system.time(for (i in 1:length(Offensive_teams)) {
Offensive_team <- Offensive_teams[i]
for (j in 1:length(defenseve_names)){
comparisons[i] <- ShotComparison(OffTeam = Offensive_team, DefTown =                        defenseve_names[j], SeasondataOff = shotDataTotal2016, SeasonDataDef = shotDatafDef2016, nbins = 30)
}
})
210/60
Cols <- c("a", "b", "c")
Rows <- c("d", "e", "f")
DF <- data.frame(matrix(nrow = 3, ncol = 3))
colnames(DF) <- Cols
rownames(DF) <- Rows
DF
Cols <- c(1:3)
Rows <- c(4:6)
DF <- data.frame(matrix(nrow = 3, ncol = 3))
colnames(DF) <- Cols
rownames(DF) <- Rows
a <- 1
b <- 2
c <- 3
d <- 4
e <- 5
f <- 6
FX <- function(x , y){
S <- (x^2)+ (y^3)
return(S)
}
catt <- matrix(nrow = 3, ncol = 3)
for (i in 1:length(Cols)){
for(j in 1:length(Rows)){
catt[i, j] <- FX(Rows[i], Cols[j])
}
}
catt
Cols <- c(1:3)
Rows <- c(4:6)
DF <- data.frame(matrix(nrow = 3, ncol = 3))
colnames(DF) <- Cols
rownames(DF) <- Rows
a <- 1
b <- 2
c <- 3
d <- 4
e <- 5
f <- 6
FX <- function(x , y){
S <- (x^2)+ (y^3)
return(S)
}
for (i in 1:length(Cols)){
for(j in 1:length(Rows)){
DF[i, j] <- FX(Rows[i], Cols[j])
}
}
DF
library(rjson)
library(grid)
library(gridExtra)
library(png)
library(RCurl)
library(ggplot2)
library(jpeg)
library(hexbin)
library(sp)
library(knitr)
library(raster)
library(rasterVis)
library(dplyr)
ShotComparison <- function(OffTeam, DefTown, SeasondataOff, SeasonDataDef, nbins = 40) {
#Filter the offensive data of the Offensive Team
Off <- filter(SeasondataOff, TEAM_NAME == OffTeam)
#Filter the Deffensive data of the Defensive team
deff <- SeasonDataDef[names(SeasonDataDef) == DefTown][[1]]
#Get the maximum and minumum values for x and y
xbnds <- range(c(SeasondataOff$LOC_X, deff$LOC_X))
ybnds <- range(c(SeasondataOff$LOC_Y, deff$LOC_Y))
#Make hexbin dataframes out of the teams
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
##Total NBA data
Totalhex <- makeHexData(SeasondataOff)
##Defensive team data
Defhex <- makeHexData(deff)
##Offensive team data
Offhex <- makeHexData(Off)
#Merge offensive and deffensive data with total data by Cell id
DeffbyCell <- merge(Totalhex, Defhex, by = "cid", all = T)
OffByCell <- merge(Totalhex, Offhex, by = "cid", all = T)
##  when calculating the difference empty cells should count as 0
DeffbyCell$PPS.x[is.na(DeffbyCell$PPS.x)] <- 0
DeffbyCell$PPS.y[is.na(DeffbyCell$PPS.y)] <- 0
DeffbyCell$ST.y[is.na(DeffbyCell$ST.y)] <- 0
OffByCell$PPS.x[is.na(OffByCell$PPS.x)] <- 0
OffByCell$PPS.y[is.na(OffByCell$PPS.y)] <- 0
OffByCell$ST.y[is.na(OffByCell$ST.y)] <- 0
#  make a "difference" data.frame
DiffDeff <- data.frame(x = ifelse(is.na(DeffbyCell$x.x), DeffbyCell$x.y, DeffbyCell$x.x),
y = ifelse(is.na(DeffbyCell$y.x), DeffbyCell$y.y, DeffbyCell$y.x),
PPS= DeffbyCell$PPS.y - DeffbyCell$PPS.x,
cid= DeffbyCell$cid,
ST = DeffbyCell$ST.y)
DiffOff <- data.frame(x = ifelse(is.na(OffByCell$x.x), OffByCell$x.y, OffByCell$x.x),
y = ifelse(is.na(OffByCell$y.x), OffByCell$y.y, OffByCell$y.x),
PPS= OffByCell$PPS.y - OffByCell$PPS.x,
ST = OffByCell$ST.x,
cid = OffByCell$cid,
ST = OffByCell$ST.y)
#make team comparisons
Comparison <- merge(DiffOff, DiffDeff, by = "cid", all = T)
Comparison <- Comparison[,-c(6:7)]
Comparison$Diff <- c(Comparison$PPS.x + Comparison$PPS.y)
PPSAA <- weighted.mean((Comparison$PPS.x + Comparison$PPS.y), Comparison$ST.x)
OFF <- ggplot(DiffOff)  +
annotation_custom(court, -250, 250, -52, 418) +
geom_hex(aes(x = x, y = y, fill = PPS),
stat = "identity", alpha = 0.8) +
guides(alpha = FALSE, size = FALSE) +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold")) + ggtitle(paste(OffTeam, "Offensive\n Shot Chart", sep = " ")) + scale_fill_gradient2(name="Off PPS")
DEF <- ggplot(DiffDeff)  +
annotation_custom(court, -250, 250, -52, 418) +
geom_hex(aes(x = x, y = y, fill = PPS),
stat = "identity", alpha = 0.8) +
guides(alpha = FALSE, size = FALSE) +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold")) + ggtitle(paste(DefTown, "defensive\n Shot Chart", sep = " ")) + scale_fill_gradient2(name="Def PPS")
COMP <- ggplot(Comparison)  +
annotation_custom(court, -250, 250, -52, 418) +
geom_hex(aes(x = x.x, y = y.x, fill = Diff),
stat = "identity", alpha = 0.8) +
guides(alpha = FALSE, size = FALSE) +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold")) + ggtitle("Comparison\n Shot Chart") + scale_fill_gradient2(name="Difference\n PPS")
grid.arrange(DEF, OFF, COMP, ncol=3)
return(list(Off = DiffOff, deff = DiffDeff, Comparison = Comparison, Total = Totalhex, PPSAA = PPSAA))
}
str(ShotComparison(OffTeam = "Boston Celtics", DefTown = "San Antonio", SeasondataOff = shotDataTotal2016, SeasonDataDef = shotDatafDef2016, nbins = 40))
str(ShotComparison(OffTeam = "San Antonio Spurs", DefTown = "Brooklin", SeasondataOff = shotDataTotal2016, SeasonDataDef = shotDatafDef2016, nbins = 40))
str(ShotComparison(OffTeam = "San Antonio Spurs", DefTown = "Brooklyn", SeasondataOff = shotDataTotal2016, SeasonDataDef = shotDatafDef2016, nbins = 40))
A <- as.factor(sample(c("B", "C"), 12, replace = TRUE))
A
A <- as.factor(sample(c("swiftwater", "slackwater"), 12, replace = TRUE))
A
summary(A)
as.numeric(A)
A <- as.factor(sample(c("B", "C"), 12, replace = TRUE))
summary(A)
A <- as.factor(sample(c("B", "C"), 12, replace = TRUE))
summary(A)
A <- as.factor(sample(c("B", "C"), 12, replace = TRUE))
summary(A)
set.seed(3)
A <- as.factor(sample(c("B", "C"), 12, replace = TRUE))
summary(A)
set.seed(3)
A <- as.factor(sample(c("B", "C"), 12, replace = TRUE))
summary(A)
set.seed(3)
A <- as.factor(sample(c("B", "C"), 12, replace = TRUE))
summary(A)
?julian
library(librydate)
library(libridate)
library(lubridate)
date1 <- "12-04-2015"
date2 <- "12-04-2016"
date1 <- mdy("12-04-2015")
date2 <- mdy("12-04-2016")
date1
date2
class(date2)
julian(date1)
julian(date2)
julian(date1,origin = mdy("01-01-2015"))
julian(date2,origin = mdy("01-01-2016"))
mdy("AUG 10 2016")
year(mdy("AUG 10 2016"))
library(lubridate)
date1 <- mdy("12-04-2015")
date2 <- mdy("12-04-2016")
dates<- c(date1, date2)
dates
julian(dates)
year(dates)
ifelse(year(dates)== 2015, mdy("01-01-2015"),  mdy("01-01-2016"))
mdy("01-01-2015")
mdy("01-01-2016")
ifelse(year(dates)== 2015, mdy("01-01-2015"),  mdy("01-01-2016"))
julian(mdy("01-01-2016"))
if (1 > 2) {4} else {3}
if (year(dates)== 2015) {mdy("01-01-2015")} else {mdy("01-01-2016")}
ifelse(year(dates)== 2015, "01-01-2015"),  "01-01-2016")
ifelse(year(dates)== 2015, "01-01-2015",  "01-01-2016")
class(ifelse(year(dates)== 2015, "01-01-2015",  "01-01-2016"))
mdy(ifelse(year(dates)== 2015, "01-01-2015",  "01-01-2016"))
julian(dates, origin = mdy(ifelse(year(dates)== 2015, "01-01-2015",  "01-01-2016"))
)
length(dates)
Julian <- vector()
Julian
Julian <- vector()
for (i in 1:length(dates)) {
Julian[i] <- julian(dates[i], origin = mdy(ifelse(year(dates[i])== 2015, "01-01-2015",  "01-01-2016"))
)
}
Julian
colnames(shotDataTotal2016)
library("DiversityOccupancy", lib.loc="~/R/win-library/3.2")
LA <- data(lakers)
LA
la
lakers
View(lakers)
ymd(lakers$date)
dates<- ymd(lakers$date)
Julian <- vector()
Julian
for (i in 1:length(dates)) {
Julian[i] <- julian(dates[i], origin = mdy(ifelse(year(dates[i])== 2009, "01-01-2009",  "01-01-2008"))
)
}
Julian
summary(Julian)
cats <- c("I like cats", "I like cat")
gsub("cat", "cats", cats)
cats <- c("I like cats", "I like dogs")
gsub("cats", "dogs", cats)
cats <- c("I like cats", "I like dogs")
gsub("I like cats", "1", cats)
cats <- c("I like cats", "I like dogs")
gsub("I like cats", "Cat", cats)
cats <- c("I like cats", "I like dogs")
cats <- gsub("I like cats", "Cat", cats)
gsub("I like dogs", "Dogs", cats)
?gsun
?gsub
cats <- c("I like cats", "I like dogs")
cats <- grep("I like cats", cats)
cats
cats <- c("I like cats", "I like dogs")
cats <- grep("I like dogs", cats)
cats
cats <- c("I like cats", "I like dogs")
cats <- grep("dogs", cats)
cats
30*0.25
30/7.5
library("DiversityOccupancy", lib.loc="~/R/win-library/3.2")
data("IslandBirds")
data("Daily_Cov")
data("siteCov")
BirdOccupancy <-batchoccu(pres = IslandBirds, sitecov = siteCov, obscov =
Daily_Cov, spp =  5, form = ~ Day + Wind + Rain + Noise + Clouds ~
Elev + AgroFo + SecVec + Wetland)
detach("package:DiversityOccupancy", unload=TRUE)
library("DiversityOccupancy", lib.loc="~/R/win-library/3.2")
install.packages("rgl")
library("DiversityOccupancy", lib.loc="~/R/win-library/3.2")
install.packages("vegan")
library("DiversityOccupancy", lib.loc="~/R/win-library/3.2")
data("IslandBirds")
data("Daily_Cov")
data("siteCov")
BirdOccupancy <-batchoccu(pres = IslandBirds, sitecov = siteCov, obscov =
Daily_Cov, spp =  5, form = ~ Day + Wind + Rain + Noise + Clouds ~
Elev + AgroFo + SecVec + Wetland)
data("IslandBirds")
data("Daily_Cov")
data("siteCov")
BirdOccupancy <-batchoccu(pres = IslandBirds, sitecov = siteCov, obscov =
Daily_Cov, spp =  5, form = ~ Day + Wind + Rain + Noise + Clouds ~
Elev + AgroFo + SecVec + Wetland)
