schedule[,5] <- gsub("Cleveland Cavaliers", "Cle", schedule[,5])
schedule[,5] <- gsub("New Orleans Pelicans", "NO", schedule[,5])
schedule[,5] <- gsub("Golden State Warriors", "GSW", schedule[,5])
schedule[,5] <- gsub("Orlando Magic", "ORL", schedule[,5])
schedule[,5] <- gsub("Washington Wizards", "Was", schedule[,5])
schedule[,5] <- gsub("Philadelphia 76ers", "Phi", schedule[,5])
schedule[,5] <- gsub("Brooklyn Nets", "Bkn", schedule[,5])
schedule[,5] <- gsub("Utah Jazz", "Uta", schedule[,5])
schedule[,5] <- gsub("Miami Heat", "Mia", schedule[,5])
schedule[,5] <- gsub("Charlotte Hornets", "Cha", schedule[,5])
schedule[,5] <- gsub("Toronto Raptors", "Tor", schedule[,5])
schedule[,5] <- gsub("Indiana Pacers", "Ind", schedule[,5])
schedule[,5] <- gsub("Houston Rockets", "Hou", schedule[,5])
schedule[,5] <- gsub("Denver Nuggets", "Den", schedule[,5])
schedule[,5] <- gsub("Memphis Grizzlies", "Mem", schedule[,5])
schedule[,5] <- gsub("New York Knicks", "NY", schedule[,5])
schedule[,5] <- gsub("Milwaukee Bucks", "Mil", schedule[,5])
schedule[,5] <- gsub("Oklahoma City Thunder", "Okc", schedule[,5])
schedule[,5] <- gsub("San Antonio Spurs", "Sas", schedule[,5])
schedule[,5] <- gsub("Dallas Mavericks", "Dal", schedule[,5])
schedule[,5] <- gsub("Phoenix Suns", "Pho", schedule[,5])
schedule[,5] <- gsub("Portland Trail Blazers", "Por", schedule[,5])
schedule[,5] <- gsub("Los Angeles Clippers", "Lac", schedule[,5])
schedule[,5] <- gsub("Sacramento Kings", "Sac", schedule[,5])
schedule[,5] <- gsub("Los Angeles Lakers", "Lal", schedule[,5])
schedule[,5] <- gsub("Minnesota Timberwolves", "Min", schedule[,5])
schedule[,5] <- gsub("Charlotte Bobcats", "Cha", schedule[,5])
schedule[,5]<- gsub("New Orleans Hornets", "NO", schedule[,5])
schedule$Date <- mdy(as.character(schedule$Date))
schedule[,4] <- as.numeric(as.character(schedule[,4]))
schedule[,6] <- as.numeric(as.character(schedule[,6]))
schedule$defAPPS <- NA
schedule$offAPPS <- NA
schedule$HomeRes <- NA
schedule <- schedule[,-c(2,7:9)]
colnames(schedule) <- c("Date", "Visitor", "Visit_PTS", "Home", "Home_PTS", "defAPPS", "offAPPS", "HomeRes")
schedule$Season <- 2017
schedule$HomeRes <- schedule$Visit_PTS - schedule$Home_PTS
#####Start from here
library(SpatialBall)
data("season2017")
Playoffs2017 <- list()
for (i in 1:nrow(schedule)){
Playoffs2017[[i]] <- Get_Apps(HomeTeam = schedule$Home[i], VisitorTeam = schedule$Visitor[i], Seasondata = season2017)
}
Playoffs2017 <- do.call(rbind, Playoffs2017)
schedule$defAPPS <- Playoffs2017$defAPPS
schedule$offAPPS <- Playoffs2017$offAPPS
schedule$PredBRT <- Playoffs2017$spread
schedule$Type <- "Playoffs"
Playoffs2017 <- schedule
saveRDS(Playoffs2017, "Playoffs2017.rds")
season2016 <- readRDS("shotDataTotal2016.rds")
tests <- readRDS("tests.rds")
test <- tests[[7]]
test$PredBRT <- NA
for (i in 1:nrow(test)){
if (test$Season == 2017){
test$PredBRT[i] <- Get_Apps(HomeTeam = test$Home[i], VisitorTeam = test$Visitor[i], Seasondata = season2017)$spread
}
else if (test$Season == 2016){
test$PredBRT[i] <- Get_Apps(HomeTeam = test$Home[i], VisitorTeam = test$Visitor[i], Seasondata = season2016)$spread
}
}
beep(8)
Test2017 <- merge(test, Playoffs2017, all = TRUE)
saveRDS(Test2017, "Test2017.rds")
write.csv(Test2017, "Test2017.csv")
Test2017 <- readRDS("Test2017.rds")
FullOdds <- readRDS("FullOdds.rds")
DF3 <- merge(Test2017[,-13], FullOdds, all = T)
DF3 <- DF3[!is.na(DF3$PredBRT),]
DF3 <- DF3[!is.na(DF3$HomeRes),]
colnames(DF3)
colnames(Missing)
DF3 <- merge(DF3, Missing, all = T)
DF3 <- DF3[!is.na(DF3$HomeRes),]
saveRDS(DF3, "DF3.rds")
library(caret)
postResample(DF3$PredBRT, DF3$HomeRes)
postResample(DF3$VegasPred, DF3$HomeRes)
beep(1)
beep(2)
beep(3)
beep(4)
beep(4)
beep(4)
beep(5)
170/1400
beep(6)
beep(6)
beep(7)
beep(8)
beep(9)
beep(9)
beep(10)
for(i in 1:20){beep(2)}
for(i in 1:20){beep(2)}
nrow(DF4)
nrow(DF3)
BRT
BRT$results
BRT$results$Rsquared
summary(BRT$results$Rsquared)
print(BRT)
summary(DF3)
beep(8)
?beep
beep
system.file(paste("sounds/", sample(sounds,
size = 1), sep = ""), package = "beepr")
View(DF3)
summary(Missing)
Missing$Date <- mdy(Missing$Date)
summary(Missing)
DF3 <- merge(Test2017[,-13], FullOdds, all = T)
DF3 <- DF3[!is.na(DF3$PredBRT),]
DF3 <- DF3[!is.na(DF3$HomeRes),]
DF3 <- merge(DF3, Missing, all = T)
DF3 <- DF3[!is.na(DF3$HomeRes),]
saveRDS(DF3, "DF3.rds")
postResample(DF3$PredBRT, DF3$HomeRes)
postResample(DF3$VegasPred, DF3$HomeRes)
View(DF3)
Test2017 <- readRDS("Test2017.rds")
FullOdds <- readRDS("FullOdds.rds")
DF3 <- merge(Test2017[,-13], FullOdds, all = T)
DF3 <- DF3[!is.na(DF3$PredBRT),]
DF3 <- DF3[!is.na(DF3$HomeRes),]
DF3 <- merge(DF3[,1:9], Missing[,1:9], all = T)
DF3 <- DF3[!is.na(DF3$HomeRes),]
saveRDS(DF3, "DF3.rds")
View(DF3)
?duplicated
duplicated(DF3)
sum(duplicated(DF3))
DF3 <- merge(Test2017[,-13], FullOdds, all = T)
DF3 <- DF3[!is.na(DF3$PredBRT),]
DF3 <- DF3[!is.na(DF3$HomeRes),]
colnames(DF3)
DF3 <- merge(Test2017[,-13], FullOdds, all = T)
DF3 <- DF3[!is.na(DF3$PredBRT),]
DF3 <- DF3[!is.na(DF3$HomeRes),]
DF3 <- merge(DF3[,c(1:11,14)], Missing[,c(1:11,14)], all = T)
DF3 <- DF3[!is.na(DF3$HomeRes),]
View(DF3)
is.na(DF3$VegasPred)
sum(is.na(DF3$VegasPred))
DF3 <- merge(Test2017[,-13], FullOdds, all = T)
DF3 <- DF3[!is.na(DF3$PredBRT),]
DF3 <- DF3[!is.na(DF3$HomeRes),]
DF3 <- merge(DF3[,c(1:11,14)], Missing[,c(1:11,14)], all = T)
DF3 <- DF3[!is.na(DF3$HomeRes),]
DF3 <- DF3[!is.na(DF3$VegasPred),]
sum(duplicated(DF3))
postResample(DF3$PredBRT, DF3$HomeRes)
postResample(DF3$VegasPred, DF3$HomeRes)
saveRDS(DF3, "DF3.rds")
nrow(DF3)
nrow(train) + nrow(DF3)
nrow(DF3)
nrow(DF3)/(nrow(train) + nrow(DF3))
nrow(train)
saveRDS(DF3, "DF3.rds")
DF3 <- readRDS("DF3.rds")
nrow(DF3)
colnames(DF3)
ifelse(DF3$HomeRes < 0, "H", "V")
ClassificationWin <- data.frame(Winner = ifelse(DF3$HomeRes < 0, "H", "V"), BRTWinner = ifelse(DF3$PredBRT < 0, "H", "V"), VegasWinner = ifelse(DF3$VegasPred < 0, "H", "V"))
View(ClassificationWin)
postResample(ClassificationWin$BRTWinner, ClassificationWin$Winner)
postResample(ClassificationWin$VegasWinner, ClassificationWin$Winner)
confusionMatrix(ClassificationWin$BRTWinner, ClassificationWin$Winner)
confusionMatrix(ClassificationWin$BRTWinner, ClassificationWin$Winner)
confusionMatrix(ClassificationWin$VegasWinner, ClassificationWin$Winner)
confusionMatrix(ClassificationWin$VegasWinner, ClassificationWin$Winner)
confusionMatrix(ClassificationWin$VegasWinner, ClassificationWin$Winner)$table
stargazer::stargazer(confusionMatrix(ClassificationWin$VegasWinner, ClassificationWin$Winner)$table)
confusionMatrix(ClassificationWin$VegasWinner, ClassificationWin$Winner)$Table
confusionMatrix(ClassificationWin$VegasWinner, ClassificationWin$Winner)table
confusionMatrix(ClassificationWin$BRTWinner, ClassificationWin$Winner)
598 + 144
(598 + 144)/nrow(DF3)
nrow(DF3)
confusionMatrix(ClassificationWin$VegasWinner, ClassificationWin$Winner)
(558 + 248)
(558 + 248)/nrow(DF3)
(558 + 248)
postResample(DF3$PredBRT, DF3$HomeRes)
postResample(DF3$PredBRT, DF3$HomeRes)
postResample(DF3$PredBRT, DF3$HomeRes)$Rsquared
postResample(DF3$PredBRT, DF3$HomeRes)[2]
round(postResample(DF3$PredBRT, DF3$HomeRes)[2],3)
round(postResample(DF3$VegasPred, DF3$HomeRes)[2],3)
confusionMatrix(ClassificationWin$BRTWinner, ClassificationWin$Winner)
(598)/(598 + 116)
summary(ClassificationWin)
714/1212
598+116
(598)/(598 + 116)
confusionMatrix(ClassificationWin$VegasWinner, ClassificationWin$Winner)
(558 + 156)
(558)/(558 + 156)
(354)/(354 + 144)
confusionMatrix(ClassificationWin$BRTWinner, ClassificationWin$Winner)
(144)/(354 + 144)
confusionMatrix(ClassificationWin$VegasWinner, ClassificationWin$Winner)
confusionMatrix(ClassificationWin$BRTWinner, ClassificationWin$Winner)
confusionMatrix(ClassificationWin$BRTWinner, ClassificationWin$Winner)
DF3 <- readRDS("DF3.rds")
ClassificationWin <- data.frame(Winner = ifelse(DF3$HomeRes < 0, "H", "V"), BRTWinner = ifelse(DF3$PredBRT < 0, "H", "V"), VegasWinner = ifelse(DF3$VegasPred < 0, "H", "V"))
confusionMatrix(ClassificationWin$BRTWinner, ClassificationWin$Winner)
confusionMatrix(ClassificationWin$VegasWinner, ClassificationWin$Winner)
confusionMatrix(ClassificationWin$BRTWinner, ClassificationWin$Winner)
598 + 354
confusionMatrix(ClassificationWin$VegasWinner, ClassificationWin$Winner)
(354 + 144)
confusionMatrix(ClassificationWin$BRTWinner, ClassificationWin$Winner)
(598 + 354)/nrow(DF3)
TAT <- head(DF3)
TAT <- head(DF3)
rm(DifBRT)
TAT <- head(DF3)
TAT$DifBRT <- TAT$PredBRT - TAT$HomeRes
View(TAT)
TAT <- head(DF3)
TAT$DifBRT <- abs(TAT$PredBRT - TAT$HomeRes)
View(TAT)
TAT <- head(DF3)
TAT$DifBRT <- abs(TAT$PredBRT - TAT$HomeRes)
TAT$DifVegas <- abs(TAT$VegasPred - TAT$HomeRes)
TAT <- head(DF3)
TAT$DifBRT <- abs(TAT$PredBRT - TAT$HomeRes)
TAT$DifVegas <- abs(TAT$VegasPred - TAT$HomeRes)
TAT$Compare <- TAT$DifVegas - TAT$DifBRT
View(TAT)
TAT <- DF3
TAT$DifBRT <- abs(TAT$PredBRT - TAT$HomeRes)
TAT$DifVegas <- abs(TAT$VegasPred - TAT$HomeRes)
TAT$Compare <- TAT$DifVegas - TAT$DifBRT
View(TAT)
Summary(TAT)
summary(TAT)
TATPlayoffs <- dplyr::filter(TAT, Type == "Playoffs")
View(TATPlayoffs)
dplyr::arrange(TATPlayoffs, Compare)
head(dplyr::arrange(TATPlayoffs, Compare))
summary(head(dplyr::arrange(TATPlayoffs, Compare)))
summary(head(dplyr::arrange(TATPlayoffs, desc(Compare))))
summary(TATPlayoffs)
TATPlayoffs <- dplyr::filter(TAT, Type == "Playoffs" & abs(HomeRes <= 20))
summary(TATPlayoffs)
TATPlayoffs <- dplyr::filter(TAT, Type == "Playoffs" & abs(HomeRes) <= 20)
summary(TATPlayoffs)
TATPlayoffs <- dplyr::filter(TAT, Type == "Playoffs" & abs(HomeRes <= 20))
TATPlayoffs <- dplyr::filter(TAT, Type == "Playoffs" & abs(HomeRes) <= 20)
summary(head(dplyr::arrange(TATPlayoffs, desc(Compare))))
head(dplyr::arrange(TATPlayoffs, desc(Compare)))
head(dplyr::arrange(TATPlayoffs, Compare))
TATPlayoffs <- dplyr::filter(TAT, Type == "Playoffs")
head(dplyr::arrange(TATPlayoffs, desc(Compare)))
(dplyr::arrange(TATPlayoffs, Compare), 10)
head(dplyr::arrange(TATPlayoffs, Compare), 10)
#Best games for vegas
BestVegas <- head(dplyr::arrange(TATPlayoffs, Compare), 10)
#best games for me
BestBRT <- head(dplyr::arrange(TATPlayoffs, desc(Compare)), 10)
BestBRT
colnames(BestBRT)
BestBRT <- BestBRT[,-c(7,8,10)]
dput(colnames(BestBRT))
colnames(BestBRT) <- c("Date", "Visitor", "Visit PTS", "Home", "Home PTS", "Season", "Spread", "BRT Pred", "Vegas Pred", "DifBRT", "DifVegas", "Comparison")
TATPlayoffs <- dplyr::filter(TAT, Type == "Playoffs")
#Best games for vegas
BestVegas <- head(dplyr::arrange(TATPlayoffs, Compare), 10)
BestVegas <- BestVegas[,-c(7,8,10)]
colnames(BestVegas) <- c("Date", "Visitor", "Visit PTS", "Home", "Home PTS", "Season", "Spread", "BRT Pred", "Vegas Pred", "DifBRT", "DifVegas", "Comparison")
stargazer::stargazer(BestVegas, summary = FALSE)
BestBRT <- head(dplyr::arrange(TATPlayoffs, desc(Compare)), 10)
BestBRT <- BestBRT[,-c(7,8,10)]
colnames(BestBRT) <- c("Date", "Visitor", "Visit PTS", "Home", "Home PTS", "Season", "Spread", "BRT Pred", "Vegas Pred", "DifBRT", "DifVegas", "Comparison")
stargazer::stargazer(BestBRT, summary = FALSE)
View(BestBRT)
View(BestVegas)
summary(BestBRT)
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Cle", Seasondata = season2017, focus = "plus")
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Por", Seasondata = season2017, focus = "plus")
ShotComparisonGraph(HomeTeam = "Bos", VisitorTeam = "Cle", Seasondata = season2017, focus = "plus")
ShotComparisonGraph(HomeTeam = "Det", VisitorTeam = "Cle", Seasondata = season2017, focus = "plus")
ShotComparisonGraph(HomeTeam = "Det", VisitorTeam = "Cle", Seasondata = season2016, focus = "plus")
ShotComparisonGraph(HomeTeam = "Det", VisitorTeam = "Cle", Seasondata = season2016, focus = "plus")
View(DF3)
TAT <- DF3
TAT$DifBRT <- abs(TAT$PredBRT - TAT$HomeRes)
TAT$DifVegas <- abs(TAT$VegasPred - TAT$HomeRes)
TAT$Compare <- TAT$DifVegas - TAT$DifBRT
TATPlayoffs <- dplyr::filter(TAT, Type == "Playoffs")
BestVegas <- head(dplyr::arrange(TATPlayoffs, Compare), 10)
BestVegas <- BestVegas[,-c(7,8,10)]
colnames(BestVegas) <- c("Date", "Visitor", "Visit PTS", "Home", "Home PTS", "Season", "Spread", "BRT Pred", "Vegas Pred", "DifBRT", "DifVegas", "Comparison")
BestBRT <- head(dplyr::arrange(TATPlayoffs, desc(Compare)), 10)
BestBRT <- BestBRT[,-c(7,8,10)]
colnames(BestBRT) <- c("Date", "Visitor", "Visit PTS", "Home", "Home PTS", "Season", "Spread", "BRT Pred", "Vegas Pred", "DifBRT", "DifVegas", "Comparison")
View(BestBRT)
View(TAT)
summary(TAT)
View(BestBRT)
library(stargazer)
?stargazer
View(BestBRT)
BestBRT <- head(dplyr::arrange(TATPlayoffs, desc(Compare)), 10)
BestBRT <- BestBRT[,-c(7,8,10)]
colnames(BestBRT) <- c("Date", "Visitor", "Visit PTS", "Home", "Home PTS", "Season", "Spread", "BRT Pred", "Vegas Pred", "DifBRT", "DifVegas", "Comparison")
BestBRT <- BestBRT[,-1]
stargazer::stargazer(BestBRT, summary = FALSE, digits = 2, rownames = FALSE)
#best games for me
BestBRT <- head(dplyr::arrange(TATPlayoffs, desc(Compare)), 10)
BestBRT <- BestBRT[,-c(7,8,10)]
colnames(BestBRT) <- c("Date", "Visitor", "Visit PTS", "Home", "Home PTS", "Season", "Spread", "BRT Pred", "Vegas Pred", "DifBRT", "DifVegas", "Comparison")
BestBRT <- BestBRT[,-c(1,8,9)]
stargazer::stargazer(BestBRT, summary = FALSE, digits = 2, rownames = FALSE)
colnames(season2017)
head(season2017)
summary(season2017$SHOT_TYPE)
str(season2017)
a <-season2017 %>%
group_by(GAME_DATE) %>%
mutate(countT= tally(SHOT_TYPE))
library(dplyr)
a <-season2017 %>%
group_by(GAME_DATE) %>%
mutate(countT= tally(SHOT_TYPE))
a
library(dplyr)
a <-season2017 %>%
group_by(GAME_DATE)
a
library(dplyr)
a <-season2017 %>%
group_by(GAME_DATE) %>%
mutate(countT= tally(SHOT_TYPE))
?tally
library(dplyr)
a <-season2017 %>%
group_by(GAME_DATE) %>%
mutate(countT= coubt(SHOT_TYPE))
library(dplyr)
a <-season2017 %>%
group_by(GAME_DATE) %>%
mutate(countT= count(SHOT_TYPE))
library(dplyr)
a <-season2017 %>%
group_by(GAME_DATE)
?table
a <-season2017 %>%
group_by(GAME_DATE) %>%
mutate(countT= n())
a
View(a)
a <-season2017 %>%
group_by(GAME_DATE, SHOT_TYPE) %>%
mutate(countT= n())
View(a)
a <-season2017[,c(13,22)] %>%
group_by(GAME_DATE, SHOT_TYPE) %>%
mutate(countT= n())
View(a)
a <-season2017[,c(13,22)] %>%
group_by(as.factor(GAME_DATE), SHOT_TYPE) %>%
mutate(countT= n())
View(a)
a <-season2017[,c(13,22)] %>%
group_by(GAME_DATE, SHOT_TYPE) %>%
mutate(countT= n())
a <-season2017[,c(13,22)]
library(dplyr)
a <-season2017[,c(13,22)]
a$GAME_DATE <- as.factor(a$GAME_DATE)
a %>%
group_by(GAME_DATE, SHOT_TYPE) %>%
mutate(countT= n())
summary(a)
?mutate
a <-season2017[,c(13,22)]
a$GAME_DATE <- as.factor(a$GAME_DATE)
a %>%
group_by(GAME_DATE, SHOT_TYPE) %>%
tally()
View(a)
library(dplyr)
a <-season2017[,c(13,22)]
a$GAME_DATE <- as.factor(a$GAME_DATE)
a %>% group_by(GAME_DATE, SHOT_TYPE) %>% tally()
?tally
a <-season2017[,c(13,22)]
a$GAME_DATE <- as.factor(a$GAME_DATE)
table(a)
a <- tally(a, group_by(GAME_DATE, SHOT_TYPE))
library(dplyr)
a <-season2017[,c(13,22)]
a$GAME_DATE <- as.factor(a$GAME_DATE)
a <- tally(a, group_by(GAME_DATE, SHOT_TYPE))
a <- tally(a, GAME_DATE, SHOT_TYPE)
library(dplyr)
a <-season2017[,c(13,22)]
a$GAME_DATE <- as.factor(a$GAME_DATE)
a %>% group_by(GAME_DATE, SHOT_TYPE)
a <- a %>% group_by(GAME_DATE, SHOT_TYPE) %>% tally()
View(a)
colnames(a)
a <-season2017[,c(13,22)]
a$GAME_DATE <- as.factor(a$GAME_DATE)
a <- a %>% group_by(GAME_DATE, SHOT_TYPE) %>% tally() %>% mutate(per=round(100*n/n,2))
head(a)
library(dplyr)
a <-season2017[,c(13,22)]
a$GAME_DATE <- as.factor(a$GAME_DATE)
a <- a %>% group_by(GAME_DATE, SHOT_TYPE) %>% tally() %>% group_by(GAME_DATE) %>%
mutate(countT= sum(n)) %>%
group_by(SHOT_TYPE, add=TRUE) %>%
mutate(per=paste0(round(100*n/countT,2),'%'))
head(a)
library(dplyr)
a <-season2017[,c(13,22)]
#a$GAME_DATE <- as.factor(a$GAME_DATE)
a <- a %>% group_by(GAME_DATE, SHOT_TYPE) %>% tally() %>% group_by(GAME_DATE) %>%
mutate(countT= sum(n)) %>%
group_by(SHOT_TYPE, add=TRUE) %>%
mutate(per=round(100*n/countT,2))
head(a)
?left_join
a <- a[,c(1,2,5)]
head(a)
a <- filter(a, SHOT_TYPE == "3pt Field Goal")
a
a <-season2017[,c(13,22)]
#a$GAME_DATE <- as.factor(a$GAME_DATE)
a <- a %>% group_by(GAME_DATE, SHOT_TYPE) %>% tally() %>% group_by(GAME_DATE) %>%
mutate(countT= sum(n)) %>%
group_by(SHOT_TYPE, add=TRUE) %>%
mutate(per=round(100*n/countT,2))
a <- a[,c(1,2,5)]
a <- filter(a, SHOT_TYPE == "3PT Field Goal")
a
library(ggplot2)
ggplot(a, aes(x = GAME_DATE, y = SHOT_TYPE)) + geom_smooth()
ggplot(a, aes(x = GAME_DATE, y = SHOT_TYPE)) + geom_point()
head(a)
ggplot(a, aes(x = GAME_DATE, y = per)) + geom_smooth()
ggplot(a, aes(x = GAME_DATE, y = per)) + geom_point()
ggplot(a, aes(x = GAME_DATE, y = per)) + geom_smooth()
a <-rbind(season2017, season2016, season2015, season2014, season2013, season2012)
a <- a[,c(13,22)]
#a$GAME_DATE <- as.factor(a$GAME_DATE)
a <- a %>% group_by(GAME_DATE, SHOT_TYPE) %>% tally() %>% group_by(GAME_DATE) %>%
mutate(countT= sum(n)) %>%
group_by(SHOT_TYPE, add=TRUE) %>%
mutate(per=round(100*n/countT,2))
a <- a[,c(1,2,5)]
a <- filter(a, SHOT_TYPE == "3PT Field Goal")
head(a)
library(dplyr)
a <-rbind(season2017, season2016, season2015, season2014, season2013, season2012)
a <- a[,c(13,22)]
library(dplyr)
a <-rbind(season2017, season2016, season2015, season2014, season2013, season2012)
library(dplyr)
a <-rbind(season2017, season2016, season2015, season2014, season2013)
a <- a[,c(13,22)]
#a$GAME_DATE <- as.factor(a$GAME_DATE)
a <- a %>% group_by(GAME_DATE, SHOT_TYPE) %>% tally() %>% group_by(GAME_DATE) %>%
mutate(countT= sum(n)) %>%
group_by(SHOT_TYPE, add=TRUE) %>%
mutate(per=round(100*n/countT,2))
a <- a[,c(1,2,5)]
a <- filter(a, SHOT_TYPE == "3PT Field Goal")
head(a)
ggplot(a, aes(x = GAME_DATE, y = per)) + geom_smooth()
ggplot(a, aes(x = GAME_DATE, y = per)) + geom_point()
summary(a)
head(DF3)
b <- rbind(DF3 + train)
b <- rbind(DF3, train)
colnames(DF3)
colnames(train)
b <- rbind(DF3[,c(1,9)], train[,c(1,9)])
head(b)
b <- rbind(DF3[,c(1,9)], train[,c(1,9)])
b$HomeRes <- abs(b$HomeRes)
colnames(a)
dput(colnames(a))
colnames(a)<-c("Date", "SHOT_TYPE", "per")
c <- merge(a,b)
head(c)
ggplot(c, aes(x = HomeRes, y = per)) + geom_smooth()
summary(c)
ggplot(c, aes(x = HomeRes, y = per)) + geom_point()
ggplot(c, aes(x = Date, y = HomeRes)) + geom_point()
b <- rbind(DF3[,c(1,9)], train[,c(1,9)])
b$HomeRes <- abs(b$HomeRes)
b <- b %>% group_by(Date) %>% summarise(Spread = mean(HomeRes))
head(b)
c <- merge(a,b)
ggplot(c, aes(x = HomeRes, y = per)) + geom_smooth()
ggplot(c, aes(x = Spread, y = per)) + geom_smooth()
ggplot(c, aes(x = Spread, y = per)) + geom_point()
ggplot(c, aes(x = Spread, y = per)) + geom_smooth(method = "lm")
ggplot(c, aes(x = Spread, y = per)) + geom_smooth()
ggplot(c, aes(x = Spread, y = Date)) + geom_smooth()
ggplot(c, aes(x = per, y = Spread)) + geom_smooth()
ggplot(c, aes(x = Date, y = Spread)) + geom_smooth()
ggplot(c, aes(x = Date, y = Spread)) + geom_smooth() + geom_point()
