set.seed(7)
BRT2017_20_Abr_c <- train(x = trainNBA_c[,c(7,8)],y = trainNBA_c[,9], method = "gbm",  preProcess = c("center", "scale"), verbose = TRUE, trControl = ctrl, tuneGrid = grid)
saveRDS(BRT2017_20_Abr_c, "BRT2017_20_Abr_c.rds")
BRT2017_20_Abr_c <- readRDS("BRT2017_20_Abr_c.rds")
testNBA_c$PredictedBRT <- predict(BRT2017_20_Abr_c, testNBA_c[,7:8])
ggplot(testNBA_c, aes(x = HomeRes, y = PredictedBRT)) + geom_smooth() + geom_point() + xlab("Diferencia") + ylab("Diferencia predicha")
BRT2017_20_Abr_c$bestTune
BRT2017_20_Abr_c$resampledCM
BRT2017_20_Abr_c$method
BRT2017_20_Abr_c$modelInfo
BRT2017_20_Abr_c$results
summary(BRT2017_20_Abr$resample)
summary(BRT2017_20_Abr_c$resample)
For.predictions_c <- expand.grid(defAPPS = seq(from = min(past_gamesFiltPlayoff_c$defAPPS), to = max(past_gamesFiltPlayoff_c$defAPPS), length.out = 100),
offAPPS =seq(from= min(past_gamesFiltPlayoff_c$offAPPS),to = max(past_gamesFiltPlayoff_c$offAPPS), length.out = 100))
For.predictions_c$Spread <- predict(BRT2017_20_Abr_c, For.predictions_c)
For.predictions2_c <- For.predictions_c
For.predictions2_c$Type <- c("Predicted")
For.predictions3_c <- For.predictions2_c[seq(from =1, to = NROW(For.predictions_c), by = 100),]
For.predictions3_c$Spread <- 0
For.predictions3_c$Type <- c("Push")
For.predictions2_c <- rbind(For.predictions2_c, For.predictions3_c)
#Test 1
wireframe(Spread ~  offAPPS + defAPPS, group = Type, data = For.predictions2_c, colorkey = TRUE, drape = TRUE, pretty = TRUE,scales = list(arrows = FALSE), screen = list(z = -220, x = -80), par.settings = list(regions=list(alpha=0.75)))
postResample(pred = testNBA_c$PredictedBRT, obs = testNBA_c$HomeRes)
summary(BRT2017_20_Abr_c$resample)
WLtestNBA_c <- testNBA_c
WLtestNBA_c$HomeRes <- as.factor(ifelse(WLtestNBA_c$HomeRes < 0, "W", "L"))
WLtestNBA_c$PredictedBRT <- as.factor(ifelse(WLtestNBA_c$PredictedBRT < 0, "W", "L"))
confusionMatrix(WLtestNBA_c$PredictedBRT, WLtestNBA_c$HomeRes)
For.predictions_c <- expand.grid(defAPPS = seq(from = min(past_gamesFiltPlayoff_c$defAPPS), to = max(past_gamesFiltPlayoff_c$defAPPS), length.out = 100),
offAPPS =seq(from= min(past_gamesFiltPlayoff_c$offAPPS),to = max(past_gamesFiltPlayoff_c$offAPPS), length.out = 100))
past_gamesFiltPlayoff_c$defAPPS)
past_gamesFiltPlayoff_c
str(past_gamesFiltPlayoff_c)
summary(past_gamesFiltPlayoff_c)
min(past_gamesFiltPlayoff_c$defAPPS)
min(past_gamesFiltPlayoff_c$offAPPS)
View(dplyr::filter(past_gamesFiltPlayoff_c, offAPPS == NA))
View(dplyr::filter(past_gamesFiltPlayoff_c, is.na(offAPPS)))
View(past_gamesFiltPlayoff_c)
is.na(past_gamesFiltPlayoff_c$offAPPS)
View(testNBA_c)
For.predictions_c <- expand.grid(defAPPS = seq(from = min(past_gamesFiltPlayoff_c$defAPPS), to = max(past_gamesFiltPlayoff_c$defAPPS), length.out = 100),
offAPPS =seq(from= min(past_gamesFiltPlayoff_c$offAPPS, na.rm = TRUE),to = max(past_gamesFiltPlayoff_c$offAPPS, na.rm = TRUE), length.out = 100))
For.predictions_c$Spread <- predict(BRT2017_20_Abr_c, For.predictions_c)
For.predictions2_c <- For.predictions_c
For.predictions2_c$Type <- c("Predicted")
For.predictions3_c <- For.predictions2_c[seq(from =1, to = NROW(For.predictions_c), by = 100),]
For.predictions3_c$Spread <- 0
For.predictions3_c$Type <- c("Push")
For.predictions2_c <- rbind(For.predictions2_c, For.predictions3_c)
wireframe(Spread ~  offAPPS + defAPPS, group = Type, data = For.predictions2_c, colorkey = TRUE, drape = TRUE, pretty = TRUE,scales = list(arrows = FALSE), screen = list(z = -220, x = -80), par.settings = list(regions=list(alpha=0.75)))
plot(BRT2017_20_Abr_c)
plot(BRT2017_20_Abr)
summarise(BRT2017_20_Abr)
summary(BRT2017_20_Abr)
summary(BRT2017_20_Abr_c)
postResample(pred = testNBA_c$PredictedBRT, obs = testNBA_c$HomeRes)
summary(BRT2017_20_Abr_c$resample)
postResample(pred = testNBA$PredictedBRT, obs = testNBA$HomeRes)
past_gamesFiltPlayoff <- readRDS("past_gamesFiltPlayoff.rds")
#Train set playoffs 2012 through 2015 and regular season 2013 through 2016
trainNBA <- dplyr::filter(past_gamesFiltPlayoff, Season != 2017 & Type == "regular_season" | Season != 2016 & Type == "Playoffs")
testNBA <- dplyr::filter(past_gamesFiltPlayoff, Season == 2017 & Type == "regular_season" | Season == 2016 & Type == "Playoffs")
BRT2017_20_Abr <- readRDS("BRT2017_20_Abr.rds")
testNBA$PredictedBRT <- predict(BRT2017_20_Abr, testNBA[,7:8])
ggplot(testNBA, aes(x = HomeRes, y = PredictedBRT)) + geom_smooth() + geom_point() + xlab("Diferencia") + ylab("Diferencia predicha")
#####3d plot
For.predictions <- expand.grid(defAPPS = seq(from = min(past_gamesFiltPlayoff$defAPPS), to = max(past_gamesFiltPlayoff$defAPPS), length.out = 100),
offAPPS =seq(from= min(past_gamesFiltPlayoff$offAPPS),to = max(past_gamesFiltPlayoff$offAPPS), length.out = 100))
For.predictions$Spread <- predict(BRT2017_20_Abr, For.predictions)
For.predictions2 <- For.predictions
For.predictions2$Type <- c("Predicted")
For.predictions3 <- For.predictions2[seq(from =1, to = NROW(For.predictions), by = 100),]
For.predictions3$Spread <- 0
For.predictions3$Type <- c("Push")
For.predictions2 <- rbind(For.predictions2, For.predictions3)
#Test 1
wireframe(Spread ~  offAPPS + defAPPS, group = Type, data = For.predictions2, colorkey = TRUE, drape = TRUE, pretty = TRUE,scales = list(arrows = FALSE), screen = list(z = -220, x = -80), par.settings = list(regions=list(alpha=0.75)))
postResample(pred = testNBA$PredictedBRT, obs = testNBA$HomeRes)
postResample(pred = testNBA_c$PredictedBRT, obs = testNBA_c$HomeRes)
wireframe(Spread ~  offAPPS + defAPPS, group = Type, data = For.predictions2_c, colorkey = TRUE, drape = TRUE, pretty = TRUE,scales = list(arrows = FALSE), screen = list(z = -220, x = -80), par.settings = list(regions=list(alpha=0.75)))
summary(BRT2017_20_Abr_c$resample)
WLtestNBA_c <- testNBA_c
WLtestNBA_c$HomeRes <- as.factor(ifelse(WLtestNBA_c$HomeRes < 0, "W", "L"))
WLtestNBA_c$PredictedBRT <- as.factor(ifelse(WLtestNBA_c$PredictedBRT < 0, "W", "L"))
confusionMatrix(WLtestNBA_c$PredictedBRT, WLtestNBA_c$HomeRes)
WLtestNBA_c$HomeRes <- as.factor(ifelse(WLtestNBA_c$HomeRes > 0, "L", "W"))
WLtestNBA_c$PredictedBRT <- as.factor(ifelse(WLtestNBA_c$PredictedBRT > 0, "L", "W"))
confusionMatrix(WLtestNBA_c$PredictedBRT, WLtestNBA_c$HomeRes)
WLtestNBA_c <- testNBA_c
WLtestNBA_c$HomeRes <- as.factor(ifelse(WLtestNBA_c$HomeRes > 0, "L", "W"))
WLtestNBA_c$PredictedBRT <- as.factor(ifelse(WLtestNBA_c$PredictedBRT > 0, "L", "W"))
confusionMatrix(WLtestNBA_c$PredictedBRT, WLtestNBA_c$HomeRes)
WLtestNBA_c <- testNBA_c
WLtestNBA_c$HomeRes <- as.factor(ifelse(WLtestNBA_c$HomeRes < 0, "W", "L"))
WLtestNBA_c$PredictedBRT <- as.factor(ifelse(WLtestNBA_c$PredictedBRT < 0, "W", "L"))
confusionMatrix(WLtestNBA_c$PredictedBRT, WLtestNBA_c$HomeRes, positive = "W")
For.predictions_c <- expand.grid(defAPPSc = seq(from = min(past_gamesFiltPlayoff_c$defAPPS), to = max(past_gamesFiltPlayoff_c$defAPPS), length.out = 100),
offAPPSc =seq(from= min(past_gamesFiltPlayoff_c$offAPPS, na.rm = TRUE),to = max(past_gamesFiltPlayoff_c$offAPPS, na.rm = TRUE), length.out = 100))
For.predictions_c$Spread <- predict(BRT2017_20_Abr_c, For.predictions_c)
For.predictions2_c <- For.predictions_c
For.predictions2_c$Type <- c("Predicted")
For.predictions3_c <- For.predictions2_c[seq(from =1, to = NROW(For.predictions_c), by = 100),]
For.predictions3_c$Spread <- 0
For.predictions3_c$Type <- c("Push")
For.predictions2_c <- rbind(For.predictions2_c, For.predictions3_c)
#Test 1
wireframe(Spread ~  offAPPS + defAPPS, group = Type, data = For.predictions2_c, colorkey = TRUE, drape = TRUE, pretty = TRUE,scales = list(arrows = FALSE), screen = list(z = -220, x = -80), par.settings = list(regions=list(alpha=0.75)))
For.predictions_c <- expand.grid(defAPPS = seq(from = min(past_gamesFiltPlayoff_c$defAPPS), to = max(past_gamesFiltPlayoff_c$defAPPS), length.out = 100),
offAPPS =seq(from= min(past_gamesFiltPlayoff_c$offAPPS, na.rm = TRUE),to = max(past_gamesFiltPlayoff_c$offAPPS, na.rm = TRUE), length.out = 100))
For.predictions_c$Spread <- predict(BRT2017_20_Abr_c, For.predictions_c)
For.predictions2_c <- For.predictions_c
For.predictions2_c$Type <- c("Predicted")
For.predictions3_c <- For.predictions2_c[seq(from =1, to = NROW(For.predictions_c), by = 100),]
For.predictions3_c$Spread <- 0
For.predictions3_c$Type <- c("Push")
For.predictions2_c <- rbind(For.predictions2_c, For.predictions3_c)
#Test 1
wireframe(Spread ~  offAPPS + defAPPS, group = Type, data = For.predictions2_c, colorkey = TRUE, drape = TRUE, pretty = TRUE,scales = list(arrows = FALSE), screen = list(z = -220, x = -80), par.settings = list(regions=list(alpha=0.75)))
compare_models(BRT2017_20_Abr, BRT2017_20_Abr_c)
ComparisonPPSc(OffTeam = "Chi", DefTown = "Bkn", SeasondataOff = shotDataTotal2013, SeasonDataDef = shotDatafDef2013)
ComparisonPPSc(OffTeam = "Bkn", DefTown = "Chi", SeasondataOff = shotDataTotal2013, SeasonDataDef = shotDatafDef2013)
df <- data.frame(matrix(ncol = 30, nrow = 30))
colnames(df) <- as.character(unique(shotDataTotal2017$TEAM_NAME))
rownames(df) <- names(shotDatafDef2017)
Offensive_teams <- as.character(unique(shotDataTotal2017$TEAM_NAME))
defenseve_names <- names(shotDatafDef2017)
for (i in 1:length(Offensive_teams)) {
for (j in 1:length(defenseve_names)){
df[rownames(df) == defenseve_names[j],colnames(df) == Offensive_teams[i]] <- ComparisonPPS(OffTeam = Offensive_teams[i], DefTown = defenseve_names[j], SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017, nbins = 30)$PPSAA
}
}
df
View(df)
df2 <- df
colnames(df) == rownames(df)
ROWS <- rownames(df)
COLS <- colnames(df)
df2 <- df
for (i in 1:length(ROWS)) {
for (j in 1:length(COLS)){
df[rownames(df) == COLS[j],colnames(df) == ROWS[i]] <- NA
}
}
View(df)
rownames(df == COLS[i])
rownames(df == COLS[1])
COLS
COLS[i]
COLS[1]
rownames(df) == COLS[1]
df <- df2
View(df)
rownames(df) == COLS[1], colnames(df) == ROWS
rownames(df) == COLS[1], colnames(df) == ROWS[1]
colnames(df) == ROWS[1]
ROWS[1]
COLS[1]
sort(ROWS)
sort(COLS)
ROWS <- sort(rownames(df))
COLS <- sort(colnames(df))
ROWS
XOLS
COLS
df[rownames(df) = COLS[1], colnames(df) == ROWS[1]]
df[rownames(df) == COLS[1], colnames(df) == ROWS[1]]
df2 <- df
for (i in 1:length(ROWS)) {
df[rownames(df) == COLS[i], colnames(df) == ROWS[i]] <- NA
}
View(df)
colMeans(df)
colMeans(df, na.rm = TRUE)
rowMeans(df, na.rm = TRUE)
offrating <- colMeans(df, na.rm = TRUE)*50
defrating <- rowMeans(df, na.rm = TRUE)*50
offrating
sort(offrating)
sort(offrating)
sort(defrating)
defrating <- rowMeans(df, na.rm = TRUE)*-50
defrating
sort(defrating)
class(defrating)
offratingDF <- data.frame(Team = colnames(df), offrating = offrating)
defratingDF <- data.frame(Team = rownames(df), defrating = defrating)
netDF <- merge.data.frame(offratingDF, defratingDF)
view(dplyr::arrange(netDF, offrating))
View(dplyr::arrange(netDF, offrating))
View(dplyr::arrange(netDF, desc(offrating)))
netDF$netrating <- netDF$offrating + netDF$defrating
View(dplyr::arrange(netDF, desc(netrating)))
write.csv(netDF, "~/Desktop/Paper NBA/rating.csv")
write.csv(dplyr::arrange(netDF, desc(netrating)), "~/Desktop/Paper NBA/rating.csv")
ComparisonPPSc("Chi", "Bos", shotDataTotal2017, shotDatafDef2017)
ComparisonPPSc("Bos", "Chi", shotDataTotal2017, shotDatafDef2017)
write.csv(dplyr::arrange(netDF, desc(netrating)), "~/Desktop/Paper NBA/rating.csv")
past_games_c <- readRDS("past_games.rds")
shotDataTotal2017<- readRDS("shotDataTotal2017.rds")
shotDatafDef2017 <- readRDS("shotDatafDef2017.rds")
#####2016
shotDataTotal2016<- readRDS("shotDataTotal2016.rds")
shotDatafDef2016 <- readRDS("shotDatafDef2016.rds")
#####2015
shotDataTotal2015<- readRDS("shotDataTotal2015.rds")
shotDatafDef2015 <- readRDS("shotDatafDef2015.rds")
####2014
shotDataTotal2014<- readRDS("shotDataTotal2014.rds")
shotDatafDef2014 <- readRDS("shotDatafDef2014.rds")
#####2013
shotDataTotal2013<- readRDS("shotDataTotal2013.rds")
shotDatafDef2013 <- readRDS("shotDatafDef2013.rds")
pacman::p_load(rjson, grid, gridExtra, png, RCurl, ggplot2, jpeg, hexbin, sp, knitr, raster, rasterVis, dplyr)
ComparisonPPSc <- function(OffTeam, DefTown, SeasondataOff, SeasonDataDef, nbins = 40) {
#Filter the offensive data of the Offensive Team
SeasondataOff <- dplyr::filter(SeasondataOff, LOC_Y < 280)
Off <- filter(SeasondataOff, TEAM_NAME == OffTeam)
#Filter the Deffensive data of the Defensive team
deff <- SeasonDataDef[names(SeasonDataDef) == DefTown][[1]]
deff <- dplyr::filter(deff, LOC_Y < 280)
#Get the maximum and minumum values for x and y
xbnds <- range(c(SeasondataOff$LOC_X, deff$LOC_X))
ybnds <- range(c(SeasondataOff$LOC_Y, deff$LOC_Y))
#Make hexbin dataframes out of the teams
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
##Total NBA data
Totalhex <- makeHexData(SeasondataOff)
##Defensive team data
Defhex <- makeHexData(deff)
##Offensive team data
Offhex <- makeHexData(Off)
#Merge offensive and deffensive data with total data by Cell id
DeffbyCell <- merge(Totalhex, Defhex, by = "cid", all = T)
OffByCell <- merge(Totalhex, Offhex, by = "cid", all = T)
##  when calculating the difference empty cells should count as 0
DeffbyCell$PPS.x[is.na(DeffbyCell$PPS.x)] <- 0
DeffbyCell$PPS.y[is.na(DeffbyCell$PPS.y)] <- 0
DeffbyCell$ST.y[is.na(DeffbyCell$ST.y)] <- 0
OffByCell$PPS.x[is.na(OffByCell$PPS.x)] <- 0
OffByCell$PPS.y[is.na(OffByCell$PPS.y)] <- 0
OffByCell$ST.y[is.na(OffByCell$ST.y)] <- 0
#  make a "difference" data.frame
DiffDeff <- data.frame(x = ifelse(is.na(DeffbyCell$x.x), DeffbyCell$x.y, DeffbyCell$x.x),
y = ifelse(is.na(DeffbyCell$y.x), DeffbyCell$y.y, DeffbyCell$y.x),
PPS= DeffbyCell$PPS.y - DeffbyCell$PPS.x,
cid= DeffbyCell$cid,
ST = DeffbyCell$ST.y)
DiffOff <- data.frame(x = ifelse(is.na(OffByCell$x.x), OffByCell$x.y, OffByCell$x.x),
y = ifelse(is.na(OffByCell$y.x), OffByCell$y.y, OffByCell$y.x),
PPS= OffByCell$PPS.y - OffByCell$PPS.x,
ST = OffByCell$ST.x,
cid = OffByCell$cid,
ST = OffByCell$ST.y)
#make team comparisons
Comparison <- merge(DiffOff, DiffDeff, by = "cid", all = T)
Comparison <- Comparison[,-c(6:7)]
Comparison$Diff <- c(Comparison$PPS.x + Comparison$PPS.y)
PPSAA <- weighted.mean((Comparison$PPS.x + Comparison$PPS.y), Comparison$ST.x, na.rm = TRUE)
Offa <- dplyr::filter(SeasondataOff, HTM == OffTeam | VTM == OffTeam)
OffCorrection <- nrow(dplyr::filter(Offa, TEAM_NAME == OffTeam))/nrow(dplyr::filter(Offa, TEAM_NAME != OffTeam))
Defa <- dplyr::filter(SeasondataOff, HTM == DefTown | VTM == DefTown)
DefCorrection <- nrow(dplyr::filter(Defa, TEAM_NAME != DefTown))/nrow(dplyr::filter(Defa, TEAM_NAME == DefTown))
PPSAAc = PPSAA*((OffCorrection*DefCorrection)/2)
return(list(PPSAAc = PPSAAc))
}
############################################
for(i in 1:NROW(past_games_c)) {
if (past_games_c$Season[i] == 2017) {
shotDatafDef2017Temp <- shotDatafDef2017
shotDatafDef2017Temp[[past_games_c$Home[i]]] <- dplyr::filter(shotDatafDef2017[[past_games_c$Home[i]]], GAME_DATE < past_games_c$Date[i])
past_games_c$defAPPS[i] <- ComparisonPPSc(OffTeam = past_games_c$Home[i], DefTown = past_games_c$Visitor[i], SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < past_games_c$Date[i]), SeasonDataDef = shotDatafDef2017Temp)
}else if (past_games_c$Season[i] == 2016){
shotDatafDef2016Temp <- shotDatafDef2016
shotDatafDef2016Temp[[past_games_c$Home[i]]] <- dplyr::filter(shotDatafDef2016[[past_games_c$Home[i]]], GAME_DATE < past_games_c$Date[i])
past_games_c$defAPPS[i] <- ComparisonPPSc(OffTeam = past_games_c$Home[i], DefTown = past_games_c$Visitor[i], SeasondataOff = dplyr::filter(shotDataTotal2016, GAME_DATE < past_games_c$Date[i]), SeasonDataDef = shotDatafDef2016Temp)
}else if (past_games_c$Season[i] == 2015){
shotDatafDef2015Temp <- shotDatafDef2015
shotDatafDef2015Temp[[past_games_c$Home[i]]] <- dplyr::filter(shotDatafDef2015[[past_games_c$Home[i]]], GAME_DATE < past_games_c$Date[i])
past_games_c$defAPPS[i] <- ComparisonPPSc(OffTeam = past_games_c$Home[i], DefTown = past_games_c$Visitor[i], SeasondataOff = dplyr::filter(shotDataTotal2015, GAME_DATE < past_games_c$Date[i]), SeasonDataDef = shotDatafDef2015Temp)
}else if (past_games_c$Season[i] == 2014 & i >10){
shotDatafDef2014Temp <- shotDatafDef2014
shotDatafDef2014Temp[[past_games_c$Home[i]]] <- dplyr::filter(shotDatafDef2014[[past_games_c$Home[i]]], GAME_DATE < past_games_c$Date[i])
past_games_c$defAPPS[i] <- ComparisonPPSc(OffTeam = past_games_c$Home[i], DefTown = past_games_c$Visitor[i], SeasondataOff = dplyr::filter(shotDataTotal2014, GAME_DATE < past_games_c$Date[i]), SeasonDataDef = shotDatafDef2014Temp)
}else if (past_games_c$Season[i] == 2013 & i >20){
shotDatafDef2013Temp <- shotDatafDef2013
shotDatafDef2013Temp[[past_games_c$Home[i]]] <- dplyr::filter(shotDatafDef2013[[past_games_c$Home[i]]], GAME_DATE < past_games_c$Date[i])
past_games_c$defAPPS[i] <- ComparisonPPSc(OffTeam = past_games_c$Home[i], DefTown = past_games_c$Visitor[i], SeasondataOff = dplyr::filter(shotDataTotal2013, GAME_DATE < past_games_c$Date[i]), SeasonDataDef = shotDatafDef2013Temp)
}else{
past_games_c$defAPPS[i] <- NA
}
}
for(i in 1:NROW(past_games_c)) {
if (past_games_c$Season[i] == 2017) {
shotDatafDef2017Temp <- shotDatafDef2017
shotDatafDef2017Temp[[past_games_c$Visitor[i]]] <- dplyr::filter(shotDatafDef2017[[past_games_c$Visitor[i]]], GAME_DATE < past_games_c$Date[i])
past_games_c$offAPPS[i] <- ComparisonPPSc(OffTeam = past_games_c$Visitor[i], DefTown = past_games_c$Home[i], SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < past_games_c$Date[i]), SeasonDataDef = shotDatafDef2017Temp)
}else if (past_games_c$Season[i] == 2016){
shotDatafDef2016Temp <- shotDatafDef2016
shotDatafDef2016Temp[[past_games_c$Visitor[i]]] <- dplyr::filter(shotDatafDef2016[[past_games_c$Visitor[i]]], GAME_DATE < past_games_c$Date[i])
past_games_c$offAPPS[i] <- ComparisonPPSc(OffTeam = past_games_c$Visitor[i], DefTown = past_games_c$Home[i], SeasondataOff = dplyr::filter(shotDataTotal2016, GAME_DATE < past_games_c$Date[i]), SeasonDataDef = shotDatafDef2016Temp)
}else if (past_games_c$Season[i] == 2015){
shotDatafDef2015Temp <- shotDatafDef2015
shotDatafDef2015Temp[[past_games_c$Visitor[i]]] <- dplyr::filter(shotDatafDef2015[[past_games_c$Visitor[i]]], GAME_DATE < past_games_c$Date[i])
past_games_c$offAPPS[i] <- ComparisonPPSc(OffTeam = past_games_c$Visitor[i], DefTown = past_games_c$Home[i], SeasondataOff = dplyr::filter(shotDataTotal2015, GAME_DATE < past_games_c$Date[i]), SeasonDataDef = shotDatafDef2015Temp)
}else if (past_games_c$Season[i] == 2014 & i >10){
shotDatafDef2014Temp <- shotDatafDef2014
shotDatafDef2014Temp[[past_games_c$Visitor[i]]] <- dplyr::filter(shotDatafDef2014[[past_games_c$Visitor[i]]], GAME_DATE < past_games_c$Date[i])
past_games_c$offAPPS[i] <- ComparisonPPSc(OffTeam = past_games_c$Visitor[i], DefTown = past_games_c$Home[i], SeasondataOff = dplyr::filter(shotDataTotal2014, GAME_DATE < past_games_c$Date[i]), SeasonDataDef = shotDatafDef2014Temp)
}else if (past_games_c$Season[i] == 2013 & i >20){
shotDatafDef2013Temp <- shotDatafDef2013
shotDatafDef2013Temp[[past_games_c$Visitor[i]]] <- dplyr::filter(shotDatafDef2013[[past_games_c$Visitor[i]]], GAME_DATE < past_games_c$Date[i])
past_games_c$offAPPS[i] <- ComparisonPPSc(OffTeam = past_games_c$Visitor[i], DefTown = past_games_c$Home[i], SeasondataOff = dplyr::filter(shotDataTotal2013, GAME_DATE < past_games_c$Date[i]), SeasonDataDef = shotDatafDef2013Temp)
}else{
past_games_c$offAPPS[i] <- NA
}
}
past_games_c$defAPPS <- unlist(past_games_c$defAPPS)
past_games_c$offAPPS <- unlist(past_games_c$offAPPS)
dates2017_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("25-10-2016")]
DF2017_c <- data.frame(Season = rep(2017, times =length(dates2017_c)), day = rep(NA, times =length(dates2017_c)), defAPPS = rep(NA, times = length(dates2017_c)), dates = dates2017_c)
for(i in 10:length(dates2017_c)) {
shotDatafDef2017Temp <- shotDatafDef2017
DF2017_c$day[i] <- i
print(i)
shotDatafDef2017Temp[["Cle"]] <- dplyr::filter(shotDatafDef2017Temp[["Cle"]], GAME_DATE < dates2017_c[i])
DF2017_c[i,3] <- ComparisonPPSc(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < dates2017_c[i]), SeasonDataDef = shotDatafDef2017Temp)
}
DF2017_c <- DF2017_c[complete.cases(DF2017_c),]
#Params <- data.frame(season = 2017, As)
#ceiling(summary(Model1)$coefficients[3])
dates2016_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("27-10-2015") & unique(past_games_c$Date) <= dmy("13-04-2016")]
DF2016_c <- data.frame(Season = rep(2016, times =length(dates2016_c)), day = rep(NA, times =length(dates2016_c)), defAPPS = rep(NA, times = length(dates2016_c)), dates = dates2016_c)
for(i in 10:length(dates2016_c)) {
shotDatafDef2016Temp <- shotDatafDef2016
DF2016_c$day[i] <- i
print(i)
shotDatafDef2016Temp[["Cle"]] <- dplyr::filter(shotDatafDef2016Temp[["Cle"]], GAME_DATE < dates2016_c[i])
DF2016_c[i,3] <- ComparisonPPSc(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2016, GAME_DATE < dates2016_c[i]), SeasonDataDef = shotDatafDef2016Temp)
}
DF2016_c <- DF2016_c[complete.cases(DF2016_c),]
dates2015_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("28-10-2014") & unique(past_games_c$Date) <= dmy("15-04-2015")]
DF2015_c <- data.frame(Season = rep(2015, times =length(dates2015_c)), day = rep(NA, times =length(dates2015_c)), defAPPS = rep(NA, times = length(dates2015_c)), dates = dates2015_c)
for(i in 10:length(dates2015_c)) {
shotDatafDef2015Temp <- shotDatafDef2015
DF2015_c$day[i] <- i
print(i)
shotDatafDef2015Temp[["Cle"]] <- dplyr::filter(shotDatafDef2015Temp[["Cle"]], GAME_DATE < dates2015_c[i])
DF2015_c[i,3] <- ComparisonPPSc(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2015, GAME_DATE < dates2015_c[i]), SeasonDataDef = shotDatafDef2015Temp)
}
DF2015_c <- DF2015_c[complete.cases(DF2015_c),]
dates2014_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("29-10-2013") & unique(past_games_c$Date) <= dmy("16-04-2014")]
DF2014_c <- data.frame(Season = rep(2014, times =length(dates2014_c)), day = rep(NA, times =length(dates2014_c)), defAPPS = rep(NA, times = length(dates2014_c)), dates = dates2014_c)
for(i in 10:length(dates2014_c)) {
shotDatafDef2014Temp <- shotDatafDef2014
DF2014_c$day[i] <- i
print(i)
shotDatafDef2014Temp[["Cle"]] <- dplyr::filter(shotDatafDef2014Temp[["Cle"]], GAME_DATE < dates2014_c[i])
DF2014_c[i,3] <- ComparisonPPSc(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2014, GAME_DATE < dates2014_c[i]), SeasonDataDef = shotDatafDef2014Temp)
}
DF2014_c <- DF2014_c[complete.cases(DF2014_c),]
dates2013_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("20-10-2012") & unique(past_games_c$Date) <= dmy("17-04-2013")]
DF2013_c <- data.frame(Season = rep(2013, times =length(dates2013_c)), day = rep(NA, times =length(dates2013_c)), defAPPS = rep(NA, times = length(dates2013_c)), dates = dates2013_c)
for(i in 10:length(dates2013_c)) {
shotDatafDef2013Temp <- shotDatafDef2013
DF2013_c$day[i] <- i
print(i)
shotDatafDef2013Temp[["Cle"]] <- dplyr::filter(shotDatafDef2013Temp[["Cle"]], GAME_DATE < dates2013_c[i])
DF2013_c[i,3] <- ComparisonPPSc(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2013, GAME_DATE < dates2013_c[i]), SeasonDataDef = shotDatafDef2013Temp)
}
DF2013_c <- DF2013_c[complete.cases(DF2013_c),]
DFDates_c <- rbind(DF2013_c, DF2014_c ,DF2015_c, DF2016_c, DF2017_c)
Model1_c <-nls(defAPPS ~ SSasympOff(day, A, lrc, c0), data = DFDates_c)
DFDates_c$pred <- predict(Model1_c)
ceiling(summary(Model1_c)$coefficients[3])
for_filtering_c <- DFDates_c[DFDates_c$day ==ceiling(summary(Model1_c)$coefficients[3]),]
DFDates_c$Season <- as.factor(DFDates_c$Season)
ggplot(DFDates_c, aes(x = day, y = defAPPS))+ geom_point(aes(color = Season)) + geom_line(aes(y = pred)) + geom_vline(xintercept = ceiling(summary(Model1_c)$coefficients[3]))
past_gamesFilt_c <- dplyr::filter(past_games_c, Date >= for_filtering_c$dates[1] & Season == 2013
| Date >= for_filtering_c$dates[2] & Season == 2014
| Date >= for_filtering_c$dates[3] & Season == 2015
| Date >= for_filtering_c$dates[4] & Season == 2016
| Date >= for_filtering_c$dates[5] & Season == 2017)
past_gamesFilt_c <- past_gamesFilt_c[complete.cases(past_gamesFilt_c),]
ggplot(past_gamesFilt, aes(x = HomeRes, y = defAPPS)) + geom_smooth()
past_gamesFilt$Type <- "regular_season"
ggplot(past_gamesFilt_c, aes(x = HomeRes, y = defAPPS)) + geom_smooth()
past_gamesFilt$Type <- "regular_season"
library(readr)
README <- read_csv("~/Gurobi/gurobi702/linux64/R/README")
View(README)
install.packages("~/Gurobi/gurobi702/linux64/R/gurobi_7.0-2_R_x86_64-pc-linux-gnu.tar.gz")
install.packages("~/Gurobi/gurobi702/linux64/R/gurobi_7.0-2_R_x86_64-unknown-linux-gnu.tar.gz", repos = NULL)
install.packages("~/Gurobi/gurobi702/linux64/R/gurobi_7.0-2_R_x86_64-pc-linux-gnu.tar.gz", repos = NULL)
library(gurobi)
install.packages("slam")
library(gurobi)
pacman::p_load(rjson, grid, gridExtra, png, RCurl, ggplot2, jpeg, hexbin, sp, knitr, raster, rasterVis, dplyr)
by_team <- readRDS("by_team.rds")
teamID <- by_team$team_id
teamName <- by_team$team_city
defensiveURL <- list()
shotData <- list()
shotDatafDef <- list()
shotURLtotal <- paste("http://stats.nba.com/stats/shotchartdetail?CFID=33&CFPARAMS=2011-12&ContextFilter=&ContextMeasure=FGA&DateFrom=&DateTo=&GameID=&GameSegment=&LastNGames=0&LeagueID=00&Location=&MeasureType=Base&Month=0&OpponentTeamID=0&Outcome=&PaceAdjust=N&PerMode=PerGame&Period=0&PlayerID=0&PlusMinus=N&Position=&Rank=N&RookieYear=&Season=2011-12&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=&mode=Advanced&showDetails=0&showShots=1&showZones=0&PlayerPosition=", sep = "")
# import from JSON
shotDataTotal <- fromJSON(file = shotURLtotal, method="C")
# unlist shot data, save into a data frame
shotchartTotal2012 <- data.frame(matrix(unlist(shotDataTotal$resultSets[[1]][[3]]), ncol = 24, byrow = TRUE))
pacman::p_load(rjson, grid, gridExtra, png, RCurl, ggplot2, jpeg, hexbin, sp, knitr, raster, rasterVis, dplyr)
#library(rjson)
#library(grid)
#library(gridExtra)
#library(png)
#library(RCurl)
#library(ggplot2)
#library(jpeg)
#library(hexbin)
#library(sp)
#library(knitr)
#library(raster)
#library(rasterVis)
#library(dplyr)
by_team <- readRDS("by_team.rds")
teamID <- by_team$team_id
teamName <- by_team$team_city
defensiveURL <- list()
shotData <- list()
shotDatafDef <- list()
shotURLtotal <- paste("http://stats.nba.com/stats/shotchartdetail?CFID=33&CFPARAMS=2011-12&ContextFilter=&ContextMeasure=FGA&DateFrom=&DateTo=&GameID=&GameSegment=&LastNGames=0&LeagueID=00&Location=&MeasureType=Base&Month=0&OpponentTeamID=0&Outcome=&PaceAdjust=N&PerMode=PerGame&Period=0&PlayerID=0&PlusMinus=N&Position=&Rank=N&RookieYear=&Season=2011-12&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=&mode=Advanced&showDetails=0&showShots=1&showZones=0&PlayerPosition=", sep = "")
# import from JSON
shotDataTotal <- fromJSON(file = shotURLtotal, method="C")
# unlist shot data, save into a data frame
shotchartTotal2012 <- data.frame(matrix(unlist(shotDataTotal$resultSets[[1]][[3]]), ncol = 24, byrow = TRUE))
pacman::p_load(rjson, grid, gridExtra, png, RCurl, ggplot2, jpeg, hexbin, sp, knitr, raster, rasterVis, dplyr)
shotURLtotal <- paste("https://geo.socioambiental.org/webadaptor2/services/raisg/raisg_anps/MapServer/WMSServer?request=GetCapabilities&service=WMS", sep = "")
# import from JSON
Test <- fromJSON(file = shotURLtotal, method="C")
require(XML)
arch = "http://geo.socioambiental.org/webadaptor2/services/raisg/raisg_anps/MapServer/WMSServer?request=GetCapabilities&service=WMS"
doc <- xmlTreeParse(arch,getDTD=T,addAttributeNamespaces=T)
pacman::p_load(rjson, grid, gridExtra, png, RCurl, ggplot2, jpeg, hexbin, sp, knitr, raster, rasterVis, dplyr)
shotURLtotal <- paste("https://geo.socioambiental.org/arcgis/rest/services/raisg?f=pjson", sep = "")
# import from JSON
Test <- fromJSON(file = shotURLtotal, method="C")
Test
str(test_frame)
str(Test)
pacman::p_load(rjson, grid, gridExtra, png, RCurl, ggplot2, jpeg, hexbin, sp, knitr, raster, rasterVis, dplyr)
shotURLtotal <- paste("https://geo.socioambiental.org/arcgis/rest/services/raisg/raisg_anps/MapServer?f=pjson", sep = "")
# import from JSON
Test <- fromJSON(file = shotURLtotal, method="C")
str(Test)
Test$layers
str(Test$layers)
library(readr)
rating <- read_csv("~/Desktop/Paper NBA/rating.csv")
View(rating)
rating[,-1]
stargazer::stargazer(rating[,-1])
stargazer::stargazer(rating[,-1], digits = 3)
stargazer::stargazer(rating[,-1], digits = 3, header = FALSE, summary = FALSE)
str(rating)
stargazer::stargazer(rating[,-1], digits = 3, header = FALSE, summary = FALSE)
stargazer::stargazer(rating[,-1], digits = 3, header = FALSE, summary = FALSE, rownames = FALSE)
stargazer::stargazer(rating[,-1], digits = 3, header = FALSE, summary = FALSE, rownames = FALSE, type = "text")
rating$offrating <- round(rating$offrating, 3)
rating$defrating <- round(rating$defrating, 3)
rating$netrating <- round(rating$netrating, 3)
stargazer::stargazer(rating[,-1], digits = 3, header = FALSE, summary = FALSE, rownames = FALSE)
library(readr)
Bos <- read_csv("~/Desktop/Paper NBA/BostonSAExample.csv")
View(Bos)
stargazer::stargazer(Bos, digits = 3, header = FALSE, summary = FALSE, rownames = FALSE)
library(readr)
Correction <- read_csv("~/Desktop/Paper NBA/Correction.csv",
col_types = cols(Factor = col_number(),
X1 = col_skip()))
View(Correction)
colnames(Correction) <- c("Team", "PropOff")
Correction$PropDef <- 2- Correction$PropOff
View(Correction)
Correction$PropOff <- round(Correction$PropOff, 3)
Correction$PropDef <- round(Correction$PropDef, 3)
stargazer::stargazer(Correction, digits = 3, header = FALSE, summary = FALSE, rownames = FALSE)
stargazer::stargazer(dplyr::arrange(head(Correction, 10), desc(PropOff)), digits = 3, header = FALSE, summary = FALSE, rownames = FALSE)
stargazer::stargazer(head(dplyr::arrange(Correction, desc(PropOff)),10), digits = 3, header = FALSE, summary = FALSE, rownames = FALSE)
past_games_c <- readRDS("past_games.rds")
shotDataTotal2017<- readRDS("shotDataTotal2017.rds")
shotDatafDef2017 <- readRDS("shotDatafDef2017.rds")
#####2016
shotDataTotal2016<- readRDS("shotDataTotal2016.rds")
shotDatafDef2016 <- readRDS("shotDatafDef2016.rds")
#####2015
shotDataTotal2015<- readRDS("shotDataTotal2015.rds")
shotDatafDef2015 <- readRDS("shotDatafDef2015.rds")
####2014
shotDataTotal2014<- readRDS("shotDataTotal2014.rds")
shotDatafDef2014 <- readRDS("shotDatafDef2014.rds")
#####2013
shotDataTotal2013<- readRDS("shotDataTotal2013.rds")
shotDatafDef2013 <- readRDS("shotDatafDef2013.rds")
past_games_c <- readRDS("past_games_c.rds")
head(past_games_c)
