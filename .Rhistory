Total <- hex_coord_df(Totalhex$x, Totalhex$y, (0.2*Totalhex$ST), (0.2*Totalhex$ST), size =1)
Total$PPS <- rep(Totalhex$PPS, each = 6)
#Make Graph
GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(midpoint = median(1.0), low = "blue", high = "red", limits=c(0.3, 2.1)) +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold"))+ scale_size(range = c(0, maxsize)) + ylim(c(-40, 270))+ theme(legend.position="bottom")
if(type == "PPS"){
GRAPH <- GRAPH +  ggtitle(paste("Points per Shot of", team, sep =" "))
}  else {GRAPH <- GRAPH +  ggtitle("Shooting percentage")}
return(GRAPH)
}
OffShotSeasonGraphTeam(shotDataTotal2017, team = "GSW",quant = 0.7)
OffShotSeasonGraphTeam(shotDataTotal2017, team = "Hou",quant = 0.3)
OffShotSeasonGraphTeam <- function(SeasondataOff, team, nbins = 30, maxsize = 7, quant = 0.7, type = "PPS") {
dataOff <- dplyr::filter(SeasondataOff, TEAM_NAME == team)
#Get the maximum and minumum values for x and y
xbnds <- range(dataOff$LOC_X)
ybnds <- range(dataOff$LOC_Y)
#Make hexbin dataframes out of the teams
if (type == "PPS"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
if (type == "PCT"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG)), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
##Total NBA data
Totalhex <- makeHexData(dataOff)
#Function to transform hexbins into polygons
hex_coord_df <- function(x, y, width, height, size = 1) {
# like hex_coord but returns a dataframe of vertices grouped by an id variable
dx <- log(size * width / 6)
dy <- log(size * height / 2 / sqrt(3))
hex_x <- rbind(x - 2 * dx, x - dx, x + dx, x + 2 * dx, x + dx, x - dx)
hex_y <- rbind(y, y + dy, y + dy, y, y - dy, y - dy)
id    <- rep(1:length(x), each=6)
data.frame(cbind(x=as.vector(hex_x), y=as.vector(hex_y), id))
}
#Transform Hexbins into polygons
Totalhex <- filter(Totalhex, ST > quantile(Totalhex$ST, probs = quant))
Total <- hex_coord_df(Totalhex$x, Totalhex$y, (0.2*Totalhex$ST), (0.2*Totalhex$ST), size =1)
Total$PPS <- rep(Totalhex$PPS, each = 6)
#Make Graph
GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(midpoint = median(1.0), low = "blue", high = "red", limits=c(0.3, 2.1)) +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold"))+ scale_size(range = c(0, maxsize)) + ylim(c(-40, 270))+ theme(legend.position="bottom")
if(type == "PPS"){
GRAPH <- GRAPH +  ggtitle(paste("Points per Shot of", team, sep =" "))
}  else {GRAPH <- GRAPH +  ggtitle("Shooting percentage")}
return(GRAPH)
}
OffShotSeasonGraphTeam(shotDataTotal2017, team = "GSW",quant = 0.7)
OffShotSeasonGraphTeam(shotDataTotal2017, team = "Hou",quant = 0.2)
OffShotSeasonGraphTeam <- function(SeasondataOff, team, nbins = 30, maxsize = 7, quant = 0.7, type = "PPS") {
dataOff <- dplyr::filter(SeasondataOff, TEAM_NAME == team)
#Get the maximum and minumum values for x and y
xbnds <- range(dataOff$LOC_X)
ybnds <- range(dataOff$LOC_Y)
#Make hexbin dataframes out of the teams
if (type == "PPS"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
if (type == "PCT"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG)), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
##Total NBA data
Totalhex <- makeHexData(dataOff)
#Function to transform hexbins into polygons
hex_coord_df <- function(x, y, width, height, size = 1) {
# like hex_coord but returns a dataframe of vertices grouped by an id variable
dx <- log(size * width / 6)
dy <- log(size * height / 2 / sqrt(3))
hex_x <- rbind(x - 2 * dx, x - dx, x + dx, x + 2 * dx, x + dx, x - dx)
hex_y <- rbind(y, y + dy, y + dy, y, y - dy, y - dy)
id    <- rep(1:length(x), each=6)
data.frame(cbind(x=as.vector(hex_x), y=as.vector(hex_y), id))
}
#Transform Hexbins into polygons
Totalhex <- filter(Totalhex, ST > quantile(Totalhex$ST, probs = quant))
Total <- hex_coord_df(Totalhex$x, Totalhex$y, (0.15*Totalhex$ST), (0.15*Totalhex$ST), size =1)
Total$PPS <- rep(Totalhex$PPS, each = 6)
#Make Graph
GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(midpoint = median(1.0), low = "blue", high = "red", limits=c(0.3, 2.1)) +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold"))+ scale_size(range = c(0, maxsize)) + ylim(c(-40, 270))+ theme(legend.position="bottom")
if(type == "PPS"){
GRAPH <- GRAPH +  ggtitle(paste("Points per Shot of", team, sep =" "))
}  else {GRAPH <- GRAPH +  ggtitle("Shooting percentage")}
return(GRAPH)
}
OffShotSeasonGraphTeam(shotDataTotal2017, team = "GSW",quant = 0.35)
OffShotSeasonGraphTeam(shotDataTotal2017, team = "Hou",quant = 0.35)
OffShotSeasonGraphTeam <- function(SeasondataOff, team, nbins = 30, maxsize = 7, quant = 0.7, type = "PPS") {
dataOff <- dplyr::filter(SeasondataOff, TEAM_NAME == team)
#Get the maximum and minumum values for x and y
xbnds <- range(dataOff$LOC_X)
ybnds <- range(dataOff$LOC_Y)
#Make hexbin dataframes out of the teams
if (type == "PPS"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
if (type == "PCT"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG)), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
##Total NBA data
Totalhex <- makeHexData(dataOff)
#Function to transform hexbins into polygons
hex_coord_df <- function(x, y, width, height, size = 1) {
# like hex_coord but returns a dataframe of vertices grouped by an id variable
dx <- log(size * width / 6)
dy <- log(size * height / 2 / sqrt(3))
hex_x <- rbind(x - 2 * dx, x - dx, x + dx, x + 2 * dx, x + dx, x - dx)
hex_y <- rbind(y, y + dy, y + dy, y, y - dy, y - dy)
id    <- rep(1:length(x), each=6)
data.frame(cbind(x=as.vector(hex_x), y=as.vector(hex_y), id))
}
#Transform Hexbins into polygons
Totalhex <- filter(Totalhex, ST > quantile(Totalhex$ST, probs = quant))
Total <- hex_coord_df(Totalhex$x, Totalhex$y, (0.05*Totalhex$ST), (0.05*Totalhex$ST), size =1)
Total$PPS <- rep(Totalhex$PPS, each = 6)
#Make Graph
GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(midpoint = median(1.0), low = "blue", high = "red", limits=c(0.3, 2.1)) +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold"))+ scale_size(range = c(0, maxsize)) + ylim(c(-40, 270))+ theme(legend.position="bottom")
if(type == "PPS"){
GRAPH <- GRAPH +  ggtitle(paste("Points per Shot of", team, sep =" "))
}  else {GRAPH <- GRAPH +  ggtitle("Shooting percentage")}
return(GRAPH)
}
a
b
c
d
C <- OffShotSeasonGraphTeam(shotDataTotal2017, team = "Phi",quant = 0.7)
d <- OffShotSeasonGraphTeam(shotDataTotal2017, team = "ORL",quant = 0.7)
C
d
shotDataTotal2016 <- readRDS("shotDataTotal2016.rds")
OffShotSeasonGraphTeam(shotDataTotal2017, team = "GSW",quant = 0.6)
OffShotSeasonGraphTeam(shotDataTotal2017, team = "Hou",quant = 0.6)
OffShotSeasonGraphTeam(shotDataTotal2016, team = "GSW",quant = 0.6)
OffShotSeasonGraphTeam(shotDataTotal2016, team = "Hou",quant = 0.6)
OffShotSeasonGraphTeam(shotDataTotal2016, team = "GSW",quant = 0.5)
OffShotSeasonGraphTeam(shotDataTotal2016, team = "Hou",quant = 0.5)
shotDataTotal2016<- readRDS("shotDataTotal2016.rds")
shotDatafDef2016 <- readRDS("shotDatafDef2016.rds")
court <- readRDS("court.rds")
ShotSeasonGraph <- function(SeasondataOff, nbins = 30, maxsize = 7, quant = 0.7, type = "PPS", MAX_Y = 270) {
SeasondataOff <- dplyr::filter(SeasondataOff, LOC_Y < MAX_Y)
#Get the maximum and minumum values for x and y
xbnds <- range(SeasondataOff$LOC_X)
ybnds <- range(SeasondataOff$LOC_Y)
#Make hexbin dataframes out of the teams
if (type == "PPS"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
if (type == "PCT"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG)), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
##Total NBA data
Totalhex <- makeHexData(SeasondataOff)
#Function to transform hexbins into polygons
hex_coord_df <- function(x, y, width, height, size = 1) {
# like hex_coord but returns a dataframe of vertices grouped by an id variable
dx <- log(size * width / 6)
dy <- log(size * height / 2 / sqrt(3))
hex_x <- rbind(x - 2 * dx, x - dx, x + dx, x + 2 * dx, x + dx, x - dx)
hex_y <- rbind(y, y + dy, y + dy, y, y - dy, y - dy)
id    <- rep(1:length(x), each=6)
data.frame(cbind(x=as.vector(hex_x), y=as.vector(hex_y), id))
}
#Transform Hexbins into polygons
Totalhex <- filter(Totalhex, ST > quantile(Totalhex$ST, probs = quant))
Total <- hex_coord_df(Totalhex$x, Totalhex$y, (0.05*Totalhex$ST), (0.05*Totalhex$ST), size =1)
Total$PPS <- rep(Totalhex$PPS, each = 6)
#Make Graph
GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(midpoint = median(Total$PPS), low = "blue", high = "red") +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold"))+ scale_size(range = c(0, maxsize)) + ylim(c(-40, 270))+ theme(legend.position="bottom")
if(type == "PPS"){
GRAPH <- GRAPH +  ggtitle("Points per Shot")
}  else {GRAPH <- GRAPH +  ggtitle("Shooting percentage")}
return(GRAPH)
}
max_x750 <- ShotSeasonGraph(shotDataTotal2017, quant = 0.75, MAX_Y = 750)
max_x500 <- ShotSeasonGraph(shotDataTotal2017, quant = 0.75, MAX_Y = 500)
max_x270 <- ShotSeasonGraph(shotDataTotal2017, quant = 0.75, MAX_Y = 270)
ShotSeasonGraph(shotDataTotal2017, quant = 0.4, MAX_Y = 270)
library(gridExtra)
grid.arrange(max_x750,max_x500, max_x270, ncol = 3)
OffShotSeasonGraphTeam <- function(SeasondataOff, team, nbins = 30, maxsize = 7, quant = 0.7, type = "PPS") {
dataOff <- dplyr::filter(SeasondataOff, TEAM_NAME == team)
#Get the maximum and minumum values for x and y
xbnds <- range(dataOff$LOC_X)
ybnds <- range(dataOff$LOC_Y)
#Make hexbin dataframes out of the teams
if (type == "PPS"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
if (type == "PCT"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG)), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
##Total NBA data
Totalhex <- makeHexData(dataOff)
#Function to transform hexbins into polygons
hex_coord_df <- function(x, y, width, height, size = 1) {
# like hex_coord but returns a dataframe of vertices grouped by an id variable
dx <- log(size * width / 6)
dy <- log(size * height / 2 / sqrt(3))
hex_x <- rbind(x - 2 * dx, x - dx, x + dx, x + 2 * dx, x + dx, x - dx)
hex_y <- rbind(y, y + dy, y + dy, y, y - dy, y - dy)
id    <- rep(1:length(x), each=6)
data.frame(cbind(x=as.vector(hex_x), y=as.vector(hex_y), id))
}
#Transform Hexbins into polygons
Totalhex <- filter(Totalhex, ST > quantile(Totalhex$ST, probs = quant))
Total <- hex_coord_df(Totalhex$x, Totalhex$y, (0.05*Totalhex$ST), (0.05*Totalhex$ST), size =1)
Total$PPS <- rep(Totalhex$PPS, each = 6)
#Make Graph
GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(midpoint = median(1.0), low = "blue", high = "red", limits=c(0.3, 2.1)) +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold"))+ scale_size(range = c(0, maxsize)) + ylim(c(-40, 270))+ theme(legend.position="bottom")
if(type == "PPS"){
GRAPH <- GRAPH +  ggtitle(paste("Points per Shot of", team, sep =" "))
}  else {GRAPH <- GRAPH +  ggtitle("Shooting percentage")}
return(GRAPH)
}
OffShotSeasonGraphTeam(shotDataTotal2017, team = "GSW",quant = 0.7)
OffShotSeasonGraphTeam(shotDataTotal2017, team = "Hou",quant = 0.7)
ShotSeasonGraph(shotDatafDef2016["GSW"], quant = 0.75, MAX_Y = 750)
shotDatafDef2016[["GSW"]]
ShotSeasonGraph(shotDatafDef2016[["GSW"]], quant = 0.75, MAX_Y = 750)
ShotSeasonGraph <- function(SeasondataOff, nbins = 30, maxsize = 7, quant = 0.7, type = "PPS", MAX_Y = 270, Size = 0.05) {
SeasondataOff <- dplyr::filter(SeasondataOff, LOC_Y < MAX_Y)
#Get the maximum and minumum values for x and y
xbnds <- range(SeasondataOff$LOC_X)
ybnds <- range(SeasondataOff$LOC_Y)
#Make hexbin dataframes out of the teams
if (type == "PPS"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
if (type == "PCT"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG)), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
##Total NBA data
Totalhex <- makeHexData(SeasondataOff)
#Function to transform hexbins into polygons
hex_coord_df <- function(x, y, width, height, size = 1) {
# like hex_coord but returns a dataframe of vertices grouped by an id variable
dx <- log(size * width / 6)
dy <- log(size * height / 2 / sqrt(3))
hex_x <- rbind(x - 2 * dx, x - dx, x + dx, x + 2 * dx, x + dx, x - dx)
hex_y <- rbind(y, y + dy, y + dy, y, y - dy, y - dy)
id    <- rep(1:length(x), each=6)
data.frame(cbind(x=as.vector(hex_x), y=as.vector(hex_y), id))
}
#Transform Hexbins into polygons
Totalhex <- filter(Totalhex, ST > quantile(Totalhex$ST, probs = quant))
Total <- hex_coord_df(Totalhex$x, Totalhex$y, (Size*Totalhex$ST), (Size*Totalhex$ST), size =1)
Total$PPS <- rep(Totalhex$PPS, each = 6)
#Make Graph
GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(midpoint = median(Total$PPS), low = "blue", high = "red") +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold"))+ scale_size(range = c(0, maxsize)) + ylim(c(-40, 270))+ theme(legend.position="bottom")
if(type == "PPS"){
GRAPH <- GRAPH +  ggtitle("Points per Shot")
}  else {GRAPH <- GRAPH +  ggtitle("Shooting percentage")}
return(GRAPH)
}
ShotSeasonGraph(shotDataTotal2017, quant = 0.4, MAX_Y = 270, Size = 0.05, MAX_Y = 750)
ShotSeasonGraph(shotDataTotal2017, quant = 0.4, Size = 0.05, MAX_Y = 750)
ShotSeasonGraph(shotDataTotal2017, quant = 0.7, Size = 0.05, MAX_Y = 750)
ShotSeasonGraph(shotDatafDef2016[["GSW"]], quant = 0.7, Size = 0.05, MAX_Y = 750)
ShotSeasonGraph(shotDatafDef2016[["GSW"]], quant = 0.5, Size = 0.05, MAX_Y = 750)
ShotSeasonGraph(shotDatafDef2016[["GSW"]], quant = 0.5, Size = 0.1, MAX_Y = 750)
ShotSeasonGraph(shotDatafDef2016[["GSW"]], quant = 0.5, Size = 0.5, MAX_Y = 750)
ShotSeasonGraph(shotDatafDef2016[["GSW"]], quant = 0.5, Size = 0.6, MAX_Y = 750)
ShotSeasonGraph(shotDatafDef2016[["GSW"]], quant = 0.5, Size = 0.8, MAX_Y = 750)
ShotSeasonGraph(shotDatafDef2016[["GSW"]], quant = 0.5, Size = 1, MAX_Y = 750)
ShotSeasonGraph(shotDatafDef2016[["GSW"]], quant = 0.5, Size = 0.9, MAX_Y = 750)
ShotSeasonGraph(shotDatafDef2016[["Sas"]], quant = 0.5, Size = 0.9, MAX_Y = 750)
ShotSeasonGraph(shotDatafDef2016[["Sas"]], quant = 0.5, Size = 0.9, MAX_Y = 750)
ShotSeasonGraph(shotDatafDef2016[["Phi"]], quant = 0.5, Size = 0.9, MAX_Y = 750)
SasDef <- ShotSeasonGraph(shotDatafDef2016[["Sas"]], quant = 0.5, Size = 0.9, MAX_Y = 750) + ggtitle("Spurs Defensive Shot Chart")
SasDef
ShotSeasonGraph(shotDatafDef2016[["Sas"]], quant = 0.5, Size = 0.9, MAX_Y = 750) + ggtitle("Spurs Defensive Shot Chart")
SasDef <- ShotSeasonGraph(shotDatafDef2016[["Sas"]], quant = 0.5, Size = 0.9, MAX_Y = 750) + ggtitle("Spurs Defensive Shot Chart")
SasDef
OffShotSeasonGraphTeam <- function(SeasondataOff, team, nbins = 30, maxsize = 7, quant = 0.7, type = "PPS", Size = 0.05) {
dataOff <- dplyr::filter(SeasondataOff, TEAM_NAME == team)
#Get the maximum and minumum values for x and y
xbnds <- range(dataOff$LOC_X)
ybnds <- range(dataOff$LOC_Y)
#Make hexbin dataframes out of the teams
if (type == "PPS"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
if (type == "PCT"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG)), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
##Total NBA data
Totalhex <- makeHexData(dataOff)
#Function to transform hexbins into polygons
hex_coord_df <- function(x, y, width, height, size = 1) {
# like hex_coord but returns a dataframe of vertices grouped by an id variable
dx <- log(size * width / 6)
dy <- log(size * height / 2 / sqrt(3))
hex_x <- rbind(x - 2 * dx, x - dx, x + dx, x + 2 * dx, x + dx, x - dx)
hex_y <- rbind(y, y + dy, y + dy, y, y - dy, y - dy)
id    <- rep(1:length(x), each=6)
data.frame(cbind(x=as.vector(hex_x), y=as.vector(hex_y), id))
}
#Transform Hexbins into polygons
Totalhex <- filter(Totalhex, ST > quantile(Totalhex$ST, probs = quant))
Total <- hex_coord_df(Totalhex$x, Totalhex$y, (Size*Totalhex$ST), (Size*Totalhex$ST), size =1)
Total$PPS <- rep(Totalhex$PPS, each = 6)
#Make Graph
GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(midpoint = median(1.0), low = "blue", high = "red", limits=c(0.3, 2.1)) +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold"))+ scale_size(range = c(0, maxsize)) + ylim(c(-40, 270))+ theme(legend.position="bottom")
if(type == "PPS"){
GRAPH <- GRAPH +  ggtitle(paste("Points per Shot of", team, sep =" "))
}  else {GRAPH <- GRAPH +  ggtitle("Shooting percentage")}
return(GRAPH)
}
OffShotSeasonGraphTeam(shotDataTotal2016, team = "Sas",quant = 0.5, Size = 0.9)
OffShotSeasonGraphTeam <- function(SeasondataOff, team, nbins = 30, maxsize = 7, quant = 0.7, type = "PPS", Size = 0.05) {
dataOff <- dplyr::filter(SeasondataOff, TEAM_NAME == team)
#Get the maximum and minumum values for x and y
xbnds <- range(dataOff$LOC_X)
ybnds <- range(dataOff$LOC_Y)
#Make hexbin dataframes out of the teams
if (type == "PPS"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
if (type == "PCT"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG)), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
##Total NBA data
Totalhex <- makeHexData(dataOff)
#Function to transform hexbins into polygons
hex_coord_df <- function(x, y, width, height, size = 1) {
# like hex_coord but returns a dataframe of vertices grouped by an id variable
dx <- log(size * width / 6)
dy <- log(size * height / 2 / sqrt(3))
hex_x <- rbind(x - 2 * dx, x - dx, x + dx, x + 2 * dx, x + dx, x - dx)
hex_y <- rbind(y, y + dy, y + dy, y, y - dy, y - dy)
id    <- rep(1:length(x), each=6)
data.frame(cbind(x=as.vector(hex_x), y=as.vector(hex_y), id))
}
#Transform Hexbins into polygons
Totalhex <- filter(Totalhex, ST > quantile(Totalhex$ST, probs = quant))
Total <- hex_coord_df(Totalhex$x, Totalhex$y, (Size*Totalhex$ST), (Size*Totalhex$ST), size =1)
Total$PPS <- rep(Totalhex$PPS, each = 6)
#Make Graph
GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(midpoint = median(1.0), low = "blue", high = "red", limits=c(0.3, 2.1)) +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold"))+ scale_size(range = c(0, maxsize)) + ylim(c(-40, 270))+ theme(legend.position="bottom")
if(type == "PPS"){
GRAPH <- GRAPH +  ggtitle(paste("Points per Shot of", team, sep =" "))
}  else {GRAPH <- GRAPH +  ggtitle("Shooting percentage")}
return(GRAPH)
}
SasOff <- OffShotSeasonGraphTeam(shotDataTotal2016, team = "Sas",quant = 0.5, Size = 0.9) + ggtitle("Spurs Offensive Shot Chart")
saveRDS(SasOff, "SasOff.rds")
saveRDS(SasDef, "SasDef.rds")
source('~/Documents/Sloan/WordPress.R')
PhiDef <- ShotSeasonGraph(shotDatafDef2016[["Phi"]], quant = 0.5, Size = 0.9, MAX_Y = 750) + ggtitle("Spurs Defensive Shot Chart")
PhiDef
PhiDef <- ShotSeasonGraph(shotDatafDef2016[["Phi"]], quant = 0.5, Size = 0.9, MAX_Y = 750) + ggtitle("76ers Defensive Shot Chart")
PhiDef
saveRDS(PhiDef, "PhiDef.rds")
