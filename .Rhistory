Years <- c(2018)
URLs <- list()
for(i in 1:length(Years)){
URLs[[i]] <- paste("http://www.basketball-reference.com/leagues/NBA_", Years[i],"_games-", Months,".html", sep = "")
}
URLs <- do.call("c", URLs)
URLs <- data.frame(URLs = URLs, Year = as.numeric(gsub("\\D", "", URLs)))
URLs$URLs <- as.character(URLs$URLs)
schedule <- list()
# import from JSON
for(i in 1:nrow(URLs)){
schedule[[i]] <- read_html(URLs$URLs[i])%>% html_table(fill=TRUE)%>% .[[1]]
}
schedule <- do.call("rbind", schedule)
schedule$Date <- mdy(as.character(schedule$Date))
schedule[,4] <- as.numeric(as.character(schedule[,4]))
schedule[,6] <- as.numeric(as.character(schedule[,6]))
schedule$Season <- 2018
schedule[,3] <- gsub("Detroit Pistons", "Det", schedule[,3])
schedule[,3] <- gsub("Atlanta Hawks", "Atl", schedule[,3])
schedule[,3] <- gsub("Chicago Bulls", "Chi", schedule[,3])
schedule[,3] <- gsub("Boston Celtics", "Bos", schedule[,3])
schedule[,3] <- gsub("Cleveland Cavaliers", "Cle", schedule[,3])
schedule[,3] <- gsub("New Orleans Pelicans", "NO", schedule[,3])
schedule[,3] <- gsub("Golden State Warriors", "GSW", schedule[,3])
schedule[,3] <- gsub("Orlando Magic", "ORL", schedule[,3])
schedule[,3] <- gsub("Washington Wizards", "Was", schedule[,3])
schedule[,3] <- gsub("Philadelphia 76ers", "Phi", schedule[,3])
schedule[,3] <- gsub("Brooklyn Nets", "Bkn", schedule[,3])
schedule[,3] <- gsub("Utah Jazz", "Uta", schedule[,3])
schedule[,3] <- gsub("Miami Heat", "Mia", schedule[,3])
schedule[,3] <- gsub("Charlotte Hornets", "Cha", schedule[,3])
schedule[,3] <- gsub("Toronto Raptors", "Tor", schedule[,3])
schedule[,3] <- gsub("Indiana Pacers", "Ind", schedule[,3])
schedule[,3] <- gsub("Houston Rockets", "Hou", schedule[,3])
schedule[,3] <- gsub("Denver Nuggets", "Den", schedule[,3])
schedule[,3] <- gsub("Memphis Grizzlies", "Mem", schedule[,3])
schedule[,3] <- gsub("New York Knicks", "NY", schedule[,3])
schedule[,3] <- gsub("Milwaukee Bucks", "Mil", schedule[,3])
schedule[,3] <- gsub("Oklahoma City Thunder", "Okc", schedule[,3])
schedule[,3] <- gsub("San Antonio Spurs", "Sas", schedule[,3])
schedule[,3] <- gsub("Dallas Mavericks", "Dal", schedule[,3])
schedule[,3] <- gsub("Phoenix Suns", "Pho", schedule[,3])
schedule[,3] <- gsub("Portland Trail Blazers", "Por", schedule[,3])
schedule[,3] <- gsub("Los Angeles Clippers", "Lac", schedule[,3])
schedule[,3] <- gsub("Sacramento Kings", "Sac", schedule[,3])
schedule[,3] <- gsub("Los Angeles Lakers", "Lal", schedule[,3])
schedule[,3] <- gsub("Minnesota Timberwolves", "Min", schedule[,3])
schedule[,3] <- gsub("Charlotte Bobcats", "Cha", schedule[,3])
schedule[,3]<- gsub("New Orleans Hornets", "NO", schedule[,3])
schedule[,5] <- gsub("Detroit Pistons", "Det", schedule[,5])
schedule[,5] <- gsub("Atlanta Hawks", "Atl", schedule[,5])
schedule[,5] <- gsub("Chicago Bulls", "Chi", schedule[,5])
schedule[,5] <- gsub("Boston Celtics", "Bos", schedule[,5])
schedule[,5] <- gsub("Cleveland Cavaliers", "Cle", schedule[,5])
schedule[,5] <- gsub("New Orleans Pelicans", "NO", schedule[,5])
schedule[,5] <- gsub("Golden State Warriors", "GSW", schedule[,5])
schedule[,5] <- gsub("Orlando Magic", "ORL", schedule[,5])
schedule[,5] <- gsub("Washington Wizards", "Was", schedule[,5])
schedule[,5] <- gsub("Philadelphia 76ers", "Phi", schedule[,5])
schedule[,5] <- gsub("Brooklyn Nets", "Bkn", schedule[,5])
schedule[,5] <- gsub("Utah Jazz", "Uta", schedule[,5])
schedule[,5] <- gsub("Miami Heat", "Mia", schedule[,5])
schedule[,5] <- gsub("Charlotte Hornets", "Cha", schedule[,5])
schedule[,5] <- gsub("Toronto Raptors", "Tor", schedule[,5])
schedule[,5] <- gsub("Indiana Pacers", "Ind", schedule[,5])
schedule[,5] <- gsub("Houston Rockets", "Hou", schedule[,5])
schedule[,5] <- gsub("Denver Nuggets", "Den", schedule[,5])
schedule[,5] <- gsub("Memphis Grizzlies", "Mem", schedule[,5])
schedule[,5] <- gsub("New York Knicks", "NY", schedule[,5])
schedule[,5] <- gsub("Milwaukee Bucks", "Mil", schedule[,5])
schedule[,5] <- gsub("Oklahoma City Thunder", "Okc", schedule[,5])
schedule[,5] <- gsub("San Antonio Spurs", "Sas", schedule[,5])
schedule[,5] <- gsub("Dallas Mavericks", "Dal", schedule[,5])
schedule[,5] <- gsub("Phoenix Suns", "Pho", schedule[,5])
schedule[,5] <- gsub("Portland Trail Blazers", "Por", schedule[,5])
schedule[,5] <- gsub("Los Angeles Clippers", "Lac", schedule[,5])
schedule[,5] <- gsub("Sacramento Kings", "Sac", schedule[,5])
schedule[,5] <- gsub("Los Angeles Lakers", "Lal", schedule[,5])
schedule[,5] <- gsub("Minnesota Timberwolves", "Min", schedule[,5])
schedule[,5] <- gsub("Charlotte Bobcats", "Cha", schedule[,5])
schedule[,5]<- gsub("New Orleans Hornets", "NO", schedule[,5])
pacman::p_load(SpatialBall, dplyr)
future_games <- schedule[schedule$Date >= Sys.Date(),]
colnames(schedule) <- c("Date", "VTM", "PTS_Visitor", "HTM", "PTS_Home", "X", "X2", "Notes", "Season")
schedule <- dplyr::select(schedule, Date, VTM, PTS_Visitor, HTM, PTS_Home, Season)
future_games <- schedule[schedule$Date >= Sys.Date(),]
View(schedule)
View(future_games)
?message
results <- list()
for(i in 1:nrow(future_games)){
results[[i]] <- Get_Apps(HomeTeam = future_games$HTM[i], VisitorTeam = future_games$VTM[i], Seasondata = Season2018)
message(paste("simulating", i ,"of", nrow(future_games)))
}
View(results)
View(future_games)
Get_Apps(HomeTeam = future_games$HTM[1], VisitorTeam = future_games$VTM[1], Seasondata = Season2018)
warnings
warnings()
View(Season2018)
future_games$HTM[1]
future_games$VTM
View(future_games)
pacman::p_load(XML, lubridate, rvest, dplyr)
#Gather data
Months <- c("october", "november", "december", "january", "february", "march", "april")
Years <- c(2018)
URLs <- list()
for(i in 1:length(Years)){
URLs[[i]] <- paste("http://www.basketball-reference.com/leagues/NBA_", Years[i],"_games-", Months,".html", sep = "")
}
URLs <- do.call("c", URLs)
URLs <- data.frame(URLs = URLs, Year = as.numeric(gsub("\\D", "", URLs)))
URLs$URLs <- as.character(URLs$URLs)
schedule <- list()
# import from JSON
for(i in 1:nrow(URLs)){
schedule[[i]] <- read_html(URLs$URLs[i])%>% html_table(fill=TRUE)%>% .[[1]]
}
schedule <- do.call("rbind", schedule)
schedule$Date <- mdy(as.character(schedule$Date))
schedule[,4] <- as.numeric(as.character(schedule[,4]))
schedule[,6] <- as.numeric(as.character(schedule[,6]))
schedule$Season <- 2018
schedule[,3] <- gsub("Detroit Pistons", "Det", schedule[,3])
schedule[,3] <- gsub("Atlanta Hawks", "Atl", schedule[,3])
schedule[,3] <- gsub("Chicago Bulls", "Chi", schedule[,3])
schedule[,3] <- gsub("Boston Celtics", "Bos", schedule[,3])
schedule[,3] <- gsub("Cleveland Cavaliers", "Cle", schedule[,3])
schedule[,3] <- gsub("New Orleans Pelicans", "NO", schedule[,3])
schedule[,3] <- gsub("Golden State Warriors", "GSW", schedule[,3])
schedule[,3] <- gsub("Orlando Magic", "ORL", schedule[,3])
schedule[,3] <- gsub("Washington Wizards", "Was", schedule[,3])
schedule[,3] <- gsub("Philadelphia 76ers", "Phi", schedule[,3])
schedule[,3] <- gsub("Brooklyn Nets", "Bkn", schedule[,3])
schedule[,3] <- gsub("Utah Jazz", "Uta", schedule[,3])
schedule[,3] <- gsub("Miami Heat", "Mia", schedule[,3])
schedule[,3] <- gsub("Charlotte Hornets", "Cha", schedule[,3])
schedule[,3] <- gsub("Toronto Raptors", "Tor", schedule[,3])
schedule[,3] <- gsub("Indiana Pacers", "Ind", schedule[,3])
schedule[,3] <- gsub("Houston Rockets", "Hou", schedule[,3])
schedule[,3] <- gsub("Denver Nuggets", "Den", schedule[,3])
schedule[,3] <- gsub("Memphis Grizzlies", "Mem", schedule[,3])
schedule[,3] <- gsub("New York Knicks", "NY", schedule[,3])
schedule[,3] <- gsub("Milwaukee Bucks", "Mil", schedule[,3])
schedule[,3] <- gsub("Oklahoma City Thunder", "Okc", schedule[,3])
schedule[,3] <- gsub("San Antonio Spurs", "Sas", schedule[,3])
schedule[,3] <- gsub("Dallas Mavericks", "Dal", schedule[,3])
schedule[,3] <- gsub("Phoenix Suns", "Pho", schedule[,3])
schedule[,3] <- gsub("Portland Trail Blazers", "Por", schedule[,3])
schedule[,3] <- gsub("Los Angeles Clippers", "Lac", schedule[,3])
schedule[,3] <- gsub("Sacramento Kings", "Sac", schedule[,3])
schedule[,3] <- gsub("Los Angeles Lakers", "Lal", schedule[,3])
schedule[,3] <- gsub("Minnesota Timberwolves", "Min", schedule[,3])
schedule[,3] <- gsub("Charlotte Bobcats", "Cha", schedule[,3])
schedule[,3]<- gsub("New Orleans Hornets", "NO", schedule[,3])
schedule[,5] <- gsub("Detroit Pistons", "Det", schedule[,5])
schedule[,5] <- gsub("Atlanta Hawks", "Atl", schedule[,5])
schedule[,5] <- gsub("Chicago Bulls", "Chi", schedule[,5])
schedule[,5] <- gsub("Boston Celtics", "Bos", schedule[,5])
schedule[,5] <- gsub("Cleveland Cavaliers", "Cle", schedule[,5])
schedule[,5] <- gsub("New Orleans Pelicans", "NO", schedule[,5])
schedule[,5] <- gsub("Golden State Warriors", "GSW", schedule[,5])
schedule[,5] <- gsub("Orlando Magic", "ORL", schedule[,5])
schedule[,5] <- gsub("Washington Wizards", "Was", schedule[,5])
schedule[,5] <- gsub("Philadelphia 76ers", "Phi", schedule[,5])
schedule[,5] <- gsub("Brooklyn Nets", "Bkn", schedule[,5])
schedule[,5] <- gsub("Utah Jazz", "Uta", schedule[,5])
schedule[,5] <- gsub("Miami Heat", "Mia", schedule[,5])
schedule[,5] <- gsub("Charlotte Hornets", "Cha", schedule[,5])
schedule[,5] <- gsub("Toronto Raptors", "Tor", schedule[,5])
schedule[,5] <- gsub("Indiana Pacers", "Ind", schedule[,5])
schedule[,5] <- gsub("Houston Rockets", "Hou", schedule[,5])
schedule[,5] <- gsub("Denver Nuggets", "Den", schedule[,5])
schedule[,5] <- gsub("Memphis Grizzlies", "Mem", schedule[,5])
schedule[,5] <- gsub("New York Knicks", "NY", schedule[,5])
schedule[,5] <- gsub("Milwaukee Bucks", "Mil", schedule[,5])
schedule[,5] <- gsub("Oklahoma City Thunder", "Okc", schedule[,5])
schedule[,5] <- gsub("San Antonio Spurs", "Sas", schedule[,5])
schedule[,5] <- gsub("Dallas Mavericks", "Dal", schedule[,5])
schedule[,5] <- gsub("Phoenix Suns", "Pho", schedule[,5])
schedule[,5] <- gsub("Portland Trail Blazers", "Por", schedule[,5])
schedule[,5] <- gsub("Los Angeles Clippers", "Lac", schedule[,5])
schedule[,5] <- gsub("Sacramento Kings", "Sac", schedule[,5])
schedule[,5] <- gsub("Los Angeles Lakers", "Lal", schedule[,5])
schedule[,5] <- gsub("Minnesota Timberwolves", "Min", schedule[,5])
schedule[,5] <- gsub("Charlotte Bobcats", "Cha", schedule[,5])
schedule[,5]<- gsub("New Orleans Hornets", "NO", schedule[,5])
colnames(schedule)
make.names(colnames(schedule))
pacman::p_load(SpatialBall, dplyr)
colnames(schedule) <- c("Date", "Start..ET.","VTM", "PTS_Visitor", "HTM", "PTS_Home", "X", "X2", "Notes", "Season")
schedule <- dplyr::select(schedule, Date, VTM, PTS_Visitor, HTM, PTS_Home, Season)
future_games <- schedule[schedule$Date >= Sys.Date(),]
Get_Apps(HomeTeam = future_games$HTM[1], VisitorTeam = future_games$VTM[1], Seasondata = Season2018)
if (!require('RWordPress')) {
devtools::install_github(c("duncantl/XMLRPC", "duncantl/RWordPress"))
}
library(RWordPress)
library(RWordPress)
options(WordpressLogin = c(spatialball = '135792468++'),
WordpressURL = 'https://spatialball.wordpress.com/xmlrpc.php')
library(knitr)
knit2wp('Projection.Rmd', title = 'Projections',  action = c("editPost"), postid = 77)
?knit2wp
SpatialBall::SpatialRating(Seasondata = Season2018)
source('~/Documents/Sloan/WordPress.R')
library("rgbif")
res <- occ_search(scientificName = "Puma concolor", limit = 100)
hpts <- chull(na.omit(res$data[,c('decimalLongitude','decimalLatitude')]))
hpts <- c(hpts, hpts[1])
plot(na.omit(res$data[,c('decimalLongitude','decimalLatitude')]), cex = 0.5)
lines(na.omit(res$data[,c('decimalLongitude','decimalLatitude')])[hpts, ])
hpts
class(hpts)
class(res)
res
res$data
?occ_search
res <- occ_search(scientificName = "Puma concolor", limit = 100, hasCoordinate = TRUE, hasGeospatialIssue = FALSE)
res
res$meta
res$hierarchy
res$data
res$data$decimalLatitude
?geosphere::areaPolygon()
?geosphere::areaPolygon
hpts <- chull(res$data[,c('decimalLongitude','decimalLatitude')])
hpts
?chull
hpts[1]
pts <- c(hpts, hpts[1])
plot(na.omit(res$data[,c('decimalLongitude','decimalLatitude')]), cex = 0.5)
lines(na.omit(res$data[,c('decimalLongitude','decimalLatitude')])[hpts, ])
library("rgbif")
res <- occ_search(scientificName = "Puma concolor", limit = 100, hasCoordinate = TRUE, hasGeospatialIssue = FALSE)
hpts <- chull(res$data[,c('decimalLongitude','decimalLatitude')])
hpts <- c(hpts, hpts[1])
plot(na.omit(res$data[,c('decimalLongitude','decimalLatitude')]), cex = 0.5)
lines(na.omit(res$data[,c('decimalLongitude','decimalLatitude')])[hpts, ])
hpts
plot(res$data[,c('decimalLongitude','decimalLatitude')], cex = 0.5)
res$data[,c('decimalLongitude','decimalLatitude')][hpts, ]
geosphere::areaPolygon(res$data[,c('decimalLongitude','decimalLatitude')][hpts, ])
?geosphere::areaPolygon
library(hexbin)
library(lattice)
x <- rnorm(1e6)
y <- rnorm(1e6)
hexbinplot(x ~ y, aspect = 1, bins=50,
#xlab = expression(alpha), ylab = expression(beta),
style = "nested.centroids",
panel = function(...) {
panel.hexbinplot(...)
})
#########
#Function to plot
library(plotrix)
hexmap <- function(xcor,ycor,colval, label, title){
plot(min(c(xcor,ycor)):(max(c(xcor,ycor))+1),min(c(xcor,ycor)):(max(c(xcor,ycor))+1), type="n", frame.plot=F, xaxt="n", yaxt="n", xlab="", ylab="", main = title)
data <- data.frame(xcor,ycor)
apply(data, 1, function(zone) hexagon(zone[1],zone[2],col=colval, unitcell=0.95,border="white"))
text(xcor+ 0.5,ycor + 0.5,labels=label, cex=0.9)
}
library(hexbin)
library(lattice)
#Attacking away team +  - -
dataAtackA <- data.frame(where = c( "30/100", "70/150", "0/1"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(3))
hexmap(dataAtackA$x,dataAtackA$y,"firebrick1", dataAtackA$where, NULL)
#Defending home team + - +
dataAtackB <- data.frame(where = c( "25/90", "75/130", "30/78"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(1))
hexmap(dataAtackB$x,dataAtackB$y,"dodgerblue1", dataAtackB$where, NULL)
#########
#Function to plot
library(plotrix)
hexmap <- function(xcor,ycor,colval, label, title){
plot(min(c(xcor,ycor)):(max(c(xcor,ycor))+1),min(c(xcor,ycor)):(max(c(xcor,ycor))+1), type="n", frame.plot=F, xaxt="n", yaxt="n", xlab="", ylab="", main = title)
data <- data.frame(xcor,ycor)
apply(data, 1, function(zone) hexagon(zone[1],zone[2],col=colval, unitcell=0.95,border="white"))
text(xcor+ 0.5,ycor + 0.5,labels=label, cex=0.9)
}
#Attacking away team +  - -
dataAtackA <- data.frame(where = c( "30/100", "70/150", "0/1"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(3))
hexmap(dataAtackA$x,dataAtackA$y,"firebrick1", dataAtackA$where, NULL)
library(hexbin)
library(lattice)
x <- rnorm(1e6)
y <- rnorm(1e6)
hexbinplot(x ~ y, aspect = 1, bins=50,
#xlab = expression(alpha), ylab = expression(beta),
style = "nested.centroids",
panel = function(...) {
panel.hexbinplot(...)
})
#########
#Function to plot
library(plotrix)
hexmap <- function(xcor,ycor,colval, label, title){
plot(min(c(xcor,ycor)):(max(c(xcor,ycor))+1),min(c(xcor,ycor)):(max(c(xcor,ycor))+1), type="n", frame.plot=F, xaxt="n", yaxt="n", xlab="", ylab="", main = title)
data <- data.frame(xcor,ycor)
apply(data, 1, function(zone) hexagon(zone[1],zone[2],col=colval, unitcell=0.95,border="white"))
text(xcor+ 0.5,ycor + 0.5,labels=label, cex=0.9)
}
#Attacking away team +  - -
dataAtackA <- data.frame(where = c( "30/100", "70/150", "0/1"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(3))
hexmap(dataAtackA$x,dataAtackA$y,"firebrick1", dataAtackA$where, NULL)
#########
#Function to plot
library(plotrix)
install.packages("plotrix")
library(hexbin)
library(lattice)
x <- rnorm(1e6)
y <- rnorm(1e6)
hexbinplot(x ~ y, aspect = 1, bins=50,
#xlab = expression(alpha), ylab = expression(beta),
style = "nested.centroids",
panel = function(...) {
panel.hexbinplot(...)
})
#########
#Function to plot
library(plotrix)
hexmap <- function(xcor,ycor,colval, label, title){
plot(min(c(xcor,ycor)):(max(c(xcor,ycor))+1),min(c(xcor,ycor)):(max(c(xcor,ycor))+1), type="n", frame.plot=F, xaxt="n", yaxt="n", xlab="", ylab="", main = title)
data <- data.frame(xcor,ycor)
apply(data, 1, function(zone) hexagon(zone[1],zone[2],col=colval, unitcell=0.95,border="white"))
text(xcor+ 0.5,ycor + 0.5,labels=label, cex=0.9)
}
#Attacking away team +  - -
dataAtackA <- data.frame(where = c( "30/100", "70/150", "0/1"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(3))
hexmap(dataAtackA$x,dataAtackA$y,"firebrick1", dataAtackA$where, NULL)
#Defending home team + - +
dataAtackB <- data.frame(where = c( "25/90", "75/130", "30/78"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(1))
hexmap(dataAtackB$x,dataAtackB$y,"dodgerblue1", dataAtackB$where, NULL)
#Average NBA
dataAtackC <- data.frame(where = c( "250/1000", "800/1600", "450/1000"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(1))
hexmap(dataAtackC$x,dataAtackC$y,3, dataAtackC$where, NULL)
#Attacking away team +  - -
dataAtackA <- data.frame(where = c( "30x3/100 = 0.9", "70x2/150=0.93", "0x2/1=0"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(3))
hexmap(dataAtackA$x,dataAtackA$y,"firebrick1", dataAtackA$where, NULL)
#Defending home team + - +
dataAtackB <- data.frame(where = c( "25x3/90 = 0.83", "75x2/130=1.15", "30x2/78=0.77"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(1))
hexmap(dataAtackB$x,dataAtackB$y,"dodgerblue1", dataAtackB$where, NULL)
#Average NBA
dataAtackC <- data.frame(where = c( "250x3/1000 = 0.75", "800x2/1600=1", "450x2/1000=0.9"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(1))
hexmap(dataAtackC$x,dataAtackC$y,3, dataAtackC$where, NULL)
#Attacking away team +  - -
dataAtackA <- data.frame(where = c( "0.9-0.75=0.15", "0.93-1=-0.07", "0-0.9=-0.9"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(3))
hexmap(dataAtackA$x,dataAtackA$y,"firebrick1", dataAtackA$where, NULL)
#Defending home team + - +
dataAtackB <- data.frame(where = c( "0.83-0.75 \n =0.08", "1.15-0.15=1", "0.77-0.9=-0.13"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(1))
hexmap(dataAtackB$x,dataAtackB$y,"dodgerblue1", dataAtackB$where, NULL)
dataAtackA <- data.frame(where = c( "0.15+0.08=0.23", "-0.07+1=0.93", "-0.9+-0.13=-1.03"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(3))
hexmap(dataAtackA$x,dataAtackA$y,"firebrick1", dataAtackA$where, NULL)
hexmap2 <- function(xcor,ycor,colval, label, title){
plot(min(c(xcor,ycor)):(max(c(xcor,ycor))+1),min(c(xcor,ycor)):(max(c(xcor,ycor))+1), type="n", frame.plot=F, xaxt="n", yaxt="n", xlab="", ylab="", main = title)
data <- data.frame(xcor,ycor)
apply(data, 1, function(zone) hexagon(zone[1],zone[2],col=colval, unitcell=0.95,border="white"))
text(xcor+ 0.5,ycor + 0.5,labels=label, cex=0.7)
text(3.7, 4.5, "3point")
}
library(hexbin)
library(lattice)
#########
#Function to plot
library(plotrix)
hexmap <- function(xcor,ycor,colval, label, title){
plot(min(c(xcor,ycor)):(max(c(xcor,ycor))+1),min(c(xcor,ycor)):(max(c(xcor,ycor))+1), type="n", frame.plot=F, xaxt="n", yaxt="n", xlab="", ylab="", main = title)
data <- data.frame(xcor,ycor)
apply(data, 1, function(zone) hexagon(zone[1],zone[2],col=colval, unitcell=0.95,border="white"))
text(xcor+ 0.5,ycor + 0.5,labels=label, cex=0.9)
}
#Attacking away team +  - -
dataAtackA <- data.frame(where = c( "30/100", "70/150", "0/1"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(3))
hexmap(dataAtackA$x,dataAtackA$y,"firebrick1", dataAtackA$where, NULL)
#Defending home team + - +
dataAtackB <- data.frame(where = c( "25/90", "75/130", "30/78"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(1))
hexmap(dataAtackB$x,dataAtackB$y,"dodgerblue1", dataAtackB$where, NULL)
#Average NBA
dataAtackC <- data.frame(where = c( "250/1000", "800/1600", "450/1000"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(1))
hexmap(dataAtackC$x,dataAtackC$y,3, dataAtackC$where, NULL)
#Attacking away team +  - -
dataAtackA <- data.frame(where = c( "30x3/100 = 0.9", "70x2/150=0.93", "0x2/1=0"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(3))
hexmap(dataAtackA$x,dataAtackA$y,"firebrick1", dataAtackA$where, NULL)
#Defending home team + - +
dataAtackB <- data.frame(where = c( "25x3/90 = 0.83", "75x2/130=1.15", "30x2/78=0.77"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(1))
hexmap(dataAtackB$x,dataAtackB$y,"dodgerblue1", dataAtackB$where, NULL)
#Average NBA
dataAtackC <- data.frame(where = c( "250x3/1000 = 0.75", "800x2/1600=1", "450x2/1000=0.9"), x = c(2.5, 2.0, 3.0), y = c(4,3,3), colour = c(1))
hexmap(dataAtackC$x,dataAtackC$y,3, dataAtackC$where, NULL)
past_games_c <- readRDS("past_games.rds")
past_games_c <- readRDS("past_games.rds")
shotDataTotal2017<- readRDS("shotDataTotal2017.rds")
#####2016
shotDataTotal2016<- readRDS("shotDataTotal2016.rds")
#####2015
shotDataTotal2015<- readRDS("shotDataTotal2015.rds")
####2014
shotDataTotal2014<- readRDS("shotDataTotal2014.rds")
#####2013
shotDataTotal2013<- readRDS("shotDataTotal2013.rds")
pacman::p_load(SpatialBall)
APPS <- list()
for(i in 1:NROW(past_games_c)) {
if (past_games_c$Season[i] == 2017) {
APPS[[i]] <- Get_Apps_Exp(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2017, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2016){
APPS[[i]] <- Get_Apps_Exp(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2016, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2015){
APPS[[i]] <- Get_Apps_Exp(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2015, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2014){
APPS[[i]] <- Get_Apps_Exp(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2014, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2013){
APPS[[i]] <- Get_Apps_Exp(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2013, GAME_DATE < past_games_c$Date[i]))
}else{
APPS[[i]] <- NA
}
print(paste(i, "of", NROW(past_games_c)))
}
ExpAPPS <- do.call("rbind", APPS)
saveRDS(ExpAPPS, "ExpAPPS.rds")
past_games_c[,7:8] <- ExpAPPS[,1:2]
saveRDS(past_games_c, "past_games_c.rds")
past_games_c <- readRDS("past_games_c.rds")
library(lubridate)
dates2017_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("25-10-2016")]
DF2017_c <- data.frame(Season = rep(2017, times =length(dates2017_c)), day = rep(NA, times =length(dates2017_c)), Date = dates2017_c)
for(i in 1:length(dates2017_c)) {
DF2017_c$day[i] <- i
print(i)
}
library(lubridate)
dates2016_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("27-10-2015") & unique(past_games_c$Date) <= dmy("13-04-2016")]
DF2016_c <- data.frame(Season = rep(2016, times =length(dates2016_c)), day = rep(NA, times =length(dates2016_c)), Date = dates2016_c)
for(i in 1:length(dates2016_c)) {
DF2016_c$day[i] <- i
print(i)
}
dates2015_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("28-10-2014") & unique(past_games_c$Date) <= dmy("15-04-2015")]
DF2015_c <- data.frame(Season = rep(2015, times =length(dates2015_c)), day = rep(NA, times =length(dates2015_c)), Date = dates2015_c)
for(i in 1:length(dates2015_c)) {
DF2015_c$day[i] <- i
print(i)
}
dates2014_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("29-10-2013") & unique(past_games_c$Date) <= dmy("16-04-2014")]
DF2014_c <- data.frame(Season = rep(2014, times =length(dates2014_c)), day = rep(NA, times =length(dates2014_c)), Date = dates2014_c)
for(i in 1:length(dates2014_c)) {
DF2014_c$day[i] <- i
print(i)
}
dates2013_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("20-10-2012") & unique(past_games_c$Date) <= dmy("17-04-2013")]
DF2013_c <- data.frame(Season = rep(2013, times =length(dates2013_c)), day = rep(NA, times =length(dates2013_c)), Date = dates2013_c)
for(i in 1:length(dates2013_c)) {
DF2013_c$day[i] <- i
print(i)
}
DFDates_c <- rbind(DF2013_c, DF2014_c ,DF2015_c, DF2016_c, DF2017_c)
past_games_c <- merge(past_games_c, DFDates_c, all = TRUE)
library(ggplot2)
library(gridExtra)
a <- ggplot(past_games_c, aes(x = day, y = offAPPS)) + geom_line(aes(color = Visitor, lty= as.factor(Season))) + theme(legend.position = "bottom") + guides(color=guide_legend(nrow=2, byrow=TRUE)) + scale_linetype(guide = 'none')
b <- ggplot(past_games_c, aes(x = day, y = defAPPS)) + geom_line(aes(color = Visitor, lty= as.factor(Season)))
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
e <- g_legend(a)
c <- a + theme(legend.position = "none")
d <- b + theme(legend.position = "none")
grid.arrange(c, d, e, heights=c(0.45, 0.45, 0.10))
a <- ggplot(past_games_c, aes(x = day, y = offAPPS)) + geom_line(aes(color = Visitor, lty= as.factor(Season))) + theme(legend.position = "bottom") + guides(color=guide_legend(nrow=2, byrow=TRUE)) + scale_linetype(guide = 'none')
a
a <- ggplot(past_games_c, aes(x = day, y = offAPPS)) + geom_line(aes(color = Visitor, lty= as.factor(Season))) + theme(legend.position = "bottom") + guides(color=guide_legend(nrow=2, byrow=TRUE))
a
a <- ggplot(past_games_c, aes(x = day, y = offAPPS)) + geom_line(aes(color = Visitor, lty= as.factor(Season))) + theme(legend.position = "bottom") + guides(color=guide_legend(nrow=2, byrow=TRUE)) + scale_linetype(guide = 'none')
b <- ggplot(past_games_c, aes(x = day, y = defAPPS)) + geom_line(aes(color = Visitor, lty= as.factor(Season)))
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
e <- g_legend(a)
c <- a + theme(legend.position = "none")
d <- b + theme(legend.position = "none")
grid.arrange(c, d, e, heights=c(0.45, 0.45, 0.10))
a <- ggplot(past_games_c, aes(x = day, y = offAPPS)) + geom_line(aes(color = Visitor, lty= as.factor(Season))) + theme(legend.position = "bottom") + guides(color=guide_legend(nrow=2, byrow=TRUE)) + scale_linetype(guide = 'none') + ylab("Visitor ExpPPS")
b <- ggplot(past_games_c, aes(x = day, y = defAPPS)) + geom_line(aes(color = Visitor, lty= as.factor(Season)))
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
e <- g_legend(a)
c <- a + theme(legend.position = "none")
d <- b + theme(legend.position = "none")
grid.arrange(c, d, e, heights=c(0.45, 0.45, 0.10))
library(ggplot2)
library(gridExtra)
a <- ggplot(past_games_c, aes(x = day, y = offAPPS)) + geom_line(aes(color = Visitor, lty= as.factor(Season))) + theme(legend.position = "bottom") + guides(color=guide_legend(nrow=2, byrow=TRUE)) + scale_linetype(guide = 'none') + ylab("Visitor ExpPPS") + geom_vline(xintercept = 25, lty=2, color ="red")
b <- ggplot(past_games_c, aes(x = day, y = defAPPS)) + geom_line(aes(color = Visitor, lty= as.factor(Season))) + ylab("Home ExpPPS") + geom_vline(xintercept = 25, lty=2, color ="red")
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
e <- g_legend(a)
c <- a + theme(legend.position = "none")
d <- b + theme(legend.position = "none")
grid.arrange(c, d, e, heights=c(0.45, 0.45, 0.10))
