Model1$dataClasses
Model1$data
Model1$call
summary(Model1)
summary(Model1)$Parameters
names(summary(Model1))
summary(Model1)$coefficients
str(summary(Model1)$coefficients)
str(summary(Model1)$coefficients)[3]
summary(Model1)$coefficients[3]
ceiling(summary(Model1)$coefficients[3])
ceiling(summary(Model1)$coefficients[3])
pacman::p_load(XML, lubridate)
pacman::p_load(rjson, grid, gridExtra, png, RCurl, ggplot2, jpeg, hexbin, sp, knitr, raster, rasterVis, dplyr)
dates2013
dates2017 <- unique(past_games$Date)[unique(past_games$Date) >= dmy("25-10-2016")]
DF2017 <- data.frame(Season = rep(2017, times =length(dates2017)), day = rep(NA, times =length(dates2017)), defAPPS = rep(NA, times = length(dates2017)), dates = dates2017)
for(i in 10:length(dates2017)) {
shotDatafDef2017Temp <- shotDatafDef2017
DF2017$day[i] <- i
print(i)
shotDatafDef2017Temp[["Cle"]] <- dplyr::filter(shotDatafDef2017Temp[["Cle"]], GAME_DATE < dates2017[i])
DF2017[i,3] <- ComparisonPPS(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < dates2017[i]), SeasonDataDef = shotDatafDef2017Temp)
}
View(DF2017)
DF2017 <- DF2017[complete.cases(DF2017),]
Model2017<-nls(defAPPS ~ SSasympOff(day, A, lrc, c0), data = DF2017)
DF2017$pred <- predict(Model2017)
Model2017
head(DF2017)
str(DF2017)
dates2016 <- unique(past_games$Date)[unique(past_games$Date) >= dmy("27-10-2015") & unique(past_games$Date) <= dmy("13-04-2016")]
DF2016 <- data.frame(Season = rep(2016, times =length(dates2016)), day = rep(NA, times =length(dates2016)), defAPPS = rep(NA, times = length(dates2016)), dates = dates2016)
for(i in 10:length(dates2016)) {
shotDatafDef2016Temp <- shotDatafDef2016
DF2016$day[i] <- i
print(i)
shotDatafDef2016Temp[["Cle"]] <- dplyr::filter(shotDatafDef2016Temp[["Cle"]], GAME_DATE < dates2016[i])
DF2016[i,3] <- ComparisonPPS(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2016, GAME_DATE < dates2016[i]), SeasonDataDef = shotDatafDef2016Temp)
}
DF2016 <- DF2017[complete.cases(DF2016),]
Model2016<-nls(defAPPS ~ SSasympOff(day, A, lrc, c0), data = DF2016)
DF2016$pred <- predict(Model2016)
DF2013
Test2013 <- DF2013
Test2013 <- Test2013[complete.cases(Test2013),]
Model1<-nls(defAPPS ~ SSasympOff(day, A, lrc, c0), data = Test2013)
str(DF2016)
Model2016<-nls(defAPPS ~ SSasympOff(day, A, lrc, c0), data = DF2016)
Model2013<-nls(defAPPS ~ SSasympOff(day, A, lrc, c0), data = DF2013)
Model2014<-nls(defAPPS ~ SSasympOff(day, A, lrc, c0), data = DF2014)
str(Model2013)
str(DDF2013)
str(DF2013)
str(DF2014)
Model2013<-nls(defAPPS ~ SSasympOff(day, A, lrc, c0), data = DF2013)
Model2014<-nls(defAPPS ~ SSasympOff(day, A, lrc, c0), data = DF2014)
str(DFDates)
Model1<-nls(defAPPS ~ SSasympOff(day, A, lrc, c0), data = DFDates)
Model1
summary(Model1)
summary(Model13)
summary(Model2013)
Model2014<-nls(defAPPS ~ SSasympOff(day, A, lrc, c0), data = DF2014)
DF2016 <- DF2016[complete.cases(DF2016),]
Model2016<-nls(defAPPS ~ SSasympOff(day, A, lrc, c0), data = DF2016)
DF2016$pred <- predict(Model2016)
DF2016 <- DF2016[complete.cases(DF2016),]
head(DF2016)
DF2015 <- DF2015[complete.cases(DF2015),]
Model2015<-nls(defAPPS ~ SSasympOff(day, A, lrc, c0), data = DF2015)
DF2015$pred <- predict(Model2015)
dates2013 <- unique(past_games$Date)[unique(past_games$Date) >= dmy("20-10-2012") & unique(past_games$Date) <= dmy("17-04-2013")]
DF2013 <- data.frame(Season = rep(2013, times =length(dates2013)), day = rep(NA, times =length(dates2013)), defAPPS = rep(NA, times = length(dates2013)))
for(i in 10:length(dates2013)) {
shotDatafDef2013Temp <- shotDatafDef2013
DF2013$day[i] <- i
print(i)
shotDatafDef2013Temp[["Cle"]] <- dplyr::filter(shotDatafDef2013Temp[["Cle"]], GAME_DATE < dates2013[i])
DF2013[i,3] <- ComparisonPPS(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2013, GAME_DATE < dates2013[i]), SeasonDataDef = shotDatafDef2013Temp)
}
DF2013 <- DF2016[complete.cases(DF2013),]
Model2013<-nls(defAPPS ~ SSasympOff(day, A, lrc, c0), data = DF2013)
DF2013$pred <- predict(Model2013)
dates2013 <- unique(past_games$Date)[unique(past_games$Date) >= dmy("20-10-2012") & unique(past_games$Date) <= dmy("17-04-2013")]
DF2013 <- data.frame(Season = rep(2013, times =length(dates2013)), day = rep(NA, times =length(dates2013)), defAPPS = rep(NA, times = length(dates2013)))
for(i in 10:length(dates2013)) {
shotDatafDef2013Temp <- shotDatafDef2013
DF2013$day[i] <- i
print(i)
shotDatafDef2013Temp[["Cle"]] <- dplyr::filter(shotDatafDef2013Temp[["Cle"]], GAME_DATE < dates2013[i])
DF2013[i,3] <- ComparisonPPS(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2013, GAME_DATE < dates2013[i]), SeasonDataDef = shotDatafDef2013Temp)
}
DF2013 <- DF2013[complete.cases(DF2013),]
Model2013<-nls(defAPPS ~ SSasympOff(day, A, lrc, c0), data = DF2013)
DF2013$pred <- predict(Model2013)
head(DF2013)
dates2013 <- unique(past_games$Date)[unique(past_games$Date) >= dmy("20-10-2012") & unique(past_games$Date) <= dmy("17-04-2013")]
DF2013 <- data.frame(Season = rep(2013, times =length(dates2013)), day = rep(NA, times =length(dates2013)), defAPPS = rep(NA, times = length(dates2013)), dates = dates2013)
for(i in 10:length(dates2013)) {
shotDatafDef2013Temp <- shotDatafDef2013
DF2013$day[i] <- i
print(i)
shotDatafDef2013Temp[["Cle"]] <- dplyr::filter(shotDatafDef2013Temp[["Cle"]], GAME_DATE < dates2013[i])
DF2013[i,3] <- ComparisonPPS(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2013, GAME_DATE < dates2013[i]), SeasonDataDef = shotDatafDef2013Temp)
}
DF2013 <- DF2013[complete.cases(DF2013),]
Model2013<-nls(defAPPS ~ SSasympOff(day, A, lrc, c0), data = DF2013)
DF2013$pred <- predict(Model2013)
Head(DF2013)
head(DF2013)
ggplot(DF2013, aes(x = day, y = defAPPS))+ geom_point() + geom_line(aes(y = pred))
ceiling(summary(Model2013)$coefficients[3])
DF2013[,DF2013$day ==ceiling(summary(Model2013)$coefficients[3])]
DF2013[DF2013$day ==ceiling(summary(Model2013)$coefficients[3]),]
ggplot(DF2013, aes(x = day, y = defAPPS))+ geom_point() + geom_line(aes(y = pred))
ggplot(DF2013, aes(x = day, y = defAPPS))+ geom_point() + geom_line(aes(y = pred)) + geom_vline(xintercept = ceiling(summary(Model2013)$coefficients[3]))
Model2013
dates2014 <- unique(past_games$Date)[unique(past_games$Date) >= dmy("29-10-2013") & unique(past_games$Date) <= dmy("16-04-2014")]
DF2014 <- data.frame(Season = rep(2014, times =length(dates2014)), day = rep(NA, times =length(dates2014)), defAPPS = rep(NA, times = length(dates2014)), dates = dates2014)
for(i in 10:length(dates2014)) {
shotDatafDef2014Temp <- shotDatafDef2014
DF2014$day[i] <- i
print(i)
shotDatafDef2014Temp[["Cle"]] <- dplyr::filter(shotDatafDef2014Temp[["Cle"]], GAME_DATE < dates2014[i])
DF2014[i,3] <- ComparisonPPS(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2014, GAME_DATE < dates2014[i]), SeasonDataDef = shotDatafDef2014Temp)
}
DF2014 <- DF2014[complete.cases(DF2014),]
Model2014<-nls(defAPPS ~ SSasympOff(day, A, lrc, c0), data = DF2014)
DF2014$pred <- predict(Model2014)
ceiling(summary(Model2014)$coefficients[3])
DF2014[DF2014$day ==ceiling(summary(Model2014)$coefficients[3]),]
ggplot(DF2014, aes(x = day, y = defAPPS))+ geom_point() + geom_line(aes(y = pred)) + geom_vline(xintercept = ceiling(summary(Model2014)$coefficients[3]))
dates2017 <- unique(past_games$Date)[unique(past_games$Date) >= dmy("25-10-2016")]
DF2017 <- data.frame(Season = rep(2017, times =length(dates2017)), day = rep(NA, times =length(dates2017)), defAPPS = rep(NA, times = length(dates2017)), dates = dates2017)
for(i in 10:length(dates2017)) {
shotDatafDef2017Temp <- shotDatafDef2017
DF2017$day[i] <- i
print(i)
shotDatafDef2017Temp[["Cle"]] <- dplyr::filter(shotDatafDef2017Temp[["Cle"]], GAME_DATE < dates2017[i])
DF2017[i,3] <- ComparisonPPS(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < dates2017[i]), SeasonDataDef = shotDatafDef2017Temp)
}
DF2017 <- DF2017[complete.cases(DF2017),]
#Params <- data.frame(season = 2017, As)
#ceiling(summary(Model1)$coefficients[3])
dates2016 <- unique(past_games$Date)[unique(past_games$Date) >= dmy("27-10-2015") & unique(past_games$Date) <= dmy("13-04-2016")]
DF2016 <- data.frame(Season = rep(2016, times =length(dates2016)), day = rep(NA, times =length(dates2016)), defAPPS = rep(NA, times = length(dates2016)), dates = dates2016)
for(i in 10:length(dates2016)) {
shotDatafDef2016Temp <- shotDatafDef2016
DF2016$day[i] <- i
print(i)
shotDatafDef2016Temp[["Cle"]] <- dplyr::filter(shotDatafDef2016Temp[["Cle"]], GAME_DATE < dates2016[i])
DF2016[i,3] <- ComparisonPPS(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2016, GAME_DATE < dates2016[i]), SeasonDataDef = shotDatafDef2016Temp)
}
DF2016 <- DF2016[complete.cases(DF2016),]
dates2015 <- unique(past_games$Date)[unique(past_games$Date) >= dmy("28-10-2014") & unique(past_games$Date) <= dmy("15-04-2015")]
DF2015 <- data.frame(Season = rep(2015, times =length(dates2015)), day = rep(NA, times =length(dates2015)), defAPPS = rep(NA, times = length(dates2015)), dates = dates2015)
for(i in 10:length(dates2015)) {
shotDatafDef2015Temp <- shotDatafDef2015
DF2015$day[i] <- i
print(i)
shotDatafDef2015Temp[["Cle"]] <- dplyr::filter(shotDatafDef2015Temp[["Cle"]], GAME_DATE < dates2015[i])
DF2015[i,3] <- ComparisonPPS(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2015, GAME_DATE < dates2015[i]), SeasonDataDef = shotDatafDef2015Temp)
}
DF2015 <- DF2015[complete.cases(DF2015),]
dates2014 <- unique(past_games$Date)[unique(past_games$Date) >= dmy("29-10-2013") & unique(past_games$Date) <= dmy("16-04-2014")]
DF2014 <- data.frame(Season = rep(2014, times =length(dates2014)), day = rep(NA, times =length(dates2014)), defAPPS = rep(NA, times = length(dates2014)), dates = dates2014)
for(i in 10:length(dates2014)) {
shotDatafDef2014Temp <- shotDatafDef2014
DF2014$day[i] <- i
print(i)
shotDatafDef2014Temp[["Cle"]] <- dplyr::filter(shotDatafDef2014Temp[["Cle"]], GAME_DATE < dates2014[i])
DF2014[i,3] <- ComparisonPPS(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2014, GAME_DATE < dates2014[i]), SeasonDataDef = shotDatafDef2014Temp)
}
DF2014 <- DF2014[complete.cases(DF2014),]
dates2013 <- unique(past_games$Date)[unique(past_games$Date) >= dmy("20-10-2012") & unique(past_games$Date) <= dmy("17-04-2013")]
DF2013 <- data.frame(Season = rep(2013, times =length(dates2013)), day = rep(NA, times =length(dates2013)), defAPPS = rep(NA, times = length(dates2013)), dates = dates2013)
for(i in 10:length(dates2013)) {
shotDatafDef2013Temp <- shotDatafDef2013
DF2013$day[i] <- i
print(i)
shotDatafDef2013Temp[["Cle"]] <- dplyr::filter(shotDatafDef2013Temp[["Cle"]], GAME_DATE < dates2013[i])
DF2013[i,3] <- ComparisonPPS(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2013, GAME_DATE < dates2013[i]), SeasonDataDef = shotDatafDef2013Temp)
}
DF2013 <- DF2013[complete.cases(DF2013),]
Model2013<-nls(defAPPS ~ SSasympOff(day, A, lrc, c0), data = DF2013)
DF2013$pred <- predict(Model2013)
ceiling(summary(Model2013)$coefficients[3])
DF2013[DF2013$day ==ceiling(summary(Model2013)$coefficients[3]),]
ggplot(DF2013, aes(x = day, y = defAPPS))+ geom_point() + geom_line(aes(y = pred)) + geom_vline(xintercept = ceiling(summary(Model2013)$coefficients[3]))
DFDates <- rbind(DF2013, DF2014 ,DF2015, DF2016, DF2017)
Model1 <-nls(defAPPS ~ SSasympOff(day, A, lrc, c0), data = DFDates)
DFDates$pred <- predict(Model1)
ceiling(summary(Model1)$coefficients[3])
DFDates[DFDates$day ==ceiling(summary(Model1)$coefficients[3]),]
DFDates$Season <- as.factor(DFDates$Season)
ggplot(DFDates, aes(x = day, y = defAPPS))+ geom_point(aes(color = Season)) + geom_line(aes(y = preds))
saveRDS(DFDates, "DFDates.rds")
colnames(DF2013)
colnames(DF2014)
colnames(DF2015)
colnames(DF2016)
colnames(DF2017)
DF2013 <- data.frame(Season = rep(2013, times =length(dates2013)), day = rep(NA, times =length(dates2013)), defAPPS = rep(NA, times = length(dates2013)), dates = dates2013)
for(i in 10:length(dates2013)) {
shotDatafDef2013Temp <- shotDatafDef2013
DF2013$day[i] <- i
print(i)
shotDatafDef2013Temp[["Cle"]] <- dplyr::filter(shotDatafDef2013Temp[["Cle"]], GAME_DATE < dates2013[i])
DF2013[i,3] <- ComparisonPPS(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2013, GAME_DATE < dates2013[i]), SeasonDataDef = shotDatafDef2013Temp)
}
DF2013 <- DF2013[complete.cases(DF2013),]
DFDates <- rbind(DF2013, DF2014 ,DF2015, DF2016, DF2017)
Model1 <-nls(defAPPS ~ SSasympOff(day, A, lrc, c0), data = DFDates)
DFDates$pred <- predict(Model1)
ceiling(summary(Model1)$coefficients[3])
DFDates[DFDates$day ==ceiling(summary(Model1)$coefficients[3]),]
DFDates$Season <- as.factor(DFDates$Season)
ggplot(DFDates, aes(x = day, y = defAPPS))+ geom_point(aes(color = Season)) + geom_line(aes(y = preds))
saveRDS(DFDates, "DFDates.rds")
ggplot(DFDates, aes(x = day, y = defAPPS))+ geom_point(aes(color = Season)) + geom_line(aes(y = pred))
dates2017 <- unique(past_games$Date)[unique(past_games$Date) >= dmy("25-10-2016")]
dates2017 <- unique(past_games$Date)[unique(past_games$Date) >= dmy("25-10-2016")]
dates2017
DF2017 <- data.frame(Season = rep(2017, times =length(dates2017)), day = rep(NA, times =length(dates2017)), defAPPS = rep(NA, times = length(dates2017)), dates = dates2017)
shotDataTotal2017<- readRDS("shotDataTotal2017.rds")
shotDatafDef2017 <- readRDS("shotDatafDef2017.rds")
shotchartTotal2017
str(shotDataTotal2017)
shotDataTotal2017$GAME_DATE <- ymd(shotDataTotal2017$GAME_DATE)
str(shotDataTotal2017)
1:length(shotDatafDef2017)
shotDatafDef2017[[1]]$GAME_DATE
shotDataTotal2017<- readRDS("shotDataTotal2017.rds")
shotDataTotal2017$GAME_DATE <- ymd(shotDataTotal2017$GAME_DATE)
saveRDS(shotDataTotal2017, "shotDataTotal2017.rds")
shotDatafDef2017 <- readRDS("shotDatafDef2017.rds")
for (i in 1:length(shotDatafDef2017)){
shotDatafDef2017[[i]]$GAME_DATE <- ymd(shotDatafDef2017[[i]]$GAME_DATE)
}
saveRDS(shotDatafDef2017, "shotDatafDef2017.rds")
dates2017 <- unique(past_games$Date)[unique(past_games$Date) >= dmy("25-10-2016")]
DF2017 <- data.frame(Season = rep(2017, times =length(dates2017)), day = rep(NA, times =length(dates2017)), defAPPS = rep(NA, times = length(dates2017)), dates = dates2017)
for(i in 10:length(dates2017)) {
shotDatafDef2017Temp <- shotDatafDef2017
DF2017$day[i] <- i
print(i)
shotDatafDef2017Temp[["Cle"]] <- dplyr::filter(shotDatafDef2017Temp[["Cle"]], GAME_DATE < dates2017[i])
DF2017[i,3] <- ComparisonPPS(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < dates2017[i]), SeasonDataDef = shotDatafDef2017Temp)
}
DF2017 <- DF2017[complete.cases(DF2017),]
DFDates <- rbind(DF2013, DF2014 ,DF2015, DF2016, DF2017)
Model1 <-nls(defAPPS ~ SSasympOff(day, A, lrc, c0), data = DFDates)
DFDates$pred <- predict(Model1)
ceiling(summary(Model1)$coefficients[3])
DFDates[DFDates$day ==ceiling(summary(Model1)$coefficients[3]),]
DFDates$Season <- as.factor(DFDates$Season)
ggplot(DFDates, aes(x = day, y = defAPPS))+ geom_point(aes(color = Season)) + geom_line(aes(y = pred))
saveRDS(DFDates, "DFDates.rds")
ggplot(DFDates, aes(x = day, y = defAPPS))+ geom_point(aes(color = Season)) + geom_line(aes(y = pred)) + geom_vline(xintercept = ceiling(summary(Model1)$coefficients[3]))
DFDates[DFDates$day ==ceiling(summary(Model1)$coefficients[3]),]
source('~/Documents/Sloan/NewData.R')
ggplot(DFDates, aes(x = day, y = defAPPS))+ geom_point(aes(color = Season)) + geom_line(aes(y = pred)) + geom_vline(xintercept = ceiling(summary(Model1)$coefficients[3]))
summary(past_games)
DFDates[DFDates$day ==ceiling(summary(Model1)$coefficients[3]),]
for_filtering <- DFDates[DFDates$day ==ceiling(summary(Model1)$coefficients[3]),]
summary(past_games$Date)
colnames(past_games)
summary(past_games$Season)
for_filtering$dates[1]
DFDates[DFDates$day ==ceiling(summary(Model1)$coefficients[3]),]
past_gamesFilt <- dplyr::filter(past_games, Date >= for_filtering$dates[1] & Season == 2013
| Date >= for_filtering$dates[2] & Season == 2014
| Date >= for_filtering$dates[3] & Season == 2015
| Date >= for_filtering$dates[4] & Season == 2016
| Date >= for_filtering$dates[2] & Season == 2017)
summary(Model1)$coefficients[3]
View(past_gamesFilt)
past_gamesFilt <- past_gamesFilt[complete.cases(past_gamesFilt),]
View(past_gamesFilt)
NROW(past_gamesFilt)
ggplot(past_gamesFilt, aes(x = HomeRes, y = defAPPS)) + geom_point() + geom_smooth()
ggplot(past_gamesFilt, aes(x = HomeRes, y = defAPPS)) + geom_smooth()
ggplot(past_gamesFilt, aes(x = HomeRes, y = offAPPS)) + geom_smooth()
hist(past_gamesFilt$defAPPS)
hist(past_gamesFilt$offAPPS)
summary(past_gamesFilt$offAPPS)
summary(past_gamesFilt$defAPPS)
summary(past_gamesFilt$HomeRes)
julian(past_gamesFilt$Date)
saveRDS(for_filtering, "for_filtering.rds")
saveRDS(past_gamesFilt, "past_gamesFilt.rds")
ggplot(past_gamesFilt, aes(x = HomeRes, y = offAPPS)) + geom_smooth()
ggplot(past_gamesFilt, aes(x = HomeRes, y = deffAPPS)) + geom_smooth()
ggplot(past_gamesFilt, aes(x = HomeRes, y = defAPPS)) + geom_smooth()
for_filtering$Type <- "regular_season"
saveRDS(for_filtering, "for_filtering.rds")
summary(for_filtering)
past_gamesFilt$Type <- "regular_season"
colnames(for_filtering)
for_filtering <- for_filtering[,-6]
colnames(for_filtering)
summary(for_filtering)
past_gamesFilt$Type <- "regular_season"
saveRDS(for_filtering, "for_filtering.rds")
saveRDS(past_gamesFilt, "past_gamesFilt.rds")
summary(past_gamesFilt)
hist(past_gamesFilt$HomeRes)
pairs(past_gamesFilt)
pairs(past_gamesFilt[,c(1,6,7,8,9)])
dplyr::filter(past_gamesFilt, defAPPS < -0.3)
past_gamesFilt <- dplyr::filter(past_games, Date >= for_filtering$dates[1] & Season == 2013
| Date >= for_filtering$dates[2] & Season == 2014
| Date >= for_filtering$dates[3] & Season == 2015
| Date >= for_filtering$dates[4] & Season == 2016
| Date >= for_filtering$dates[5] & Season == 2017)
past_gamesFilt <- past_gamesFilt[complete.cases(past_gamesFilt),]
ggplot(past_gamesFilt, aes(x = HomeRes, y = defAPPS)) + geom_point() + geom_smooth()
past_gamesFilt$Type <- "regular_season"
saveRDS(for_filtering, "for_filtering.rds")
saveRDS(past_gamesFilt, "past_gamesFilt.rds")
ggplot(past_gamesFilt, aes(x = HomeRes, y = defAPPS)) + geom_smooth()
ggplot(past_gamesFilt, aes(x = HomeRes, y = offAPPS)) + geom_smooth()
pairs(past_gamesFilt[,c(1,6,7,8,9)])
summary(past_gamesFilt)
hist(past_gamesFilt$HomeRes)
hist(past_gamesFilt$defAPPS)
hist(past_gamesFilt$offAPPS)
?pairs
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
pairs(past_gamesFilt[,c(1,6,7,8,9)], panel = panel.smooth, diag.panel = panel.hist)
pairs(past_gamesFilt[,c(6,7,8,9)], panel = panel.smooth, diag.panel = panel.hist)
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(past_gamesFilt[,c(6,7,8,9)], panel = panel.smooth, diag.panel = panel.hist, upper.panel = panel.cor)
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- cor(x, y)
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(past_gamesFilt[,c(6,7,8,9)], panel = panel.smooth, diag.panel = panel.hist, upper.panel = panel.cor)
FinalOdds <- read.csv("~/Documents/Sloan/FinalOdds.csv")
View(FinalOdds)
str(FinalOdds)
colnames(FinalOdds)
FinalOdds <- FinalOdds[,-1]
colnames(FinalOdds)
colnames(past_gamesFilt)
FinalOdds$Date <-ymd(as.character(FinalOdds$Date))
str(FinalOdds)
FinalOdds <- FinalOdds <- read.csv("~/Documents/Sloan/FinalOdds.csv")
FinalOdds <- FinalOdds[,-c(1,11,12)]
FinalOdds$Date <-ymd(as.character(FinalOdds$Date))
str(FinalOdds)
FinalOdds <- FinalOdds <- read.csv("~/Documents/Sloan/FinalOdds.csv")
FinalOdds <- FinalOdds[,-c(1,8,11,12)]
FinalOdds$Date <-ymd(as.character(FinalOdds$Date))
str(FinalOdds)
FinalOdds <- FinalOdds <- read.csv("~/Documents/Sloan/FinalOdds.csv")
str(FinalOdds)
FinalOdds <- FinalOdds <- read.csv("~/Documents/Sloan/FinalOdds.csv")
FinalOdds <- FinalOdds[,-c(1,9,11,12)]
FinalOdds$Date <-ymd(as.character(FinalOdds$Date))
str(FinalOdds)
colnames(FinalOdds)
FinalOdds <- FinalOdds[,c(1,2,3,4,5,10,11,12,9,7)]
colnames(FinalOdds)
colnames(past_gamesFilt)
dput(colnames(past_gamesFilt))
FinalOdds <- FinalOdds <- read.csv("~/Documents/Sloan/FinalOdds.csv")
FinalOdds <- FinalOdds[,-c(1,9,11,12)]
FinalOdds$Date <-ymd(as.character(FinalOdds$Date))
FinalOdds <- FinalOdds[,c(1,2,3,4,5,10,11,12,9,7)]
FinalOdds$Type <- c("Playoffs")
colnames(FinalOdds)
colnames(FinalOdds) <- c("Date", "Visitor", "Visit_PTS", "Home", "Home_PTS", "Season", "defAPPS", "offAPPS", "HomeRes", "VegasPred", "Type")
saveRDS(FinalOdds, "FinalOdds.rds")
str(FinalOdds)
Test.DF <- rbind.fill(past_gamesFilt, FinalOdds)
library(plyr)
Test.DF <- rbind.fill(past_gamesFilt, FinalOdds)
View(Test.DF)
Test.DF <- dplyr::arrange(Test.DF, Date)
ggplot(past_gamesFilt, aes(x = HomeRes, y = defAPPS)) + geom_smooth()
ggplot(past_gamesFilt, aes(x = HomeRes, y = defAPPS)) + geom_smooth() + geom_point()
ggplot(Test.DF, aes(x = HomeRes, y = defAPPS)) + geom_smooth() + geom_point(color = Type)
ggplot(Test.DF, aes(x = HomeRes, y = defAPPS)) + geom_smooth() + geom_point(aes(color = Type))
ggplot(Test.DF, aes(x = HomeRes, y = defAPPS)) + geom_smooth() + geom_point(aes(color = Type), alpha = 0.5)
ggplot(Test.DF, aes(x = HomeRes, y = defAPPS)) + geom_smooth() + geom_point(aes(color = Type), alpha = 0.2)
readRDS("FinalOdds.rds")
inalOdds <- readRDS("FinalOdds.rds")
past_gamesFiltPlayoff <- rbind.fill(past_gamesFilt, FinalOdds)
FinalOdds <- readRDS("FinalOdds.rds")
past_gamesFiltPlayoff <- rbind.fill(past_gamesFilt, FinalOdds)
saveRDS(past_gamesFiltPlayoff, "past_gamesFiltPlayoff.rds")
past_gamesFiltPlayoff <- rbind.fill(past_gamesFilt, FinalOdds)
past_gamesFiltPlayoff <- dplyr::arrange(past_gamesFiltPlayoff, Date)
saveRDS(past_gamesFiltPlayoff, "past_gamesFiltPlayoff.rds")
##Train model
#Divide in train and test set
past_gamesFiltPlayoff <- readRDS("past_gamesFiltPlayoff.rds")
View(past_gamesFiltPlayoff)
View(past_gamesFiltPlayoff)
trainNBA <- dplyr::filter(past_gamesFiltPlayoff, Season != 2017 & Type == "regular_season" | Season != 2016 & Type == "Playoffs")
View(trainNBA)
testNBA <- dplyr::filter(past_gamesFiltPlayoff, Season == 2017 & Type == "regular_season" | Season == 2016 & Type == "Playoffs")
View(testNBA)
library(caret)
ctrl <- trainControl(method = "repeatedcv", number=10, repeats=3)
grid <- expand.grid(interaction.depth = seq(1, 7, by = 2),
n.trees = seq(100, 1000, by = 50),
shrinkage = c(0.01, 0.1),
n.minobsinnode=c(1,5,10))
colnames(trainNBA)
BRT2017_31_Mar <- train(x = trainNBA[,c(7,8,10)],y = NBAOdds[,9], method = "gbm",  preProcess = c("center", "scale"), verbose = FALSE, trControl = ctrl, tuneGrid = grid)
BRT2017_31_Mar <- train(x = trainNBA[,c(7,8,10)],y = trainNBA[,9], method = "gbm",  preProcess = c("center", "scale"), verbose = FALSE, trControl = ctrl, tuneGrid = grid)
library(caret)
ctrl <- trainControl(method = "repeatedcv", number=10, repeats=3)
grid <- expand.grid(interaction.depth = seq(1, 7, by = 2),
n.trees = seq(100, 1000, by = 50),
shrinkage = c(0.01, 0.1),
n.minobsinnode=c(1,5,10))
# train the GBM model
set.seed(7)
BRT2017_31_Mar <- train(x = trainNBA[,c(7,8)],y = trainNBA[,9], method = "gbm",  preProcess = c("center", "scale"), verbose = FALSE, trControl = ctrl, tuneGrid = grid)
BRT2017_31_Mar
summary(BRT2017_31_Mar)
BRT2017_31_Mar$finalModel
class(BRT2017_31_Mar$finalModel)
plot(BRT2017_31_Mar$finalModel)
?plot.gbm
saveRDS(BRT2017_31_Mar, "BRT2017_31_Mar.rds")
test$PredictedBRT <- predict(BRT2017_31_Mar, testNBA)
testNBA$PredictedBRT <- predict(BRT2017_31_Mar, testNBA)
test$PredictedBRT <- predict(BRT2017_31_Mar, testNBA[,7:8])
testNBA$PredictedBRT <- predict(BRT2017_31_Mar, testNBA[,7:8])
View(testNBA)
postResample(pred = testNBA$PredictedBRT, obs = testNBA$HomeRes)
postResample(pred = testNBA$PredictedBRT, obs = testNBA$VegasPred)
postResample(pred = testNBA$VegasPred, obs = testNBA$HomeRes)
ggplot(testNBA, aes(x = HomeRes, y = PredictedBRT)) + geom_smooth() + geom_point()
For.predictions <- expand.grid(defAPPS = seq(from = min(past_gamesFiltPlayoff$defAPPS), to = max(past_gamesFiltPlayoff$defAPPS), length.out = 100),
offAPPS =seq(from= min(past_gamesFiltPlayoff$offAPPS),to = max(past_gamesFiltPlayoff$offAPPS), length.out = 100))
For.predictions$Spread <- predict(modelGbmforcast, For.predictions)
wireframe(Spread ~  offAPPS + defAPPS, data = For.predictions, colorkey = TRUE, drape = TRUE, pretty = TRUE,scales = list(arrows = FALSE), screen = list(z = -220, x = -80))
For.predictions$Spread <- predict(BRT2017_31_Mar, For.predictions)
wireframe(Spread ~  offAPPS + defAPPS, data = For.predictions, colorkey = TRUE, drape = TRUE, pretty = TRUE,scales = list(arrows = FALSE), screen = list(z = -220, x = -80))
For.predictions2 <- For.predictions
For.predictions2$Type <- c("Predicted")
For.predictions3 <- For.predictions2[seq(from =1, to = NROW(For.predictions), by = 100),]
For.predictions3$Spread <- 0
For.predictions3$Type <- c("Push")
For.predictions2 <- rbind(For.predictions2, For.predictions3)
#Test 1
wireframe(Spread ~  offAPPS + defAPPS, group = Type, data = For.predictions2, colorkey = TRUE, drape = TRUE, pretty = TRUE,scales = list(arrows = FALSE), screen = list(z = -220, x = -80), par.settings = list(regions=list(alpha=0.75)))
#Test 2
wireframe(Spread ~  offAPPS + defAPPS, group = Type, data = For.predictions2, colorkey = TRUE, drape = TRUE, pretty = TRUE,scales = list(arrows = FALSE), screen = list(z = -220, x = -60), par.settings = list(regions=list(alpha=0.85)))
#Test3
wireframe(Spread ~  offAPPS + defAPPS, group = Type, data = For.predictions2, colorkey = TRUE, drape = TRUE, pretty = TRUE,scales = list(arrows = FALSE), screen = list(z = -220, x = -100))
wireframe(Spread ~  offAPPS + defAPPS, data = For.predictions, colorkey = TRUE, drape = TRUE, pretty = TRUE,scales = list(arrows = FALSE), screen = list(z = -220, x = -80))
wireframe(Spread ~  offAPPS + defAPPS, group = Type, data = For.predictions2, colorkey = TRUE, drape = TRUE, pretty = TRUE,scales = list(arrows = FALSE), screen = list(z = -220, x = -60), par.settings = list(regions=list(alpha=0.85)))
wireframe(Spread ~  offAPPS + defAPPS, group = Type, data = For.predictions2, colorkey = TRUE, drape = TRUE, pretty = TRUE,scales = list(arrows = FALSE), screen = list(z = -220, x = -80), par.settings = list(regions=list(alpha=0.75)))
stargazer::stargazer(past_gamesFiltPlayoff)
source('~/Documents/Sloan/WordPress.R')
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, caret)
FinalOdds <- readRDS("FinalOdds.rds")
past_gamesFiltPlayoff <- readRDS("past_gamesFiltPlayoff.rds")
DFDates <- readRDS("DFDates.rds")
shotDataTotal2017<- readRDS("shotDataTotal2017.rds")
shotDataTotal2017$GAME_DATE <- ymd(shotDataTotal2017$GAME_DATE)
saveRDS(shotDataTotal2017, "shotDataTotal2017.rds")
shotDatafDef2017 <- readRDS("shotDatafDef2017.rds")
for (i in 1:length(shotDatafDef2017)){
shotDatafDef2017[[i]]$GAME_DATE <- ymd(shotDatafDef2017[[i]]$GAME_DATE)
}
#####2016
shotDataTotal2016<- readRDS("shotDataTotal2016.rds")
shotDatafDef2016 <- readRDS("shotDatafDef2016.rds")
#####2015
shotDataTotal2015<- readRDS("shotDataTotal2015.rds")
shotDatafDef2015 <- readRDS("shotDatafDef2015.rds")
####2014
shotDataTotal2014<- readRDS("shotDataTotal2014.rds")
shotDatafDef2014 <- readRDS("shotDatafDef2014.rds")
#####2013
shotDataTotal2013<- readRDS("shotDataTotal2013.rds")
shotDatafDef2013 <- readRDS("shotDatafDef2013.rds")
for (i in 1:length(names(shotDatafDef2013))) {
shotDatafDef2013[[i]]$GAME_DATE <- lubridate::ymd(shotDatafDef2013[[i]]$GAME_DATE)
}
