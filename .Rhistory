APPS[[i]] <- Get_Apps(HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2014, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2013 & i >1){
APPS[[i]] <- Get_Apps(HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2015, GAME_DATE < past_games_c$Date[i]))
}else{
APPS[[i]] <- NA
}
print(i)
}
past_games_c <- readRDS("past_games.rds")
shotDataTotal2017<- readRDS("shotDataTotal2017.rds")
#####2016
shotDataTotal2016<- readRDS("shotDataTotal2016.rds")
#####2015
shotDataTotal2015<- readRDS("shotDataTotal2015.rds")
####2014
shotDataTotal2014<- readRDS("shotDataTotal2014.rds")
#####2013
shotDataTotal2013<- readRDS("shotDataTotal2013.rds")
pacman::p_load(SpatialBall)
APPS <- list()
for(i in 1:NROW(past_games_c)) {
if (past_games_c$Season[i] == 2017) {
APPS[[i]] <- Get_Apps(HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2017, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2016){
APPS[[i]] <- Get_Apps(HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2016, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2015){
APPS[[i]] <- Get_Apps(HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2015, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2014){
APPS[[i]] <- Get_Apps(HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2014, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2013){
APPS[[i]] <- Get_Apps(HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2015, GAME_DATE < past_games_c$Date[i]))
}else{
APPS[[i]] <- NA
}
print(i)
}
APPS <- do.call("rbind", APPS)
View(APPS)
past_games_c <- readRDS("past_games.rds")
shotDataTotal2017<- readRDS("shotDataTotal2017.rds")
#####2016
shotDataTotal2016<- readRDS("shotDataTotal2016.rds")
#####2015
shotDataTotal2015<- readRDS("shotDataTotal2015.rds")
####2014
shotDataTotal2014<- readRDS("shotDataTotal2014.rds")
#####2013
shotDataTotal2013<- readRDS("shotDataTotal2013.rds")
pacman::p_load(SpatialBall)
APPS <- list()
for(i in 1:NROW(past_games_c)) {
if (past_games_c$Season[i] == 2017) {
APPS[[i]] <- Get_Apps(HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2017, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2016){
APPS[[i]] <- Get_Apps(HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2016, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2015){
APPS[[i]] <- Get_Apps(HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2015, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2014){
APPS[[i]] <- Get_Apps(HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2014, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2013){
APPS[[i]] <- Get_Apps(HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2013, GAME_DATE < past_games_c$Date[i]))
}else{
APPS[[i]] <- NA
}
print(i)
}
APPS <- do.call("rbind", APPS)
View(APPS)
hist(APPS$spread)
library(lubridate)
dates2017_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("25-10-2016")]
DF2017_c <- data.frame(Season = rep(2017, times =length(dates2017_c)), day = rep(NA, times =length(dates2017_c)), defAPPS = rep(NA, times = length(dates2017_c)), dates = dates2017_c)
for(i in 10:length(dates2017_c)) {
shotDatafDef2017Temp <- shotDatafDef2017
DF2017_c$day[i] <- i
print(i)
}
DF2017_c <- DF2017_c[complete.cases(DF2017_c),]
#Params <- data.frame(season = 2017, As)
#ceiling(summary(Model1)$coefficients[3])
library(lubridate)
dates2016_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("27-10-2015") & unique(past_games_c$Date) <= dmy("13-04-2016")]
DF2016_c <- data.frame(Season = rep(2016, times =length(dates2016_c)), day = rep(NA, times =length(dates2016_c)), defAPPS = rep(NA, times = length(dates2016_c)), dates = dates2016_c)
for(i in 10:length(dates2016_c)) {
shotDatafDef2016Temp <- shotDatafDef2016
DF2016_c$day[i] <- i
print(i)
}
DF2016_c <- DF2016_c[complete.cases(DF2016_c),]
dates2015_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("28-10-2014") & unique(past_games_c$Date) <= dmy("15-04-2015")]
DF2015_c <- data.frame(Season = rep(2015, times =length(dates2015_c)), day = rep(NA, times =length(dates2015_c)), defAPPS = rep(NA, times = length(dates2015_c)), dates = dates2015_c)
for(i in 10:length(dates2015_c)) {
DF2015_c$day[i] <- i
print(i)
}
DF2015_c <- DF2015_c[complete.cases(DF2015_c),]
dates2014_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("29-10-2013") & unique(past_games_c$Date) <= dmy("16-04-2014")]
DF2014_c <- data.frame(Season = rep(2014, times =length(dates2014_c)), day = rep(NA, times =length(dates2014_c)), defAPPS = rep(NA, times = length(dates2014_c)), dates = dates2014_c)
for(i in 10:length(dates2014_c)) {
DF2014_c$day[i] <- i
print(i)
}
DF2014_c <- DF2014_c[complete.cases(DF2014_c),]
dates2013_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("20-10-2012") & unique(past_games_c$Date) <= dmy("17-04-2013")]
DF2013_c <- data.frame(Season = rep(2013, times =length(dates2013_c)), day = rep(NA, times =length(dates2013_c)), defAPPS = rep(NA, times = length(dates2013_c)), dates = dates2013_c)
for(i in 10:length(dates2013_c)) {
DF2013_c$day[i] <- i
print(i)
}
DF2013_c <- DF2013_c[complete.cases(DF2013_c),]
DFDates_c <- rbind(DF2013_c, DF2014_c ,DF2015_c, DF2016_c, DF2017_c)
View(DFDates_c)
library(lubridate)
dates2017_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("25-10-2016")]
DF2017_c <- data.frame(Season = rep(2017, times =length(dates2017_c)), day = rep(NA, times =length(dates2017_c)), defAPPS = rep(NA, times = length(dates2017_c)), dates = dates2017_c)
for(i in 10:length(dates2017_c)) {
shotDatafDef2017Temp <- shotDatafDef2017
DF2017_c$day[i] <- i
print(i)
}
#Params <- data.frame(season = 2017, As)
#ceiling(summary(Model1)$coefficients[3])
library(lubridate)
dates2016_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("27-10-2015") & unique(past_games_c$Date) <= dmy("13-04-2016")]
DF2016_c <- data.frame(Season = rep(2016, times =length(dates2016_c)), day = rep(NA, times =length(dates2016_c)), defAPPS = rep(NA, times = length(dates2016_c)), dates = dates2016_c)
for(i in 10:length(dates2016_c)) {
shotDatafDef2016Temp <- shotDatafDef2016
DF2016_c$day[i] <- i
print(i)
}
dates2015_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("28-10-2014") & unique(past_games_c$Date) <= dmy("15-04-2015")]
DF2015_c <- data.frame(Season = rep(2015, times =length(dates2015_c)), day = rep(NA, times =length(dates2015_c)), defAPPS = rep(NA, times = length(dates2015_c)), dates = dates2015_c)
for(i in 10:length(dates2015_c)) {
DF2015_c$day[i] <- i
print(i)
}
dates2014_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("29-10-2013") & unique(past_games_c$Date) <= dmy("16-04-2014")]
DF2014_c <- data.frame(Season = rep(2014, times =length(dates2014_c)), day = rep(NA, times =length(dates2014_c)), defAPPS = rep(NA, times = length(dates2014_c)), dates = dates2014_c)
for(i in 10:length(dates2014_c)) {
DF2014_c$day[i] <- i
print(i)
}
dates2013_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("20-10-2012") & unique(past_games_c$Date) <= dmy("17-04-2013")]
DF2013_c <- data.frame(Season = rep(2013, times =length(dates2013_c)), day = rep(NA, times =length(dates2013_c)), defAPPS = rep(NA, times = length(dates2013_c)), dates = dates2013_c)
for(i in 10:length(dates2013_c)) {
DF2013_c$day[i] <- i
print(i)
}
DFDates_c <- rbind(DF2013_c, DF2014_c ,DF2015_c, DF2016_c, DF2017_c)
View(DFDates_c)
library(lubridate)
dates2017_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("25-10-2016")]
DF2017_c <- data.frame(Season = rep(2017, times =length(dates2017_c)), day = rep(NA, times =length(dates2017_c)), dates = dates2017_c)
for(i in 1:length(dates2017_c)) {
shotDatafDef2017Temp <- shotDatafDef2017
DF2017_c$day[i] <- i
print(i)
}
#Params <- data.frame(season = 2017, As)
#ceiling(summary(Model1)$coefficients[3])
library(lubridate)
dates2016_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("27-10-2015") & unique(past_games_c$Date) <= dmy("13-04-2016")]
DF2016_c <- data.frame(Season = rep(2016, times =length(dates2016_c)), day = rep(NA, times =length(dates2016_c)), dates = dates2016_c)
for(i in 1:length(dates2016_c)) {
shotDatafDef2016Temp <- shotDatafDef2016
DF2016_c$day[i] <- i
print(i)
}
dates2015_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("28-10-2014") & unique(past_games_c$Date) <= dmy("15-04-2015")]
DF2015_c <- data.frame(Season = rep(2015, times =length(dates2015_c)), day = rep(NA, times =length(dates2015_c)), dates = dates2015_c)
for(i in 1:length(dates2015_c)) {
DF2015_c$day[i] <- i
print(i)
}
dates2014_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("29-10-2013") & unique(past_games_c$Date) <= dmy("16-04-2014")]
DF2014_c <- data.frame(Season = rep(2014, times =length(dates2014_c)), day = rep(NA, times =length(dates2014_c)), dates = dates2014_c)
for(i in 1:length(dates2014_c)) {
DF2014_c$day[i] <- i
print(i)
}
dates2013_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("20-10-2012") & unique(past_games_c$Date) <= dmy("17-04-2013")]
DF2013_c <- data.frame(Season = rep(2013, times =length(dates2013_c)), day = rep(NA, times =length(dates2013_c)), dates = dates2013_c)
for(i in 1:length(dates2013_c)) {
DF2013_c$day[i] <- i
print(i)
}
DFDates_c <- rbind(DF2013_c, DF2014_c ,DF2015_c, DF2016_c, DF2017_c)
View(APPS)
View(past_games_c)
past_games_c[,7:8] <- APPS[,1:2]
View(past_games_c)
View(DFDates_c)
?merge
View(merge(past_games_c, DFDates_c, all = TRUE))
library(lubridate)
dates2017_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("25-10-2016")]
DF2017_c <- data.frame(Season = rep(2017, times =length(dates2017_c)), day = rep(NA, times =length(dates2017_c)), Date = dates2017_c)
for(i in 1:length(dates2017_c)) {
shotDatafDef2017Temp <- shotDatafDef2017
DF2017_c$day[i] <- i
print(i)
}
#Params <- data.frame(season = 2017, As)
#ceiling(summary(Model1)$coefficients[3])
library(lubridate)
dates2016_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("27-10-2015") & unique(past_games_c$Date) <= dmy("13-04-2016")]
DF2016_c <- data.frame(Season = rep(2016, times =length(dates2016_c)), day = rep(NA, times =length(dates2016_c)), Date = dates2016_c)
for(i in 1:length(dates2016_c)) {
shotDatafDef2016Temp <- shotDatafDef2016
DF2016_c$day[i] <- i
print(i)
}
dates2015_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("28-10-2014") & unique(past_games_c$Date) <= dmy("15-04-2015")]
DF2015_c <- data.frame(Season = rep(2015, times =length(dates2015_c)), day = rep(NA, times =length(dates2015_c)), Date = dates2015_c)
for(i in 1:length(dates2015_c)) {
DF2015_c$day[i] <- i
print(i)
}
dates2014_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("29-10-2013") & unique(past_games_c$Date) <= dmy("16-04-2014")]
DF2014_c <- data.frame(Season = rep(2014, times =length(dates2014_c)), day = rep(NA, times =length(dates2014_c)), Date = dates2014_c)
for(i in 1:length(dates2014_c)) {
DF2014_c$day[i] <- i
print(i)
}
dates2013_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("20-10-2012") & unique(past_games_c$Date) <= dmy("17-04-2013")]
DF2013_c <- data.frame(Season = rep(2013, times =length(dates2013_c)), day = rep(NA, times =length(dates2013_c)), Date = dates2013_c)
for(i in 1:length(dates2013_c)) {
DF2013_c$day[i] <- i
print(i)
}
DFDates_c <- rbind(DF2013_c, DF2014_c ,DF2015_c, DF2016_c, DF2017_c)
View(merge(past_games_c, DFDates_c, all = TRUE))
past_games_c <- merge(past_games_c, DFDates_c, all = TRUE)
library(ggplot2)
ggplot(past_games_c, aes(x = day, y = offAPPS)) + geom_line(aes(color = Visitor, lty = Season))
ggplot(past_games_c, aes(x = day, y = offAPPS)) + geom_line(aes(color = Visitor))
ggplot(past_games_c, aes(x = day, y = defAPPS)) + geom_line(aes(color = Visitor))
ggplot(past_games_c, aes(x = day, y = defAPPS)) + geom_line(aes(color = Visitor))
a <- ggplot(past_games_c, aes(x = day, y = offAPPS)) + geom_line(aes(color = Visitor))
b <- ggplot(past_games_c, aes(x = day, y = defAPPS)) + geom_line(aes(color = Visitor))
str(past_games_c)
library(ggplot2)
library(gridExtra)
a <- ggplot(past_games_c, aes(x = day, y = offAPPS)) + geom_line(aes(color = Visitor, lty= as.factor(Season)))
b <- ggplot(past_games_c, aes(x = day, y = defAPPS)) + geom_line(aes(color = Visitor, lty= as.factor(Season)))
grid.arrange(a, b)
grid.arrange(a, b)
Model1_c <-nls(defAPPS ~ SSasympOff(day, A, lrc, c0), data = past_games_c)
NROW(past_games_c)
complete.cases(past_games_c)
NROW(past_games_c)
sum(complete.cases(past_games_c))
past_games_c <- complete.cases[past_games_c,]
class(past_games_c)
past_games_c <- past_games_c[complete.cases(past_games_c),]
Model1_c <-nls(defAPPS ~ SSasympOff(day, A, lrc, c0), data = past_games_c)
Model1_c <-nls(offAPPS ~ SSasympOff(day, A, lrc, c0), data = past_games_c)
View(past_games_c)
past_games_c <- readRDS("past_games.rds")
shotDataTotal2017<- readRDS("shotDataTotal2017.rds")
#####2016
shotDataTotal2016<- readRDS("shotDataTotal2016.rds")
#####2015
shotDataTotal2015<- readRDS("shotDataTotal2015.rds")
####2014
shotDataTotal2014<- readRDS("shotDataTotal2014.rds")
#####2013
shotDataTotal2013<- readRDS("shotDataTotal2013.rds")
pacman::p_load(SpatialBall)
APPS <- list()
for(i in 1:NROW(past_games_c)) {
if (past_games_c$Season[i] == 2017) {
APPS[[i]] <- Get_Apps(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2017, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2016){
APPS[[i]] <- Get_Apps(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2016, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2015){
APPS[[i]] <- Get_Apps(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2015, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2014){
APPS[[i]] <- Get_Apps(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2014, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2013){
APPS[[i]] <- Get_Apps(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2013, GAME_DATE < past_games_c$Date[i]))
}else{
APPS[[i]] <- NA
}
paste(i, "of", NROW(past_games_c))
}
APPS <- list()
for(i in 1:NROW(past_games_c)) {
if (past_games_c$Season[i] == 2017) {
APPS[[i]] <- Get_Apps(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2017, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2016){
APPS[[i]] <- Get_Apps(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2016, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2015){
APPS[[i]] <- Get_Apps(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2015, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2014){
APPS[[i]] <- Get_Apps(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2014, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2013){
APPS[[i]] <- Get_Apps(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2013, GAME_DATE < past_games_c$Date[i]))
}else{
APPS[[i]] <- NA
}
paste(i, "of", NROW(past_games_c))
}
pacman::p_load(SpatialBall)
APPS <- list()
for(i in 1:NROW(past_games_c)) {
if (past_games_c$Season[i] == 2017) {
APPS[[i]] <- Get_Apps(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2017, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2016){
APPS[[i]] <- Get_Apps(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2016, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2015){
APPS[[i]] <- Get_Apps(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2015, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2014){
APPS[[i]] <- Get_Apps(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2014, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2013){
APPS[[i]] <- Get_Apps(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2013, GAME_DATE < past_games_c$Date[i]))
}else{
APPS[[i]] <- NA
}
print(paste(i, "of", NROW(past_games_c)))
}
APPS <- do.call("rbind", APPS)
past_games_c[,7:8] <- APPS[,1:2]
#saveRDS(past_games_c, "past_games_c.rds")
#past_games_c <- readRDS("past_games_c.rds")
library(lubridate)
dates2017_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("25-10-2016")]
DF2017_c <- data.frame(Season = rep(2017, times =length(dates2017_c)), day = rep(NA, times =length(dates2017_c)), Date = dates2017_c)
for(i in 1:length(dates2017_c)) {
shotDatafDef2017Temp <- shotDatafDef2017
DF2017_c$day[i] <- i
print(i)
}
#Params <- data.frame(season = 2017, As)
#ceiling(summary(Model1)$coefficients[3])
library(lubridate)
dates2016_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("27-10-2015") & unique(past_games_c$Date) <= dmy("13-04-2016")]
DF2016_c <- data.frame(Season = rep(2016, times =length(dates2016_c)), day = rep(NA, times =length(dates2016_c)), Date = dates2016_c)
for(i in 1:length(dates2016_c)) {
shotDatafDef2016Temp <- shotDatafDef2016
DF2016_c$day[i] <- i
print(i)
}
dates2015_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("28-10-2014") & unique(past_games_c$Date) <= dmy("15-04-2015")]
DF2015_c <- data.frame(Season = rep(2015, times =length(dates2015_c)), day = rep(NA, times =length(dates2015_c)), Date = dates2015_c)
for(i in 1:length(dates2015_c)) {
DF2015_c$day[i] <- i
print(i)
}
dates2014_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("29-10-2013") & unique(past_games_c$Date) <= dmy("16-04-2014")]
DF2014_c <- data.frame(Season = rep(2014, times =length(dates2014_c)), day = rep(NA, times =length(dates2014_c)), Date = dates2014_c)
for(i in 1:length(dates2014_c)) {
DF2014_c$day[i] <- i
print(i)
}
dates2013_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("20-10-2012") & unique(past_games_c$Date) <= dmy("17-04-2013")]
DF2013_c <- data.frame(Season = rep(2013, times =length(dates2013_c)), day = rep(NA, times =length(dates2013_c)), Date = dates2013_c)
for(i in 1:length(dates2013_c)) {
DF2013_c$day[i] <- i
print(i)
}
DFDates_c <- rbind(DF2013_c, DF2014_c ,DF2015_c, DF2016_c, DF2017_c)
past_games_c <- merge(past_games_c, DFDates_c, all = TRUE)
library(ggplot2)
library(gridExtra)
a <- ggplot(past_games_c, aes(x = day, y = offAPPS)) + geom_line(aes(color = Visitor, lty= as.factor(Season)))
b <- ggplot(past_games_c, aes(x = day, y = defAPPS)) + geom_line(aes(color = Visitor, lty= as.factor(Season)))
grid.arrange(a, b)
a
b
hist(APPS$spread)
library(SpatialBall)
OffShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4)
OffShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4, type = "PCT")
DefShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4)
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Cle", Seasondata = season2017)
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Cle", Seasondata = season2017)
OffShotSeasonGraphPlayer(season2017, player = "Stephen Curry")
OffShotSeasonGraphPlayer(season2017, player = "DeAndre Jordan")
OffShotSeasonGraphPlayer(season2017, player = "DeMar DeRozan")
OffShotSeasonGraphPlayer(season2017, player = "Isaiah Thomas")
?diff
diff(1:10, 2)
past_games_c <- readRDS("past_games.rds")
shotDataTotal2017<- readRDS("shotDataTotal2017.rds")
#####2016
shotDataTotal2016<- readRDS("shotDataTotal2016.rds")
#####2015
shotDataTotal2015<- readRDS("shotDataTotal2015.rds")
####2014
shotDataTotal2014<- readRDS("shotDataTotal2014.rds")
#####2013
shotDataTotal2013<- readRDS("shotDataTotal2013.rds")
pacman::p_load(SpatialBall)
APPS <- list()
for(i in 1:NROW(past_games_c)) {
if (past_games_c$Season[i] == 2017) {
APPS[[i]] <- Get_Apps(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2017, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2016){
APPS[[i]] <- Get_Apps(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2016, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2015){
APPS[[i]] <- Get_Apps(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2015, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2014){
APPS[[i]] <- Get_Apps(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2014, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2013){
APPS[[i]] <- Get_Apps(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2013, GAME_DATE < past_games_c$Date[i]))
}else{
APPS[[i]] <- NA
}
print(paste(i, "of", NROW(past_games_c)))
}
APPS <- do.call("rbind", APPS)
View(APPS)
summary(APPS)
past_games_c <- readRDS("past_games.rds")
shotDataTotal2017<- readRDS("shotDataTotal2017.rds")
#####2016
shotDataTotal2016<- readRDS("shotDataTotal2016.rds")
#####2015
shotDataTotal2015<- readRDS("shotDataTotal2015.rds")
####2014
shotDataTotal2014<- readRDS("shotDataTotal2014.rds")
#####2013
shotDataTotal2013<- readRDS("shotDataTotal2013.rds")
pacman::p_load(SpatialBall)
APPS <- list()
for(i in 1:NROW(past_games_c)) {
if (past_games_c$Season[i] == 2017) {
APPS[[i]] <- Get_Apps(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2017, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2016){
APPS[[i]] <- Get_Apps(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2016, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2015){
APPS[[i]] <- Get_Apps(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2015, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2014){
APPS[[i]] <- Get_Apps(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2014, GAME_DATE < past_games_c$Date[i]))
}else if (past_games_c$Season[i] == 2013){
APPS[[i]] <- Get_Apps(MAX_Y = 280, HomeTeam = past_games_c$Home[i], VisitorTeam = past_games_c$Visitor[i], Seasondata = dplyr::filter(shotDataTotal2013, GAME_DATE < past_games_c$Date[i]))
}else{
APPS[[i]] <- NA
}
print(paste(i, "of", NROW(past_games_c)))
}
APPS <- do.call("rbind", APPS)
past_games_c[,7:8] <- APPS[,1:2]
#saveRDS(past_games_c, "past_games_c.rds")
#past_games_c <- readRDS("past_games_c.rds")
library(lubridate)
dates2017_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("25-10-2016")]
DF2017_c <- data.frame(Season = rep(2017, times =length(dates2017_c)), day = rep(NA, times =length(dates2017_c)), Date = dates2017_c)
for(i in 1:length(dates2017_c)) {
shotDatafDef2017Temp <- shotDatafDef2017
DF2017_c$day[i] <- i
print(i)
}
#Params <- data.frame(season = 2017, As)
#ceiling(summary(Model1)$coefficients[3])
library(lubridate)
dates2016_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("27-10-2015") & unique(past_games_c$Date) <= dmy("13-04-2016")]
DF2016_c <- data.frame(Season = rep(2016, times =length(dates2016_c)), day = rep(NA, times =length(dates2016_c)), Date = dates2016_c)
for(i in 1:length(dates2016_c)) {
shotDatafDef2016Temp <- shotDatafDef2016
DF2016_c$day[i] <- i
print(i)
}
dates2015_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("28-10-2014") & unique(past_games_c$Date) <= dmy("15-04-2015")]
DF2015_c <- data.frame(Season = rep(2015, times =length(dates2015_c)), day = rep(NA, times =length(dates2015_c)), Date = dates2015_c)
for(i in 1:length(dates2015_c)) {
DF2015_c$day[i] <- i
print(i)
}
dates2014_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("29-10-2013") & unique(past_games_c$Date) <= dmy("16-04-2014")]
DF2014_c <- data.frame(Season = rep(2014, times =length(dates2014_c)), day = rep(NA, times =length(dates2014_c)), Date = dates2014_c)
for(i in 1:length(dates2014_c)) {
DF2014_c$day[i] <- i
print(i)
}
dates2013_c <- unique(past_games_c$Date)[unique(past_games_c$Date) >= dmy("20-10-2012") & unique(past_games_c$Date) <= dmy("17-04-2013")]
DF2013_c <- data.frame(Season = rep(2013, times =length(dates2013_c)), day = rep(NA, times =length(dates2013_c)), Date = dates2013_c)
for(i in 1:length(dates2013_c)) {
DF2013_c$day[i] <- i
print(i)
}
DFDates_c <- rbind(DF2013_c, DF2014_c ,DF2015_c, DF2016_c, DF2017_c)
past_games_c <- merge(past_games_c, DFDates_c, all = TRUE)
library(ggplot2)
library(gridExtra)
a <- ggplot(past_games_c, aes(x = day, y = offAPPS)) + geom_line(aes(color = Visitor, lty= as.factor(Season)))
a
b <- ggplot(past_games_c, aes(x = day, y = defAPPS)) + geom_line(aes(color = Visitor, lty= as.factor(Season)))
b
c <- a + theme(legend.position = "none")
d <- b + theme(legend.position = "none")
grid.arrange(c, d)
grid.arrange(c, d, ncol = 2)
a
b
grid.arrange(c, d)
grid.arrange(c, d, ncol = 2)
data("season2017")
#Examples with several teams
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017)
OffShotSeasonGraphPlayer()
KL13 <- OffShotSeasonGraphPlayer(shotDataTotal2013, player = "Kawhi Leonard",quant = 0.4)  + theme(legend.position = "none") + ggtitle("PPS Kawhi Leonard 2013")
KL14 <- OffShotSeasonGraphPlayer(shotDataTotal2014, player = "Kawhi Leonard",quant = 0.4)  + theme(legend.position = "none") + ggtitle("PPS Kawhi Leonard 2014")
KL15 <- OffShotSeasonGraphPlayer(shotDataTotal2015, player = "Kawhi Leonard",quant = 0.4) + theme(legend.position = "none") + ggtitle("PPS Kawhi Leonard 2015")
KL16 <- OffShotSeasonGraphPlayer(shotDataTotal2016, player = "Kawhi Leonard",quant = 0.4) + theme(legend.position = "none") + ggtitle("PPS Kawhi Leonard 2016")
KL17 <- OffShotSeasonGraphPlayer(shotDataTotal2017, player = "Kawhi Leonard",quant = 0.4) + theme(legend.position = "none") + ggtitle("PPS Kawhi Leonard 2017")
library(gridExtra)
grid.arrange(KL13, KL14, KL15, KL16, KL17)
library(animation)
saveGIF(for(i in 1:5){OffShotSeasonGraphPlayer(seasons[[i]], player = "Kawhi Leonard",quant = 0.4)})
KL13
