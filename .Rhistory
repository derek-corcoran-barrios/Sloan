past_games <- past_games[!is.na(past_games$Date),]
past_games
summary(past_games$HomeRes)
hist(past_games$HomeRes)
shotDataTotal2017<- readRDS("shotDataTotal2017.rds")
shotDataTotal2017$GAME_DATE <- lubridate::ymd(shotDataTotal2017$GAME_DATE)
saveRDS(shotDataTotal2017, "shotDataTotal2017.rds")
shotDatafDef2017 <- readRDS("shotDatafDef2017.rds")
for (i in 1:length(names(shotDatafDef2017))) {
shotDatafDef2017[[i]]$GAME_DATE <- lubridate::ymd(shotDatafDef2017[[i]]$GAME_DATE)
}
saveRDS(shotDatafDef2017, "shotDatafDef2017.rds")
ComparisonPPS <- function(OffTeam, DefTown, SeasondataOff, SeasonDataDef, nbins = 40) {
#Filter the offensive data of the Offensive Team
Off <- filter(SeasondataOff, TEAM_NAME == OffTeam)
#Filter the Deffensive data of the Defensive team
deff <- SeasonDataDef[names(SeasonDataDef) == DefTown][[1]]
#Get the maximum and minumum values for x and y
xbnds <- range(c(SeasondataOff$LOC_X, deff$LOC_X))
ybnds <- range(c(SeasondataOff$LOC_Y, deff$LOC_Y))
#Make hexbin dataframes out of the teams
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
##Total NBA data
Totalhex <- makeHexData(SeasondataOff)
##Defensive team data
Defhex <- makeHexData(deff)
##Offensive team data
Offhex <- makeHexData(Off)
#Merge offensive and deffensive data with total data by Cell id
DeffbyCell <- merge(Totalhex, Defhex, by = "cid", all = T)
OffByCell <- merge(Totalhex, Offhex, by = "cid", all = T)
##  when calculating the difference empty cells should count as 0
DeffbyCell$PPS.x[is.na(DeffbyCell$PPS.x)] <- 0
DeffbyCell$PPS.y[is.na(DeffbyCell$PPS.y)] <- 0
DeffbyCell$ST.y[is.na(DeffbyCell$ST.y)] <- 0
OffByCell$PPS.x[is.na(OffByCell$PPS.x)] <- 0
OffByCell$PPS.y[is.na(OffByCell$PPS.y)] <- 0
OffByCell$ST.y[is.na(OffByCell$ST.y)] <- 0
#  make a "difference" data.frame
DiffDeff <- data.frame(x = ifelse(is.na(DeffbyCell$x.x), DeffbyCell$x.y, DeffbyCell$x.x),
y = ifelse(is.na(DeffbyCell$y.x), DeffbyCell$y.y, DeffbyCell$y.x),
PPS= DeffbyCell$PPS.y - DeffbyCell$PPS.x,
cid= DeffbyCell$cid,
ST = DeffbyCell$ST.y)
DiffOff <- data.frame(x = ifelse(is.na(OffByCell$x.x), OffByCell$x.y, OffByCell$x.x),
y = ifelse(is.na(OffByCell$y.x), OffByCell$y.y, OffByCell$y.x),
PPS= OffByCell$PPS.y - OffByCell$PPS.x,
ST = OffByCell$ST.x,
cid = OffByCell$cid,
ST = OffByCell$ST.y)
#make team comparisons
Comparison <- merge(DiffOff, DiffDeff, by = "cid", all = T)
Comparison <- Comparison[,-c(6:7)]
Comparison$Diff <- c(Comparison$PPS.x + Comparison$PPS.y)
PPSAA <- weighted.mean((Comparison$PPS.x + Comparison$PPS.y), Comparison$ST.x)
return(list(PPSAA = PPSAA))
}
if (past_games$Year == 2016) {
for(i in 1:NROW(past_games)) {
past_games$defAPPS[i] <- ComparisonPPS(OffTeam = past_games$Home[i], DefTown = past_games$Visitor, SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017)
}
}
past_games$Season
past_games$Season == 2016
past_games$Season == 2017
for(i in 1:NROW(past_games)) {
if (past_games$Season == 2017) {
past_games$defAPPS[i] <- ComparisonPPS(OffTeam = past_games$Home[i], DefTown = past_games$Visitor, SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017)
}else{
past_games$defAPPS[i] <- NA
}
}
View(past_games)
ComparisonPPS(OffTeam = past_games$Home[6174], DefTown = past_games$Visitor[6174], SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017)
ComparisonPPS(OffTeam = past_games$Home[6174], DefTown = past_games$Visitor[6174], SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017)
past_games$Home[6174]
past_games$Home
ComparisonPPS(OffTeam = past_games$Home[6160], DefTown = past_games$Visitor[6160], SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017)
shotDataTotal2017<- readRDS("shotDataTotal2017.rds")
shotDataTotal2017$GAME_DATE <- lubridate::ymd(shotDataTotal2017$GAME_DATE)
saveRDS(shotDataTotal2017, "shotDataTotal2017.rds")
shotDatafDef2017 <- readRDS("shotDatafDef2017.rds")
for (i in 1:length(names(shotDatafDef2017))) {
shotDatafDef2017[[i]]$GAME_DATE <- lubridate::ymd(shotDatafDef2017[[i]]$GAME_DATE)
}
shotDataTotal2017
ComparisonPPS(OffTeam = past_games$Home[6160], DefTown = past_games$Visitor[6160], SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017)
shotDataTotal2017$HTM
ComparisonPPS(OffTeam = past_games$Home[6160], DefTown = past_games$Visitor[6160], SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017)
shotDataTotal2017$TEAM_NAME
past_games$Home[6160]
shotDataTotal2017$TEAM_NAME == "Sas"
sum(shotDataTotal2017$TEAM_NAME == "Sas")
ComparisonPPS(OffTeam = past_games$Home[6160], DefTown = past_games$Visitor[6160], SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017)
ComparisonPPS(OffTeam = past_games$Home[6000], DefTown = past_games$Visitor[6000], SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017)
ComparisonPPS(OffTeam = "Min", DefTown = "Lal", SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017)
pacman::p_load(rjson, grid, gridExtra, png, RCurl, ggplot2, jpeg, hexbin, sp, knitr, raster, rasterVis, dplyr)
ComparisonPPS <- function(OffTeam, DefTown, SeasondataOff, SeasonDataDef, nbins = 40) {
#Filter the offensive data of the Offensive Team
Off <- filter(SeasondataOff, TEAM_NAME == OffTeam)
#Filter the Deffensive data of the Defensive team
deff <- SeasonDataDef[names(SeasonDataDef) == DefTown][[1]]
#Get the maximum and minumum values for x and y
xbnds <- range(c(SeasondataOff$LOC_X, deff$LOC_X))
ybnds <- range(c(SeasondataOff$LOC_Y, deff$LOC_Y))
#Make hexbin dataframes out of the teams
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
##Total NBA data
Totalhex <- makeHexData(SeasondataOff)
##Defensive team data
Defhex <- makeHexData(deff)
##Offensive team data
Offhex <- makeHexData(Off)
#Merge offensive and deffensive data with total data by Cell id
DeffbyCell <- merge(Totalhex, Defhex, by = "cid", all = T)
OffByCell <- merge(Totalhex, Offhex, by = "cid", all = T)
##  when calculating the difference empty cells should count as 0
DeffbyCell$PPS.x[is.na(DeffbyCell$PPS.x)] <- 0
DeffbyCell$PPS.y[is.na(DeffbyCell$PPS.y)] <- 0
DeffbyCell$ST.y[is.na(DeffbyCell$ST.y)] <- 0
OffByCell$PPS.x[is.na(OffByCell$PPS.x)] <- 0
OffByCell$PPS.y[is.na(OffByCell$PPS.y)] <- 0
OffByCell$ST.y[is.na(OffByCell$ST.y)] <- 0
#  make a "difference" data.frame
DiffDeff <- data.frame(x = ifelse(is.na(DeffbyCell$x.x), DeffbyCell$x.y, DeffbyCell$x.x),
y = ifelse(is.na(DeffbyCell$y.x), DeffbyCell$y.y, DeffbyCell$y.x),
PPS= DeffbyCell$PPS.y - DeffbyCell$PPS.x,
cid= DeffbyCell$cid,
ST = DeffbyCell$ST.y)
DiffOff <- data.frame(x = ifelse(is.na(OffByCell$x.x), OffByCell$x.y, OffByCell$x.x),
y = ifelse(is.na(OffByCell$y.x), OffByCell$y.y, OffByCell$y.x),
PPS= OffByCell$PPS.y - OffByCell$PPS.x,
ST = OffByCell$ST.x,
cid = OffByCell$cid,
ST = OffByCell$ST.y)
#make team comparisons
Comparison <- merge(DiffOff, DiffDeff, by = "cid", all = T)
Comparison <- Comparison[,-c(6:7)]
Comparison$Diff <- c(Comparison$PPS.x + Comparison$PPS.y)
PPSAA <- weighted.mean((Comparison$PPS.x + Comparison$PPS.y), Comparison$ST.x)
return(list(PPSAA = PPSAA))
}
ComparisonPPS(OffTeam = "Min", DefTown = "Lal", SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017)
for(i in 1:NROW(past_games)) {
if (past_games$Season == 2017) {
past_games$defAPPS[i] <- ComparisonPPS(OffTeam = past_games$Home[i], DefTown = past_games$Visitor, SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017)
}else{
past_games$defAPPS[i] <- NA
}
}
for(i in 1:NROW(past_games)) {
if (past_games$Season == 2017) {
past_games$defAPPS[i] <- ComparisonPPS(OffTeam = past_games$Home[i], DefTown = past_games$Visitor, SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017)
}else{
past_games$defAPPS[i] <- NA
}
}
View(past_games)
ComparisonPPS(OffTeam = past_games$Home[6000], DefTown = past_games$Visitor[6000], SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017)
for(i in 1:NROW(past_games)) {
if (past_games$Season == 2017) {
past_games$defAPPS[i] <- ComparisonPPS(OffTeam = past_games$Home[i], DefTown = past_games$Visitor[i], SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017)
}else{
past_games$defAPPS[i] <- NA
}
}
past_games$defAPPS
summary(past_games$defAPPS)
for(i in 1:NROW(past_games)) {
if (past_games$Season == 2017) {
a <- ComparisonPPS(OffTeam = past_games$Home[i], DefTown = past_games$Visitor[i], SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017)
print(a)
}else{
past_games$defAPPS[i] <- NA
}
}
for(i in 1:NROW(past_games)) {
if (past_games$Season[i] == 2017) {
past_games$defAPPS[i] <- ComparisonPPS(OffTeam = past_games$Home[i], DefTown = past_games$Visitor[i], SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017)
}else{
past_games$defAPPS[i] <- NA
}
}
View(past_games)
shotDataTotal2017$GAME_DATE
dplyr::filter(shotDataTotal2017, GAME_DATE < dmy("10-11-2016"))
dplyr::filter(shotDataTotal2017, GAME_DATE < past_games$Date[[6000]])
dplyr::filter(shotDataTotal2017, GAME_DATE < past_games$Date[6000])
for(i in 1:NROW(past_games)) {
if (past_games$Season[i] == 2017) {
past_games$defAPPS[i] <- ComparisonPPS(OffTeam = past_games$Home[i], DefTown = past_games$Visitor[i], SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < past_games$Date[i]), SeasonDataDef = shotDatafDef2017)
}else{
past_games$defAPPS[i] <- NA
}
}
warnings
warnings()
str(shotDatafDef2017)
shotDatafDef2017$pastgames$Home[6000]
pastgames$Home[6000]
past_games$Home[6000]
shotDatafDef2017[[past_games$Home[6000]]]
for(i in 1:NROW(past_games)) {
if (past_games$Season[i] == 2017) {
shotDatafDef2017Temp <- shotDatafDef2017
shotDatafDef2017Temp[[past_games$Home[i]]] <- dplyr::filter(shotDatafDef2017[[past_games$Home[i]]] < past_games$Date[i])
past_games$defAPPS[i] <- ComparisonPPS(OffTeam = past_games$Home[i], DefTown = past_games$Visitor[i], SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < past_games$Date[i]), SeasonDataDef = shotDatafDef2017)
}else{
past_games$defAPPS[i] <- NA
}
}
shotDatafDef2017Temp <- shotDatafDef2017
shotDatafDef2017Temp[[past_games$Home[6000]]] <- dplyr::filter(shotDatafDef2017[[past_games$Home[6000]]] < past_games$Date[6000])
past_games$Date[6000]
shotDatafDef2017[[past_games$Home[6000]]]
shotDatafDef2017[[past_games$Home[6000]]]$GAME_DATE
for(i in 1:NROW(past_games)) {
if (past_games$Season[i] == 2017) {
shotDatafDef2017Temp <- shotDatafDef2017
shotDatafDef2017Temp[[past_games$Home[i]]] <- dplyr::filter(shotDatafDef2017[[past_games$Home[i]]]$GAME_DATE[i] < past_games$Date[i])
past_games$defAPPS[i] <- ComparisonPPS(OffTeam = past_games$Home[i], DefTown = past_games$Visitor[i], SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < past_games$Date[i]), SeasonDataDef = shotDatafDef2017Temp)
}else{
past_games$defAPPS[i] <- NA
}
}
shotDatafDef2017Temp[[past_games$Home[6000]]]
dplyr::filter(shotDatafDef2017[[past_games$Home[6000]]]$GAME_DATE < past_games$Date[6000])
past_games$Date[6000]
shotDatafDef2017[[past_games$Home[6000]]]$GAME_DATE
dplyr::filter(shotDatafDef2017[[past_games$Home[6000]]], GAME_DATE < past_games$Date[6000])
for(i in 1:NROW(past_games)) {
if (past_games$Season[i] == 2017) {
shotDatafDef2017Temp <- shotDatafDef2017
shotDatafDef2017Temp[[past_games$Home[i]]] <- dplyr::filter(shotDatafDef2017[[past_games$Home[i]]], GAME_DATE < past_games$Date[i])
past_games$defAPPS[i] <- ComparisonPPS(OffTeam = past_games$Home[i], DefTown = past_games$Visitor[i], SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < past_games$Date[i]), SeasonDataDef = shotDatafDef2017Temp)
}else{
past_games$defAPPS[i] <- NA
}
}
View(past_games)
shotDatafDef2017Temp <- shotDatafDef2017
shotDatafDef2017Temp[[past_games$Home[6024]]] <- dplyr::filter(shotDatafDef2017[[past_games$Home[6024]]], GAME_DATE < past_games$Date[6024])
ComparisonPPS(OffTeam = past_games$Home[6024], DefTown = past_games$Visitor[6024], SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < past_games$Date[6024]), SeasonDataDef = shotDatafDef2017Temp)
past_games$Home[6024]
shotDatafDef2017Temp[[past_games$Home[6024]]]
dplyr::filter(shotDatafDef2017[[past_games$Home[6024]]], GAME_DATE < past_games$Date[6024])
past_games$Home[6024]
past_games$Visitor[6024]
past_games$Date[6024]
shotDataTotal2017$GAME_DATE
dplyr::filter(shotDataTotal2017, GAME_DATE < past_games$Date[6024])
a <-dplyr::filter(shotDataTotal2017, GAME_DATE < past_games$Date[6024])
a
NCOL(a)
a <-dplyr::filter(shotDataTotal2017, GAME_DATE < past_games$Date[6024])
NROW(a)
NROW(shotDataTotal2017)
shotDatafDef2017Temp <- shotDatafDef2017
shotDatafDef2017Temp[[past_games$Home[6024]]] <- dplyr::filter(shotDatafDef2017[[past_games$Home[6024]]], GAME_DATE < past_games$Date[6024])
NROW(shotDatafDef2017$Atl)
NROW(shotDatafDef2017Temp$Atl)
shotDatafDef2017Temp[[past_games$Home[6024]]] <- dplyr::filter(shotDatafDef2017[[past_games$Home[6024]]], GAME_DATE < past_games$Date[6024])
NROW(shotDatafDef2017Temp$Atl)
NROW(shotDatafDef2017Temp$Atl)
shotDatafDef2017Temp <- shotDatafDef2017
NROW(shotDatafDef2017$Atl)
shotDatafDef2017Temp[[past_games$Home[6024]]] <- dplyr::filter(shotDatafDef2017[[past_games$Home[6024]]], GAME_DATE < past_games$Date[6024])
past_games$Home[6024]]
past_games$Home[6024]
NROW(shotDatafDef2017$Den)
NROW(shotDatafDef2017Temp$Den)
shotDatafDef2017Temp[[past_games$Home[6024]]] <- dplyr::filter(shotDatafDef2017[[past_games$Home[6024]]], GAME_DATE < past_games$Date[6024])
past_games$Visitor[6024]
ComparisonPPS(OffTeam = "Den", DefTown = "Was", SeasondataOff = a, SeasonDataDef = shotDatafDef2017Temp)
for(i in 1:NROW(past_games)) {
if (past_games$Season[i] == 2017) {
shotDatafDef2017Temp <- shotDatafDef2017
shotDatafDef2017Temp[[past_games$Home[i]]] <- dplyr::filter(shotDatafDef2017[[past_games$Home[i]]], GAME_DATE < past_games$Date[i])
past_games$defAPPS[i] <- ComparisonPPS(OffTeam = past_games$Home[i], DefTown = past_games$Visitor[i], SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < past_games$Date[i]), SeasonDataDef = shotDatafDef2017Temp)
}else{
past_games$defAPPS[i] <- NA
}
}
pacman::p_load(rjson, grid, gridExtra, png, RCurl, ggplot2, jpeg, hexbin, sp, knitr, raster, rasterVis, dplyr)
ComparisonPPS <- function(OffTeam, DefTown, SeasondataOff, SeasonDataDef, nbins = 40) {
#Filter the offensive data of the Offensive Team
Off <- filter(SeasondataOff, TEAM_NAME == OffTeam)
#Filter the Deffensive data of the Defensive team
deff <- SeasonDataDef[names(SeasonDataDef) == DefTown][[1]]
#Get the maximum and minumum values for x and y
xbnds <- range(c(SeasondataOff$LOC_X, deff$LOC_X))
ybnds <- range(c(SeasondataOff$LOC_Y, deff$LOC_Y))
#Make hexbin dataframes out of the teams
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
##Total NBA data
Totalhex <- makeHexData(SeasondataOff)
##Defensive team data
Defhex <- makeHexData(deff)
##Offensive team data
Offhex <- makeHexData(Off)
#Merge offensive and deffensive data with total data by Cell id
DeffbyCell <- merge(Totalhex, Defhex, by = "cid", all = T)
OffByCell <- merge(Totalhex, Offhex, by = "cid", all = T)
##  when calculating the difference empty cells should count as 0
DeffbyCell$PPS.x[is.na(DeffbyCell$PPS.x)] <- 0
DeffbyCell$PPS.y[is.na(DeffbyCell$PPS.y)] <- 0
DeffbyCell$ST.y[is.na(DeffbyCell$ST.y)] <- 0
OffByCell$PPS.x[is.na(OffByCell$PPS.x)] <- 0
OffByCell$PPS.y[is.na(OffByCell$PPS.y)] <- 0
OffByCell$ST.y[is.na(OffByCell$ST.y)] <- 0
#  make a "difference" data.frame
DiffDeff <- data.frame(x = ifelse(is.na(DeffbyCell$x.x), DeffbyCell$x.y, DeffbyCell$x.x),
y = ifelse(is.na(DeffbyCell$y.x), DeffbyCell$y.y, DeffbyCell$y.x),
PPS= DeffbyCell$PPS.y - DeffbyCell$PPS.x,
cid= DeffbyCell$cid,
ST = DeffbyCell$ST.y)
DiffOff <- data.frame(x = ifelse(is.na(OffByCell$x.x), OffByCell$x.y, OffByCell$x.x),
y = ifelse(is.na(OffByCell$y.x), OffByCell$y.y, OffByCell$y.x),
PPS= OffByCell$PPS.y - OffByCell$PPS.x,
ST = OffByCell$ST.x,
cid = OffByCell$cid,
ST = OffByCell$ST.y)
#make team comparisons
Comparison <- merge(DiffOff, DiffDeff, by = "cid", all = T)
Comparison <- Comparison[,-c(6:7)]
Comparison$Diff <- c(Comparison$PPS.x + Comparison$PPS.y)
PPSAA <- weighted.mean((Comparison$PPS.x + Comparison$PPS.y), Comparison$ST.x, na.rm = TRUE)
return(list(PPSAA = PPSAA))
}
ComparisonPPS(OffTeam = past_games$Home[6024], DefTown = past_games$Visitor[6024], SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < past_games$Date[6024]), SeasonDataDef = shotDatafDef2017Temp)
ComparisonPPS(OffTeam = past_games$Home[6024], DefTown = past_games$Visitor[6024], SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < past_games$Date[6024]), SeasonDataDef = shotDatafDef2017Temp)
#######
for(i in 1:NROW(past_games)) {
if (past_games$Season[i] == 2017) {
shotDatafDef2017Temp <- shotDatafDef2017
shotDatafDef2017Temp[[past_games$Home[i]]] <- dplyr::filter(shotDatafDef2017[[past_games$Home[i]]], GAME_DATE < past_games$Date[i])
past_games$defAPPS[i] <- ComparisonPPS(OffTeam = past_games$Home[i], DefTown = past_games$Visitor[i], SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < past_games$Date[i]), SeasonDataDef = shotDatafDef2017Temp)
}else{
past_games$defAPPS[i] <- NA
}
}
NROW(past_games)
DF <- data.frame(day = rep(NA, times = NROW(past_games)), defAPPS = rep(NA, times = NROW(past_games)))
DF <- data.frame(day = rep(NA, times = NROW(past_games)), defAPPS = rep(NA, times = NROW(past_games)))
DF <- data.frame(day = rep(NA, times = NROW(past_games)), defAPPS = rep(NA, times = NROW(past_games)))
#######
for(i in 1:NROW(past_games)) {
if (past_games$Season[i] == 2017) {
shotDatafDef2017Temp <- shotDatafDef2017
shotDatafDef2017Temp[[past_games$Home[i]]] <- dplyr::filter(shotDatafDef2017[[past_games$Home[i]]], GAME_DATE < past_games$Date[i])
past_games$defAPPS[i] <- ComparisonPPS(OffTeam = past_games$Home[i], DefTown = past_games$Visitor[i], SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < past_games$Date[i]), SeasonDataDef = shotDatafDef2017Temp)
DF$day[i] <- i
shotDatafDef2017Temp[["Cle"]] <- dplyr::filter(shotDatafDef2017Temp[["Cle"]], GAME_DATE < past_games$Date[i])
DF$defAPPS[i] <- ComparisonPPS(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < past_games$Date[i]), SeasonDataDef = shotDatafDef2017Temp)
}else{
past_games$defAPPS[i] <- NA
}
}
shotDatafDef2017Temp[["Cle"]] <- dplyr::filter(shotDatafDef2017Temp[["Cle"]], GAME_DATE < past_games$Date[6000])
ComparisonPPS(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < past_games$Date[6000]), SeasonDataDef = shotDatafDef2017Temp)
View(DF)
#######
for(i in 1:NROW(past_games)) {
if (past_games$Season[i] == 2017) {
shotDatafDef2017Temp <- shotDatafDef2017
shotDatafDef2017Temp[[past_games$Home[i]]] <- dplyr::filter(shotDatafDef2017[[past_games$Home[i]]], GAME_DATE < past_games$Date[i])
past_games$defAPPS[i] <- ComparisonPPS(OffTeam = past_games$Home[i], DefTown = past_games$Visitor[i], SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < past_games$Date[i]), SeasonDataDef = shotDatafDef2017Temp)
DF$day[i] <- i
#shotDatafDef2017Temp[["Cle"]] <- dplyr::filter(shotDatafDef2017Temp[["Cle"]], GAME_DATE < past_games$Date[i])
#DF$defAPPS[i] <- ComparisonPPS(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < past_games$Date[i]), SeasonDataDef = shotDatafDef2017Temp)
}else{
past_games$defAPPS[i] <- NA
}
}
length(unique(past_games$Date))
DF <- data.frame(day = rep(NA, times =length(unique(past_games$Date))), defAPPS = rep(NA, times = length(unique(past_games$Date))))
unique(past_games$Date)
unique(past_games$Date)
dates2017 <- dplyr::filter(unique(past_games$Date) <= Sys.Date())
dates2017 <- unique(past_games$Date)[unique(past_games$Date) <= Sys.Date())]
dates2017 <- unique(past_games$Date)[unique(past_games$Date) <= Sys.Date()]
dates2017
dates2017
dates2017 <- unique(past_games$Date)[unique(past_games$Date) >= dmy("25-10-2016")]
dates2017 <- unique(past_games$Date)[unique(past_games$Date) >= dmy("25-10-2016")]
dates2017
DF <- data.frame(day = rep(NA, times =length(dates2017)), defAPPS = rep(NA, times = length(dates2017)))
shotDatafDef2017Temp[["Cle"]]
DF <- data.frame(day = rep(NA, times =length(dates2017)), defAPPS = rep(NA, times = length(dates2017)))
for(i in 1:length(dates2017)) {
shotDatafDef2017Temp <- shotDatafDef2017
DF$day[i] <- i
shotDatafDef2017Temp[["Cle"]] <- dplyr::filter(shotDatafDef2017Temp[["Cle"]], GAME_DATE < dates2017[i])
DF$defAPPS[i] <- ComparisonPPS(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < dates2017[i]), SeasonDataDef = shotDatafDef2017Temp)
}
DF <- data.frame(day = rep(NA, times =length(dates2017)), defAPPS = rep(NA, times = length(dates2017)))
DF
1:length(dates2017)
DF <- data.frame(day = rep(NA, times =length(dates2017)), defAPPS = rep(NA, times = length(dates2017)))
for(i in 1:length(dates2017)) {
shotDatafDef2017Temp <- shotDatafDef2017
DF$day[i] <- i
#shotDatafDef2017Temp[["Cle"]] <- dplyr::filter(shotDatafDef2017Temp[["Cle"]], GAME_DATE < dates2017[i])
#DF$defAPPS[i] <- ComparisonPPS(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < dates2017[i]), SeasonDataDef = shotDatafDef2017Temp)
}
DF
dates2017[20]
GAME_DATE < dates2017[20]
dplyr::filter(shotDatafDef2017Temp[["Cle"]], GAME_DATE < dates2017[20]
dplyr::filter(shotDatafDef2017Temp[["Cle"]], GAME_DATE < dates2017[20]
shotDatafDef2017Temp[["Cle"]]
colnames(shotDatafDef2017Temp[["Cle"]])
shotDatafDef2017Temp[["Cle"]]$GAME_DATE
dates2017[20]
dplyr::filter(shotDatafDef2017Temp[["Cle"]], GAME_DATE < dates2017[20])
shotDatafDef2017Temp[["Cle"]] <- dplyr::filter(shotDatafDef2017Temp[["Cle"]], GAME_DATE < dates2017[20])
shotDatafDef2017Temp[["Cle"]]
shotDatafDef2017Temp <- shotDatafDef2017
shotDatafDef2017Temp[["Cle"]]
NROW(shotDatafDef2017Temp[["Cle"]])
shotDatafDef2017Temp[["Cle"]] <- dplyr::filter(shotDatafDef2017Temp[["Cle"]], GAME_DATE < dates2017[20])
NROW(shotDatafDef2017Temp[["Cle"]])
DF <- data.frame(day = rep(NA, times =length(dates2017)), defAPPS = rep(NA, times = length(dates2017)))
for(i in 1:length(dates2017)) {
shotDatafDef2017Temp <- shotDatafDef2017
DF$day[i] <- i
shotDatafDef2017Temp[["Cle"]] <- dplyr::filter(shotDatafDef2017Temp[["Cle"]], GAME_DATE < dates2017[i])
#DF$defAPPS[i] <- ComparisonPPS(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < dates2017[i]), SeasonDataDef = shotDatafDef2017Temp)
}
for(i in 1:length(dates2017)) {
shotDatafDef2017Temp <- shotDatafDef2017
DF$day[i] <- i
shotDatafDef2017Temp[["Cle"]] <- dplyr::filter(shotDatafDef2017Temp[["Cle"]], GAME_DATE < dates2017[i])
DF$defAPPS[i] <- ComparisonPPS(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < dates2017[i]), SeasonDataDef = shotDatafDef2017Temp)
}
DF <- data.frame(day = rep(NA, times =length(dates2017)), defAPPS = rep(NA, times = length(dates2017)))
for(i in 1:length(dates2017)) {
shotDatafDef2017Temp <- shotDatafDef2017
DF$day[i] <- i
print(i)
shotDatafDef2017Temp[["Cle"]] <- dplyr::filter(shotDatafDef2017Temp[["Cle"]], GAME_DATE < dates2017[i])
DF$defAPPS[i] <- ComparisonPPS(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < dates2017[i]), SeasonDataDef = shotDatafDef2017Temp)
}
DF <- data.frame(day = rep(NA, times =length(dates2017)), defAPPS = rep(NA, times = length(dates2017)))
for(i in 10:length(dates2017)) {
shotDatafDef2017Temp <- shotDatafDef2017
DF$day[i] <- i
print(i)
shotDatafDef2017Temp[["Cle"]] <- dplyr::filter(shotDatafDef2017Temp[["Cle"]], GAME_DATE < dates2017[i])
DF$defAPPS[i] <- ComparisonPPS(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < dates2017[i]), SeasonDataDef = shotDatafDef2017Temp)
}
View(DF)
ggplot
ggplot(DF, aes(x = day, y = defAPPS)) + geom_line()
ggplot(DF, aes(x = day, y = defAPPS))
ggplot(DF, aes(x = day, y = defAPPS))+ geom_point()
class(DF)
str(DF)
DF <- data.frame(day = rep(NA, times =length(dates2017)), defAPPS = rep(NA, times = length(dates2017)))
for(i in 10:length(dates2017)) {
shotDatafDef2017Temp <- shotDatafDef2017
DF$day[i] <- i
print(i)
shotDatafDef2017Temp[["Cle"]] <- dplyr::filter(shotDatafDef2017Temp[["Cle"]], GAME_DATE < dates2017[i])
DF[i,2] <- ComparisonPPS(OffTeam = "GSW", DefTown = "Cle", SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < dates2017[i]), SeasonDataDef = shotDatafDef2017Temp)
}
str(DF)
ggplot(DF, aes(x = day, y = defAPPS))+ geom_point()
ggplot(DF, aes(x = day, y = defAPPS))+ geom_line()+ geom_point()
past_games
View(past_games)
?diff
diff(DF$defAPPS)
abs(diff(DF$defAPPS))
plot(DF$day,abs(diff(DF$defAPPS)))
abs(diff(DF$defAPPS)
)
DF$day
plot(abs(diff(DF$defAPPS)))
DF$Diff <- abs(diff(DF$defAPPS))
DF$Diff <- c(NA, abs(diff(DF$defAPPS)))
str(DF)
ggplot(DF, aes(x = diff, y = defAPPS))+ geom_line()+ geom_point()
ggplot(DF, aes(x = Diff, y = defAPPS))+ geom_line()+ geom_point()
ggplot(DF, aes(x = day, y = Diff))+ geom_line()+ geom_point()
ggplot(DF, aes(x = day, y = defAPPS))+ geom_line()+ geom_point()
shotDataTotal2016<- readRDS("shotDataTotal2016.rds")
shotDataTotal2016$GAME_DATE <- lubridate::ymd(shotDataTotal2016$GAME_DATE)
saveRDS(shotDataTotal2016, "shotDataTotal2016.rds")
shotDatafDef2016 <- readRDS("shotDatafDef2016.rds")
for (i in 1:length(names(shotDatafDef2016))) {
shotDatafDef2016[[i]]$GAME_DATE <- lubridate::ymd(shotDatafDef2016[[i]]$GAME_DATE)
}
saveRDS(shotDatafDef2016, "shotDatafDef2016.rds")
