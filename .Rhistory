Totalhex <- makeHexData(dataOff)
#Function to transform hexbins into polygons
hex_coord_df <- function(x, y, width, height, size = 1) {
# like hex_coord but returns a dataframe of vertices grouped by an id variable
dx <- log(size * width / 6)
dy <- log(size * height / 2 / sqrt(3))
hex_x <- rbind(x - 2 * dx, x - dx, x + dx, x + 2 * dx, x + dx, x - dx)
hex_y <- rbind(y, y + dy, y + dy, y, y - dy, y - dy)
id    <- rep(1:length(x), each=6)
data.frame(cbind(x=as.vector(hex_x), y=as.vector(hex_y), id))
}
#Transform Hexbins into polygons
Totalhex <- filter(Totalhex, ST > quantile(Totalhex$ST, probs = quant))
Total <- hex_coord_df(Totalhex$x, Totalhex$y, (0.05*Totalhex$ST), (0.05*Totalhex$ST), size =1)
Total$PPS <- rep(Totalhex$PPS, each = 6)
#Make Graph
GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(midpoint = median(1.0), low = "blue", high = "red", limits=c(0.3, 2.1)) +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold"))+ scale_size(range = c(0, maxsize)) + ylim(c(-40, 270))+ theme(legend.position="bottom")
if(type == "PPS"){
GRAPH <- GRAPH +  ggtitle(paste("Points per Shot of", team, sep =" "))
}  else {GRAPH <- GRAPH +  ggtitle("Shooting percentage")}
return(GRAPH)
}
a <- OffShotSeasonGraphTeam(shotDataTotal2017, team = "GSW",quant = 0.75)
b <- OffShotSeasonGraphTeam(shotDataTotal2017, team = "Hou",quant = 0.75)
c <- OffShotSeasonGraphTeam(shotDataTotal2017, team = "Phi",quant = 0.75)
d <- OffShotSeasonGraphTeam(shotDataTotal2017, team = "ORL",quant = 0.75)
library(gridExtra)
grid.arrange(a,b,c,d, ncol = 2)
a <- OffShotSeasonGraphTeam(shotDataTotal2017, team = "GSW",quant = 0.7)
b <- OffShotSeasonGraphTeam(shotDataTotal2017, team = "Hou",quant = 0.7)
c <- OffShotSeasonGraphTeam(shotDataTotal2017, team = "Phi",quant = 0.7)
d <- OffShotSeasonGraphTeam(shotDataTotal2017, team = "ORL",quant = 0.7)
library(gridExtra)
grid.arrange(a,b,c,d, ncol = 2)
a <- OffShotSeasonGraphTeam(shotDataTotal2017, team = "GSW",quant = 0.7)
b <- OffShotSeasonGraphTeam(shotDataTotal2017, team = "Hou",quant = 0.7)
c <- OffShotSeasonGraphTeam(shotDataTotal2017, team = "Phi",quant = 0.7)
d <- OffShotSeasonGraphTeam(shotDataTotal2017, team = "ORL",quant = 0.7)
library(gridExtra)
grid.arrange(a,b,c,d, ncol = 2)
library(rjson)
library(grid)
library(gridExtra)
library(png)
library(RCurl)
library(ggplot2)
library(jpeg)
library(hexbin)
library(sp)
library(knitr)
library(raster)
library(rasterVis)
library(dplyr)
#function to make the hexbin dataframe
#shot Comparison function
shotDataTotal2013 <- readRDS("shotDataTotal2013.rds")
shotDataTotal2017 <- readRDS("shotDataTotal2017.rds")
court <- readRDS("court.rds")
SeasondataOff <- shotDataTotal2017
ShotSeasonGraph <- function(SeasondataOff, nbins = 30, maxsize = 7, quant = 0.7, type = "PPS") {
#Get the maximum and minumum values for x and y
xbnds <- range(SeasondataOff$LOC_X)
ybnds <- range(SeasondataOff$LOC_Y)
#Make hexbin dataframes out of the teams
if (type == "PPS"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
if (type == "PCT"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG)), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
##Total NBA data
Totalhex <- makeHexData(SeasondataOff)
#Function to transform hexbins into polygons
hex_coord_df <- function(x, y, width, height, size = 1) {
# like hex_coord but returns a dataframe of vertices grouped by an id variable
dx <- log(size * width / 6)
dy <- log(size * height / 2 / sqrt(3))
hex_x <- rbind(x - 2 * dx, x - dx, x + dx, x + 2 * dx, x + dx, x - dx)
hex_y <- rbind(y, y + dy, y + dy, y, y - dy, y - dy)
id    <- rep(1:length(x), each=6)
data.frame(cbind(x=as.vector(hex_x), y=as.vector(hex_y), id))
}
#Transform Hexbins into polygons
Totalhex <- filter(Totalhex, ST > quantile(Totalhex$ST, probs = quant))
Total <- hex_coord_df(Totalhex$x, Totalhex$y, (0.05*Totalhex$ST), (0.05*Totalhex$ST), size =1)
Total$PPS <- rep(Totalhex$PPS, each = 6)
#Make Graph
GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(midpoint = median(Total$PPS), low = "blue", high = "red") +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold"))+ scale_size(range = c(0, maxsize)) + ylim(c(-40, 270))+ theme(legend.position="bottom")
if(type == "PPS"){
GRAPH <- GRAPH +  ggtitle("Points per Shot")
}  else {GRAPH <- GRAPH +  ggtitle("Shooting percentage")}
return(GRAPH)
}
ShotSeasonGraph(shotDataTotal2017, quant = 0.75)
ShotSeasonGraph(shotDataTotal2017, quant = 0.75, type = "PCT")
OffShotSeasonGraphTeam <- function(SeasondataOff, team, nbins = 30, maxsize = 7, quant = 0.7, type = "PPS") {
dataOff <- dplyr::filter(SeasondataOff, TEAM_NAME == team)
#Get the maximum and minumum values for x and y
xbnds <- range(dataOff$LOC_X)
ybnds <- range(dataOff$LOC_Y)
#Make hexbin dataframes out of the teams
if (type == "PPS"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
if (type == "PCT"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG)), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
##Total NBA data
Totalhex <- makeHexData(dataOff)
#Function to transform hexbins into polygons
hex_coord_df <- function(x, y, width, height, size = 1) {
# like hex_coord but returns a dataframe of vertices grouped by an id variable
dx <- log(size * width / 6)
dy <- log(size * height / 2 / sqrt(3))
hex_x <- rbind(x - 2 * dx, x - dx, x + dx, x + 2 * dx, x + dx, x - dx)
hex_y <- rbind(y, y + dy, y + dy, y, y - dy, y - dy)
id    <- rep(1:length(x), each=6)
data.frame(cbind(x=as.vector(hex_x), y=as.vector(hex_y), id))
}
#Transform Hexbins into polygons
Totalhex <- filter(Totalhex, ST > quantile(Totalhex$ST, probs = quant))
Total <- hex_coord_df(Totalhex$x, Totalhex$y, (0.05*Totalhex$ST), (0.05*Totalhex$ST), size =1)
Total$PPS <- rep(Totalhex$PPS, each = 6)
#Make Graph
GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(midpoint = median(1.0), low = "blue", high = "red", limits=c(0.3, 2.1)) +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold"))+ scale_size(range = c(0, maxsize)) + ylim(c(-40, 270))+ theme(legend.position="bottom")
if(type == "PPS"){
GRAPH <- GRAPH +  ggtitle(paste("Points per Shot of", team, sep =" "))
}  else {GRAPH <- GRAPH +  ggtitle("Shooting percentage")}
return(GRAPH)
}
a <- OffShotSeasonGraphTeam(shotDataTotal2017, team = "GSW",quant = 0.7)
b <- OffShotSeasonGraphTeam(shotDataTotal2017, team = "Hou",quant = 0.7)
c <- OffShotSeasonGraphTeam(shotDataTotal2017, team = "Phi",quant = 0.7)
d <- OffShotSeasonGraphTeam(shotDataTotal2017, team = "ORL",quant = 0.7)
library(gridExtra)
grid.arrange(a,b,c,d, ncol = 2)
grid.arrange(b,d, ncol = 2)
source('~/Documents/Sloan/WordPress.R')
shotDataTotal2017<- readRDS("shotDataTotal2017.rds")
shotDataTotal2017$GAME_DATE <- ymd(shotDataTotal2017$GAME_DATE)
saveRDS(shotDataTotal2017, "shotDataTotal2017.rds")
shotDatafDef2017 <- readRDS("shotDatafDef2017.rds")
for (i in 1:length(shotDatafDef2017)){
shotDatafDef2017[[i]]$GAME_DATE <- ymd(shotDatafDef2017[[i]]$GAME_DATE)
}
saveRDS(shotDatafDef2017, "shotDatafDef2017.rds")
shotDataTotal2013<- readRDS("shotDataTotal2013.rds")
shotDatafDef2013 <- readRDS("shotDatafDef2013.rds")
for (i in 1:length(names(shotDatafDef2013))) {
shotDatafDef2013[[i]]$GAME_DATE <- lubridate::ymd(shotDatafDef2013[[i]]$GAME_DATE)
}
saveRDS(shotDatafDef2013, "shotDatafDef2013.rds")
for(i in 10:length(dates2016)) {
shotDatafDef2016Temp <- shotDatafDef2016
DF2016$day[i] <- i
print(i)
shotDatafDef2016Temp[["Cle"]] <- dplyr::filter(shotDatafDef2016Temp[["Cle"]], GAME_DATE < dates2016[i])
DF2016[i,3] <- ComparisonPPS(OffTeam = "Sas", DefTown = "Uta", SeasondataOff = dplyr::filter(shotDataTotal2016, GAME_DATE < dates2016[i]), SeasonDataDef = shotDatafDef2016Temp)
}
dates2016 <- unique(past_games$Date)[unique(past_games$Date) >= dmy("27-10-2015") & unique(past_games$Date) <= dmy("13-04-2016")]
DF2016 <- data.frame(Season = rep(2016, times =length(dates2016)), day = rep(NA, times =length(dates2016)), defAPPS = rep(NA, times = length(dates2016)), dates = dates2016)
for(i in 10:length(dates2016)) {
shotDatafDef2016Temp <- shotDatafDef2016
DF2016$day[i] <- i
print(i)
shotDatafDef2016Temp[["Cle"]] <- dplyr::filter(shotDatafDef2016Temp[["Cle"]], GAME_DATE < dates2016[i])
DF2016[i,3] <- ComparisonPPS(OffTeam = "Sas", DefTown = "Uta", SeasondataOff = dplyr::filter(shotDataTotal2016, GAME_DATE < dates2016[i]), SeasonDataDef = shotDatafDef2016Temp)
}
past_games <- readRDS("past_games.rds")
dates2017 <- unique(past_games$Date)[unique(past_games$Date) >= dmy("25-10-2016")]
dates2017 <- unique(past_games$Date)[unique(past_games$Date) >= dmy("25-10-2016")]
DF2017 <- data.frame(Season = rep(2017, times =length(dates2017)), day = rep(NA, times =length(dates2017)), defAPPS = rep(NA, times = length(dates2017)), dates = dates2017)
for(i in 10:length(dates2017)) {
shotDatafDef2017Temp <- shotDatafDef2017
DF2017$day[i] <- i
print(i)
shotDatafDef2017Temp[["Uta"]] <- dplyr::filter(shotDatafDef2017Temp[["Uta"]], GAME_DATE < dates2017[i])
DF2017[i,3] <- ComparisonPPS(OffTeam = "Sas", DefTown = "Uta", SeasondataOff = dplyr::filter(shotDataTotal2017, GAME_DATE < dates2017[i]), SeasonDataDef = shotDatafDef2017Temp)
}
DF2017 <- DF2017[complete.cases(DF2017),]
pairs(DF2017)
library(rjson)
library(grid)
library(gridExtra)
library(png)
library(RCurl)
library(ggplot2)
library(jpeg)
library(hexbin)
library(sp)
library(knitr)
library(raster)
library(rasterVis)
library(dplyr)
shotDataTotal2017 <- readRDS("shotDataTotal2017.rds")
court <- readRDS("court.rds")
shotDataTotal2017 <- readRDS("shotDataTotal2017.rds")
court <- readRDS("court.rds")
colnaems(shotDataTotal2017)
colnames(shotDataTotal2017)
ggplot(shotDataTotal2017, aes(x = LOC_X, y= LOC_Y)) + geom_point()
shotDataTotal2017 <- readRDS("shotDataTotal2017.rds")
court <- readRDS("court.rds")
SeasondataOff <- shotDataTotal2017
ShotSeasonGraph <- function(SeasondataOff, nbins = 30, maxsize = 7, quant = 0.7, type = "PPS") {
SeasondataOff <- dplyr::filter(SeasondataOff, LOC_X < 272)
#Get the maximum and minumum values for x and y
xbnds <- range(SeasondataOff$LOC_X)
ybnds <- range(SeasondataOff$LOC_Y)
#Make hexbin dataframes out of the teams
if (type == "PPS"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
if (type == "PCT"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG)), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
##Total NBA data
Totalhex <- makeHexData(SeasondataOff)
#Function to transform hexbins into polygons
hex_coord_df <- function(x, y, width, height, size = 1) {
# like hex_coord but returns a dataframe of vertices grouped by an id variable
dx <- log(size * width / 6)
dy <- log(size * height / 2 / sqrt(3))
hex_x <- rbind(x - 2 * dx, x - dx, x + dx, x + 2 * dx, x + dx, x - dx)
hex_y <- rbind(y, y + dy, y + dy, y, y - dy, y - dy)
id    <- rep(1:length(x), each=6)
data.frame(cbind(x=as.vector(hex_x), y=as.vector(hex_y), id))
}
#Transform Hexbins into polygons
Totalhex <- filter(Totalhex, ST > quantile(Totalhex$ST, probs = quant))
Total <- hex_coord_df(Totalhex$x, Totalhex$y, (0.05*Totalhex$ST), (0.05*Totalhex$ST), size =1)
Total$PPS <- rep(Totalhex$PPS, each = 6)
#Make Graph
GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(midpoint = median(Total$PPS), low = "blue", high = "red") +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold"))+ scale_size(range = c(0, maxsize)) + ylim(c(-40, 270))+ theme(legend.position="bottom")
if(type == "PPS"){
GRAPH <- GRAPH +  ggtitle("Points per Shot")
}  else {GRAPH <- GRAPH +  ggtitle("Shooting percentage")}
return(GRAPH)
}
ShotSeasonGraph(shotDataTotal2017, quant = 0.75)
ShotSeasonGraph <- function(SeasondataOff, nbins = 30, maxsize = 7, quant = 0.7, type = "PPS", MAX_X = 270) {
SeasondataOff <- dplyr::filter(SeasondataOff, LOC_X < MAX_X)
#Get the maximum and minumum values for x and y
xbnds <- range(SeasondataOff$LOC_X)
ybnds <- range(SeasondataOff$LOC_Y)
#Make hexbin dataframes out of the teams
if (type == "PPS"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
if (type == "PCT"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG)), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
##Total NBA data
Totalhex <- makeHexData(SeasondataOff)
#Function to transform hexbins into polygons
hex_coord_df <- function(x, y, width, height, size = 1) {
# like hex_coord but returns a dataframe of vertices grouped by an id variable
dx <- log(size * width / 6)
dy <- log(size * height / 2 / sqrt(3))
hex_x <- rbind(x - 2 * dx, x - dx, x + dx, x + 2 * dx, x + dx, x - dx)
hex_y <- rbind(y, y + dy, y + dy, y, y - dy, y - dy)
id    <- rep(1:length(x), each=6)
data.frame(cbind(x=as.vector(hex_x), y=as.vector(hex_y), id))
}
#Transform Hexbins into polygons
Totalhex <- filter(Totalhex, ST > quantile(Totalhex$ST, probs = quant))
Total <- hex_coord_df(Totalhex$x, Totalhex$y, (0.05*Totalhex$ST), (0.05*Totalhex$ST), size =1)
Total$PPS <- rep(Totalhex$PPS, each = 6)
#Make Graph
GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(midpoint = median(Total$PPS), low = "blue", high = "red") +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold"))+ scale_size(range = c(0, maxsize)) + ylim(c(-40, 270))+ theme(legend.position="bottom")
if(type == "PPS"){
GRAPH <- GRAPH +  ggtitle("Points per Shot")
}  else {GRAPH <- GRAPH +  ggtitle("Shooting percentage")}
return(GRAPH)
}
max_x750 <- ShotSeasonGraph(shotDataTotal2017, quant = 0.75, MAX_X = 750)
max_x500 <- ShotSeasonGraph(shotDataTotal2017, quant = 0.75, MAX_X = 500)
max_x270 <- ShotSeasonGraph(shotDataTotal2017, quant = 0.75, MAX_X = 270)
library(gridExtra)
grid.arrange(max_x750,max_x500, max_x270, ncol = 3)
library(rjson)
library(grid)
library(gridExtra)
library(png)
library(RCurl)
library(ggplot2)
library(jpeg)
library(hexbin)
library(sp)
library(knitr)
library(raster)
library(rasterVis)
library(dplyr)
#function to make the hexbin dataframe
#shot Comparison function
shotDataTotal2017 <- readRDS("shotDataTotal2017.rds")
court <- readRDS("court.rds")
ShotSeasonGraph <- function(SeasondataOff, nbins = 30, maxsize = 7, quant = 0.7, type = "PPS", MAX_X = 270) {
SeasondataOff <- dplyr::filter(SeasondataOff, LOC_X < MAX_X)
#Get the maximum and minumum values for x and y
xbnds <- range(SeasondataOff$LOC_X)
ybnds <- range(SeasondataOff$LOC_Y)
#Make hexbin dataframes out of the teams
if (type == "PPS"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
if (type == "PCT"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG)), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
##Total NBA data
Totalhex <- makeHexData(SeasondataOff)
#Function to transform hexbins into polygons
hex_coord_df <- function(x, y, width, height, size = 1) {
# like hex_coord but returns a dataframe of vertices grouped by an id variable
dx <- log(size * width / 6)
dy <- log(size * height / 2 / sqrt(3))
hex_x <- rbind(x - 2 * dx, x - dx, x + dx, x + 2 * dx, x + dx, x - dx)
hex_y <- rbind(y, y + dy, y + dy, y, y - dy, y - dy)
id    <- rep(1:length(x), each=6)
data.frame(cbind(x=as.vector(hex_x), y=as.vector(hex_y), id))
}
#Transform Hexbins into polygons
Totalhex <- filter(Totalhex, ST > quantile(Totalhex$ST, probs = quant))
Total <- hex_coord_df(Totalhex$x, Totalhex$y, (0.05*Totalhex$ST), (0.05*Totalhex$ST), size =1)
Total$PPS <- rep(Totalhex$PPS, each = 6)
#Make Graph
GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(midpoint = median(Total$PPS), low = "blue", high = "red") +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold"))+ scale_size(range = c(0, maxsize)) + ylim(c(-40, 270))+ theme(legend.position="bottom")
if(type == "PPS"){
GRAPH <- GRAPH +  ggtitle("Points per Shot")
}  else {GRAPH <- GRAPH +  ggtitle("Shooting percentage")}
return(GRAPH)
}
max_x750 <- ShotSeasonGraph(shotDataTotal2017, quant = 0.75, MAX_X = 750, nbins = 30)
max_x500 <- ShotSeasonGraph(shotDataTotal2017, quant = 0.75, MAX_X = 500, nbins = 60)
max_x270 <- ShotSeasonGraph(shotDataTotal2017, quant = 0.75, MAX_X = 270, nbins = 90)
library(gridExtra)
grid.arrange(max_x750,max_x500, max_x270, ncol = 3)
ShotSeasonGraph(shotDataTotal2017, quant = 0.75, MAX_X = 500, nbins = 60, maxsize = 5)
ShotSeasonGraph(shotDataTotal2017, quant = 0.75, MAX_X = 500, nbins = 60, maxsize = 3)
ShotSeasonGraph(shotDataTotal2017, quant = 0.75, MAX_X = 200, nbins = 60, maxsize = 3)
ShotSeasonGraph(shotDataTotal2017, quant = 0.75, MAX_X = 100, nbins = 60, maxsize = 3)
ShotSeasonGraph <- function(SeasondataOff, nbins = 30, maxsize = 7, quant = 0.7, type = "PPS", MAX_Y = 270) {
SeasondataOff <- dplyr::filter(SeasondataOff, LOC_Y < MAX_Y)
#Get the maximum and minumum values for x and y
xbnds <- range(SeasondataOff$LOC_X)
ybnds <- range(SeasondataOff$LOC_Y)
#Make hexbin dataframes out of the teams
if (type == "PPS"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
if (type == "PCT"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG)), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
##Total NBA data
Totalhex <- makeHexData(SeasondataOff)
#Function to transform hexbins into polygons
hex_coord_df <- function(x, y, width, height, size = 1) {
# like hex_coord but returns a dataframe of vertices grouped by an id variable
dx <- log(size * width / 6)
dy <- log(size * height / 2 / sqrt(3))
hex_x <- rbind(x - 2 * dx, x - dx, x + dx, x + 2 * dx, x + dx, x - dx)
hex_y <- rbind(y, y + dy, y + dy, y, y - dy, y - dy)
id    <- rep(1:length(x), each=6)
data.frame(cbind(x=as.vector(hex_x), y=as.vector(hex_y), id))
}
#Transform Hexbins into polygons
Totalhex <- filter(Totalhex, ST > quantile(Totalhex$ST, probs = quant))
Total <- hex_coord_df(Totalhex$x, Totalhex$y, (0.05*Totalhex$ST), (0.05*Totalhex$ST), size =1)
Total$PPS <- rep(Totalhex$PPS, each = 6)
#Make Graph
GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(midpoint = median(Total$PPS), low = "blue", high = "red") +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold"))+ scale_size(range = c(0, maxsize)) + ylim(c(-40, 270))+ theme(legend.position="bottom")
if(type == "PPS"){
GRAPH <- GRAPH +  ggtitle("Points per Shot")
}  else {GRAPH <- GRAPH +  ggtitle("Shooting percentage")}
return(GRAPH)
}
max_x750 <- ShotSeasonGraph(shotDataTotal2017, quant = 0.75, MAX_Y = 750)
max_x500 <- ShotSeasonGraph(shotDataTotal2017, quant = 0.75, MAX_Y = 500)
max_x270 <- ShotSeasonGraph(shotDataTotal2017, quant = 0.75, MAX_Y = 270)
library(gridExtra)
grid.arrange(max_x750,max_x500, max_x270, ncol = 3)
max_x270 <- ShotSeasonGraph(shotDataTotal2017, quant = 0.75, MAX_Y = 270)
max_x270
max_x270 <- ShotSeasonGraph(shotDataTotal2017, quant = 0.7, MAX_Y = 270)
max_x270
max_x270 <- ShotSeasonGraph(shotDataTotal2017, quant = 0.5, MAX_Y = 270)
max_x270
max_x270 <- ShotSeasonGraph(shotDataTotal2017, quant = 0.2, MAX_Y = 270)
max_x270
max_x270 <- ShotSeasonGraph(shotDataTotal2017, quant = 0.4, MAX_Y = 270)
max_x270
