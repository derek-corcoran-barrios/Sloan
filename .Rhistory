shotDataTotal2017$TEAM_NAME <- gsub("Golden State Warriors", "GSW", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Orlando Magic", "ORL", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Washington Wizards", "Was", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Philadelphia 76ers", "Phi", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Brooklyn Nets", "Bkn", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Utah Jazz", "Uta", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Miami Heat", "Mia", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Charlotte Hornets", "Cha", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Toronto Raptors", "Tor", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Indiana Pacers", "Ind", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Houston Rockets", "Hou", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Denver Nuggets", "Den", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Memphis Grizzlies", "Mem", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("New York Knicks", "NY", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Milwaukee Bucks", "Mil", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Oklahoma City Thunder", "Okc", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("San Antonio Spurs", "Sas", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Dallas Mavericks", "Dal", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Phoenix Suns", "Pho", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Portland Trail Blazers", "Por", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("LA Clippers", "Lac", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Sacramento Kings", "Sac", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Los Angeles Lakers", "Lal", shotDataTotal2017$TEAM_NAME)
shotDataTotal2017$TEAM_NAME <- gsub("Minnesota Timberwolves", "Min", shotDataTotal2017$TEAM_NAME)
str(shotDataTotal2017)
library(rjson)
library(grid)
library(gridExtra)
library(png)
library(RCurl)
library(ggplot2)
library(jpeg)
library(hexbin)
library(sp)
library(knitr)
library(raster)
library(rasterVis)
library(dplyr)
by_team <- read.csv("~/Sloan/by_team.csv")
by_team <- by_team[-1,-1]
teamID <- by_team$team_id
teamName <- by_team$team_city
defensiveURL <- list()
shotData <- list()
shotDatafDef <- list()
shotURLtotal <- paste("http://stats.nba.com/stats/shotchartdetail?CFID=33&CFPARAMS=2016-17&ContextFilter=&ContextMeasure=FGA&DateFrom=&DateTo=&GameID=&GameSegment=&LastNGames=0&LeagueID=00&Location=&MeasureType=Base&Month=0&OpponentTeamID=0&Outcome=&PaceAdjust=N&PerMode=PerGame&Period=0&PlayerID=0&PlusMinus=N&Position=&Rank=N&RookieYear=&Season=2016-17&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=&mode=Advanced&showDetails=0&showShots=1&showZones=0&PlayerPosition=", sep = "")
# import from JSON
shotDataTotal <- fromJSON(file = shotURLtotal, method="C")
View(shotDataTotal2017)
str(shotDataTotal2017)
for (i in 1:length(teamID)){
defensiveURL[[i]] <- paste("http://stats.nba.com/stats/shotchartdetail?CFID=33&CFPARAMS=2016-17&ContextFilter=&ContextMeasure=FGA&DateFrom=&DateTo=&GameID=&GameSegment=&LastNGames=0&LeagueID=00&Location=&MeasureType=Base&Month=0&OpponentTeamID=", by_team$team_id[i],"&Outcome=&PaceAdjust=N&PerMode=PerGame&Period=0&PlayerID=0&PlusMinus=N&Position=&Rank=N&RookieYear=&Season=2016-17&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=&mode=Advanced&showDetails=0&showShots=1&showZones=0&PlayerPosition=", sep = "")
# import from JSON
shotData[[i]] <- fromJSON(file = defensiveURL[[i]], method="C")
# unlist shot data, save into a data frame
shotDatafDef[[i]] <- data.frame(matrix(ncol = 24, nrow = 1))
colnames(shotDatafDef[[i]]) <-  shotData[[i]]$resultSets[[1]][[2]]
for(j in 1:length(shotData[[i]]$resultSets[[1]][[3]])){
shotDatafDef[[i]][j,] <- unlist(shotData[[i]]$resultSets[[1]][[3]][[j]])
}
# covert x and y coordinates into numeric
shotDatafDef[[i]]$LOC_X <- as.numeric(as.character(shotDatafDef[[i]]$LOC_X))
shotDatafDef[[i]]$LOC_Y <- as.numeric(as.character(shotDatafDef[[i]]$LOC_Y))
shotDatafDef[[i]]$SHOT_DISTANCE <- as.numeric(as.character(shotDatafDef[[i]]$SHOT_DISTANCE))
}
names(shotDatafDef) <- teamName
shotDatafDef2017 <- shotDatafDef
names(shotDatafDef2017) <- c("Atl", "Bos", "Cle", "NO", "Chi", "Dal", "Den", "GSW", "Hou", "Lac", "Lal", "Mia", "Mil", "Min", "Bkn", "NY", "ORL", "Ind", "Phi", "Pho", "Por", "Sac", "Sas", "Okc", "Tor", "Uta", "Mem", "Was", "Det", "Cha")
library(rjson)
library(grid)
library(gridExtra)
library(png)
library(RCurl)
library(ggplot2)
library(jpeg)
library(hexbin)
library(sp)
library(knitr)
library(raster)
library(rasterVis)
library(dplyr)
#function to make the hexbin dataframe
#shot Comparison function
ShotComparison <- function(OffTeam, DefTown, SeasondataOff, SeasonDataDef, nbins = 40) {
#Filter the offensive data of the Offensive Team
Off <- filter(SeasondataOff, TEAM_NAME == OffTeam)
#Filter the Deffensive data of the Defensive team
deff <- SeasonDataDef[names(SeasonDataDef) == DefTown][[1]]
#Get the maximum and minumum values for x and y
xbnds <- range(c(SeasondataOff$LOC_X, deff$LOC_X))
ybnds <- range(c(SeasondataOff$LOC_Y, deff$LOC_Y))
#Make hexbin dataframes out of the teams
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
##Total NBA data
Totalhex <- makeHexData(SeasondataOff)
##Defensive team data
Defhex <- makeHexData(deff)
##Offensive team data
Offhex <- makeHexData(Off)
#Merge offensive and deffensive data with total data by Cell id
DeffbyCell <- merge(Totalhex, Defhex, by = "cid", all = T)
OffByCell <- merge(Totalhex, Offhex, by = "cid", all = T)
##  when calculating the difference empty cells should count as 0
DeffbyCell$PPS.x[is.na(DeffbyCell$PPS.x)] <- 0
DeffbyCell$PPS.y[is.na(DeffbyCell$PPS.y)] <- 0
DeffbyCell$ST.y[is.na(DeffbyCell$ST.y)] <- 0
OffByCell$PPS.x[is.na(OffByCell$PPS.x)] <- 0
OffByCell$PPS.y[is.na(OffByCell$PPS.y)] <- 0
OffByCell$ST.y[is.na(OffByCell$ST.y)] <- 0
#  make a "difference" data.frame
DiffDeff <- data.frame(x = ifelse(is.na(DeffbyCell$x.x), DeffbyCell$x.y, DeffbyCell$x.x),
y = ifelse(is.na(DeffbyCell$y.x), DeffbyCell$y.y, DeffbyCell$y.x),
PPS= DeffbyCell$PPS.y - DeffbyCell$PPS.x,
cid= DeffbyCell$cid,
ST = DeffbyCell$ST.y)
DiffOff <- data.frame(x = ifelse(is.na(OffByCell$x.x), OffByCell$x.y, OffByCell$x.x),
y = ifelse(is.na(OffByCell$y.x), OffByCell$y.y, OffByCell$y.x),
PPS= OffByCell$PPS.y - OffByCell$PPS.x,
ST = OffByCell$ST.x,
cid = OffByCell$cid,
ST = OffByCell$ST.y)
#make team comparisons
Comparison <- merge(DiffOff, DiffDeff, by = "cid", all = T)
Comparison <- Comparison[,-c(6:7)]
Comparison$Diff <- c(Comparison$PPS.x + Comparison$PPS.y)
PPSAA <- weighted.mean((Comparison$PPS.x + Comparison$PPS.y), Comparison$ST.x)
return(list(PPSAA = PPSAA))
}
Offensive_teams <- as.character(unique(shotDataTotal2017$TEAM_NAME))
defenseve_names <- names(shotDatafDef2017)
df <- data.frame(matrix(ncol = 30, nrow = 30))
colnames(df) <- as.character(unique(shotDataTotal2017$TEAM_NAME))
rownames(df) <- names(shotDatafDef2017)
df
for (i in 1:2) {
for (j in 1:5){
df[rownames(df) == defenseve_names[j],colnames(df) == Offensive_teams[i]] <- ShotComparison(OffTeam = Offensive_teams[i], DefTown = defenseve_names[j], SeasondataOff = shotDataTotal2016, SeasonDataDef = shotDatafDef2016, nbins = 30)$PPSAA
}
}
1:length(Offensive_teams)
:length(defenseve_names)
ShotComparison(OffTeam = Offensive_teams[1], DefTown = defenseve_names[1], SeasondataOff = shotDataTotal2016, SeasonDataDef = shotDatafDef2016, nbins = 30)$PPSAA
Offensive_teams[1]
defenseve_names[1]
ShotComparison(OffTeam = NY"", DefTown = defenseve_names[1], SeasondataOff = shotDataTotal2016, SeasonDataDef = shotDatafDef2016, nbins = 30)$PPSAA
ShotComparison(OffTeam = "NY", DefTown = defenseve_names[1], SeasondataOff = shotDataTotal2016, SeasonDataDef = shotDatafDef2016, nbins = 30)$PPSAA
for (i in 1:length(Offensive_teams)) {
for (j in 1:length(defenseve_names)){
df[rownames(df) == defenseve_names[j],colnames(df) == Offensive_teams[i]] <- ShotComparison(OffTeam = Offensive_teams[i], DefTown = defenseve_names[j], SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017, nbins = 30)$PPSAA
}
}
df
View(df)
?sort
datos2017 <- df
write.csv(datos2017, "datos2017.csv")
class(df)
order(x <- c(1,1,3:1,1:4,3), y <- c(9,9:1), z <- c(2,1:9)))
order(x <- c(1,1,3:1,1:4,3), y <- c(9,9:1), z <- c(2,1:9))
df[order(GSW)]
df[order(df$GSW)]
View(df[order(df$GSW)])
View(df[order(df$GSW)])
order(df$GSW)
View(df[order(df$GSW),])
0.13*100
0.13964257*100
View(df[order(df$Cle),])
source('~/Sloan/2017SeasonScrub.R')
view(tail(shotDataTotal2017))
View(tail(shotDataTotal2017))
View(tail(shotDatafDef2017[["GSW"]]))
View(tail(shotDatafDef2017[["Mia"]]))
source('~/Sloan/2017SeasonScrub.R')
source('~/Sloan/2017SeasonScrub.R')
View(schedule)
unique(schedule$`Visitor/Neutral`)
colnames(df)
colnames(schedule)
schedule[,3] <- gsub("Detroit Pistons", "Det", schedule[,3])
schedule[,3] <- gsub("Atlanta Hawks", "Atl", schedule[,3])
schedule[,3] <- gsub("Chicago Bulls", "Chi", schedule[,3])
schedule[,3] <- gsub("Boston Celtics", "Bos", schedule[,3])
schedule[,3] <- gsub("Cleveland Cavaliers", "Cle", schedule[,3])
schedule[,3] <- gsub("New Orleans Pelicans", "NO", schedule[,3])
schedule[,3] <- gsub("Golden State Warriors", "GSW", schedule[,3])
schedule[,3] <- gsub("Orlando Magic", "ORL", schedule[,3])
schedule[,3] <- gsub("Washington Wizards", "Was", schedule[,3])
schedule[,3] <- gsub("Philadelphia 76ers", "Phi", schedule[,3])
schedule[,3] <- gsub("Brooklyn Nets", "Bkn", schedule[,3])
schedule[,3] <- gsub("Utah Jazz", "Uta", schedule[,3])
schedule[,3] <- gsub("Miami Heat", "Mia", schedule[,3])
schedule[,3] <- gsub("Charlotte Hornets", "Cha", schedule[,3])
schedule[,3] <- gsub("Toronto Raptors", "Tor", schedule[,3])
schedule[,3] <- gsub("Indiana Pacers", "Ind", schedule[,3])
schedule[,3] <- gsub("Houston Rockets", "Hou", schedule[,3])
schedule[,3] <- gsub("Denver Nuggets", "Den", schedule[,3])
schedule[,3] <- gsub("Memphis Grizzlies", "Mem", schedule[,3])
schedule[,3] <- gsub("New York Knicks", "NY", schedule[,3])
schedule[,3] <- gsub("Milwaukee Bucks", "Mil", schedule[,3])
schedule[,3] <- gsub("Oklahoma City Thunder", "Okc", schedule[,3])
schedule[,3] <- gsub("San Antonio Spurs", "Sas", schedule[,3])
schedule[,3] <- gsub("Dallas Mavericks", "Dal", schedule[,3])
schedule[,3] <- gsub("Phoenix Suns", "Pho", schedule[,3])
schedule[,3] <- gsub("Portland Trail Blazers", "Por", schedule[,3])
schedule[,3] <- gsub("LA Clippers", "Lac", schedule[,3])
schedule[,3] <- gsub("Sacramento Kings", "Sac", schedule[,3])
schedule[,3] <- gsub("Los Angeles Lakers", "Lal", schedule[,3])
schedule[,3] <- gsub("Minnesota Timberwolves", "Min", schedule[,3])
unique(schedule$`Visitor/Neutral`)
schedule[,3] <- gsub("Los Angeles Clippers", "Lac", schedule[,3])
unique(schedule$`Visitor/Neutral`)
colnames(schedule)
schedule[,5] <- gsub("Detroit Pistons", "Det", schedule[,5])
schedule[,5] <- gsub("Atlanta Hawks", "Atl", schedule[,5])
schedule[,5] <- gsub("Chicago Bulls", "Chi", schedule[,5])
schedule[,5] <- gsub("Boston Celtics", "Bos", schedule[,5])
schedule[,5] <- gsub("Cleveland Cavaliers", "Cle", schedule[,5])
schedule[,5] <- gsub("New Orleans Pelicans", "NO", schedule[,5])
schedule[,5] <- gsub("Golden State Warriors", "GSW", schedule[,5])
schedule[,5] <- gsub("Orlando Magic", "ORL", schedule[,5])
schedule[,5] <- gsub("Washington Wizards", "Was", schedule[,5])
schedule[,5] <- gsub("Philadelphia 76ers", "Phi", schedule[,5])
schedule[,5] <- gsub("Brooklyn Nets", "Bkn", schedule[,5])
schedule[,5] <- gsub("Utah Jazz", "Uta", schedule[,5])
schedule[,5] <- gsub("Miami Heat", "Mia", schedule[,5])
schedule[,5] <- gsub("Charlotte Hornets", "Cha", schedule[,5])
schedule[,5] <- gsub("Toronto Raptors", "Tor", schedule[,5])
schedule[,5] <- gsub("Indiana Pacers", "Ind", schedule[,5])
schedule[,5] <- gsub("Houston Rockets", "Hou", schedule[,5])
schedule[,5] <- gsub("Denver Nuggets", "Den", schedule[,5])
schedule[,5] <- gsub("Memphis Grizzlies", "Mem", schedule[,5])
schedule[,5] <- gsub("New York Knicks", "NY", schedule[,5])
schedule[,5] <- gsub("Milwaukee Bucks", "Mil", schedule[,5])
schedule[,5] <- gsub("Oklahoma City Thunder", "Okc", schedule[,5])
schedule[,5] <- gsub("San Antonio Spurs", "Sas", schedule[,5])
schedule[,5] <- gsub("Dallas Mavericks", "Dal", schedule[,5])
schedule[,5] <- gsub("Phoenix Suns", "Pho", schedule[,5])
schedule[,5] <- gsub("Portland Trail Blazers", "Por", schedule[,5])
schedule[,5] <- gsub("Los Angeles Clippers", "Lac", schedule[,5])
schedule[,5] <- gsub("Sacramento Kings", "Sac", schedule[,5])
schedule[,5] <- gsub("Los Angeles Lakers", "Lal", schedule[,5])
schedule[,5] <- gsub("Minnesota Timberwolves", "Min", schedule[,5])
unique(schedule$`Visitor/Neutral`)
unique(schedule$`Home/Neutral`)
schedule[,4] <- as.numeric(as.character(schedule[,4]))
schedule[,6] <- as.numeric(as.character(schedule[,6]))
schedule[,3] <- gsub("Detroit Pistons", "Det", schedule[,3])
schedule[,3] <- gsub("Atlanta Hawks", "Atl", schedule[,3])
schedule[,3] <- gsub("Chicago Bulls", "Chi", schedule[,3])
schedule[,3] <- gsub("Boston Celtics", "Bos", schedule[,3])
schedule[,3] <- gsub("Cleveland Cavaliers", "Cle", schedule[,3])
schedule[,3] <- gsub("New Orleans Pelicans", "NO", schedule[,3])
schedule[,3] <- gsub("Golden State Warriors", "GSW", schedule[,3])
schedule[,3] <- gsub("Orlando Magic", "ORL", schedule[,3])
schedule[,3] <- gsub("Washington Wizards", "Was", schedule[,3])
schedule[,3] <- gsub("Philadelphia 76ers", "Phi", schedule[,3])
schedule[,3] <- gsub("Brooklyn Nets", "Bkn", schedule[,3])
schedule[,3] <- gsub("Utah Jazz", "Uta", schedule[,3])
schedule[,3] <- gsub("Miami Heat", "Mia", schedule[,3])
schedule[,3] <- gsub("Charlotte Hornets", "Cha", schedule[,3])
schedule[,3] <- gsub("Toronto Raptors", "Tor", schedule[,3])
schedule[,3] <- gsub("Indiana Pacers", "Ind", schedule[,3])
schedule[,3] <- gsub("Houston Rockets", "Hou", schedule[,3])
schedule[,3] <- gsub("Denver Nuggets", "Den", schedule[,3])
schedule[,3] <- gsub("Memphis Grizzlies", "Mem", schedule[,3])
schedule[,3] <- gsub("New York Knicks", "NY", schedule[,3])
schedule[,3] <- gsub("Milwaukee Bucks", "Mil", schedule[,3])
schedule[,3] <- gsub("Oklahoma City Thunder", "Okc", schedule[,3])
schedule[,3] <- gsub("San Antonio Spurs", "Sas", schedule[,3])
schedule[,3] <- gsub("Dallas Mavericks", "Dal", schedule[,3])
schedule[,3] <- gsub("Phoenix Suns", "Pho", schedule[,3])
schedule[,3] <- gsub("Portland Trail Blazers", "Por", schedule[,3])
schedule[,3] <- gsub("Los Angeles Clippers", "Lac", schedule[,3])
schedule[,3] <- gsub("Sacramento Kings", "Sac", schedule[,3])
schedule[,3] <- gsub("Los Angeles Lakers", "Lal", schedule[,3])
schedule[,3] <- gsub("Minnesota Timberwolves", "Min", schedule[,3])
schedule[,5] <- gsub("Detroit Pistons", "Det", schedule[,5])
schedule[,5] <- gsub("Atlanta Hawks", "Atl", schedule[,5])
schedule[,5] <- gsub("Chicago Bulls", "Chi", schedule[,5])
schedule[,5] <- gsub("Boston Celtics", "Bos", schedule[,5])
schedule[,5] <- gsub("Cleveland Cavaliers", "Cle", schedule[,5])
schedule[,5] <- gsub("New Orleans Pelicans", "NO", schedule[,5])
schedule[,5] <- gsub("Golden State Warriors", "GSW", schedule[,5])
schedule[,5] <- gsub("Orlando Magic", "ORL", schedule[,5])
schedule[,5] <- gsub("Washington Wizards", "Was", schedule[,5])
schedule[,5] <- gsub("Philadelphia 76ers", "Phi", schedule[,5])
schedule[,5] <- gsub("Brooklyn Nets", "Bkn", schedule[,5])
schedule[,5] <- gsub("Utah Jazz", "Uta", schedule[,5])
schedule[,5] <- gsub("Miami Heat", "Mia", schedule[,5])
schedule[,5] <- gsub("Charlotte Hornets", "Cha", schedule[,5])
schedule[,5] <- gsub("Toronto Raptors", "Tor", schedule[,5])
schedule[,5] <- gsub("Indiana Pacers", "Ind", schedule[,5])
schedule[,5] <- gsub("Houston Rockets", "Hou", schedule[,5])
schedule[,5] <- gsub("Denver Nuggets", "Den", schedule[,5])
schedule[,5] <- gsub("Memphis Grizzlies", "Mem", schedule[,5])
schedule[,5] <- gsub("New York Knicks", "NY", schedule[,5])
schedule[,5] <- gsub("Milwaukee Bucks", "Mil", schedule[,5])
schedule[,5] <- gsub("Oklahoma City Thunder", "Okc", schedule[,5])
schedule[,5] <- gsub("San Antonio Spurs", "Sas", schedule[,5])
schedule[,5] <- gsub("Dallas Mavericks", "Dal", schedule[,5])
schedule[,5] <- gsub("Phoenix Suns", "Pho", schedule[,5])
schedule[,5] <- gsub("Portland Trail Blazers", "Por", schedule[,5])
schedule[,5] <- gsub("Los Angeles Clippers", "Lac", schedule[,5])
schedule[,5] <- gsub("Sacramento Kings", "Sac", schedule[,5])
schedule[,5] <- gsub("Los Angeles Lakers", "Lal", schedule[,5])
schedule[,5] <- gsub("Minnesota Timberwolves", "Min", schedule[,5])
future_games <- schedule[schedule$Date >= Sys.Date(),]
future_games$defensiveAPPS <- NA
future_games$offensiveAPPS <- NA
future_games$spread <- NA
ComparisonPPS
library(rjson)
library(grid)
library(gridExtra)
library(png)
library(RCurl)
library(ggplot2)
library(jpeg)
library(hexbin)
library(sp)
library(knitr)
library(raster)
library(rasterVis)
library(dplyr)
#function to make the hexbin dataframe
#shot Comparison function
ComparisonPPS <- function(OffTeam, DefTown, SeasondataOff, SeasonDataDef, nbins = 40) {
#Filter the offensive data of the Offensive Team
Off <- filter(SeasondataOff, TEAM_NAME == OffTeam)
#Filter the Deffensive data of the Defensive team
deff <- SeasonDataDef[names(SeasonDataDef) == DefTown][[1]]
#Get the maximum and minumum values for x and y
xbnds <- range(c(SeasondataOff$LOC_X, deff$LOC_X))
ybnds <- range(c(SeasondataOff$LOC_Y, deff$LOC_Y))
#Make hexbin dataframes out of the teams
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
##Total NBA data
Totalhex <- makeHexData(SeasondataOff)
##Defensive team data
Defhex <- makeHexData(deff)
##Offensive team data
Offhex <- makeHexData(Off)
#Merge offensive and deffensive data with total data by Cell id
DeffbyCell <- merge(Totalhex, Defhex, by = "cid", all = T)
OffByCell <- merge(Totalhex, Offhex, by = "cid", all = T)
##  when calculating the difference empty cells should count as 0
DeffbyCell$PPS.x[is.na(DeffbyCell$PPS.x)] <- 0
DeffbyCell$PPS.y[is.na(DeffbyCell$PPS.y)] <- 0
DeffbyCell$ST.y[is.na(DeffbyCell$ST.y)] <- 0
OffByCell$PPS.x[is.na(OffByCell$PPS.x)] <- 0
OffByCell$PPS.y[is.na(OffByCell$PPS.y)] <- 0
OffByCell$ST.y[is.na(OffByCell$ST.y)] <- 0
#  make a "difference" data.frame
DiffDeff <- data.frame(x = ifelse(is.na(DeffbyCell$x.x), DeffbyCell$x.y, DeffbyCell$x.x),
y = ifelse(is.na(DeffbyCell$y.x), DeffbyCell$y.y, DeffbyCell$y.x),
PPS= DeffbyCell$PPS.y - DeffbyCell$PPS.x,
cid= DeffbyCell$cid,
ST = DeffbyCell$ST.y)
DiffOff <- data.frame(x = ifelse(is.na(OffByCell$x.x), OffByCell$x.y, OffByCell$x.x),
y = ifelse(is.na(OffByCell$y.x), OffByCell$y.y, OffByCell$y.x),
PPS= OffByCell$PPS.y - OffByCell$PPS.x,
ST = OffByCell$ST.x,
cid = OffByCell$cid,
ST = OffByCell$ST.y)
#make team comparisons
Comparison <- merge(DiffOff, DiffDeff, by = "cid", all = T)
Comparison <- Comparison[,-c(6:7)]
Comparison$Diff <- c(Comparison$PPS.x + Comparison$PPS.y)
PPSAA <- weighted.mean((Comparison$PPS.x + Comparison$PPS.y), Comparison$ST.x)
return(list(PPSAA = PPSAA))
}
ComparisonPPS
future_games$offensiveAPPS[1] <- ComparisonPPS(OffTeam = future_games$`Home/Neutral`[1], DefTown = future_games$`Visitor/Neutral`[1], SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017)
View(future_games)
1:NROW(future_games)
for(i in 1:NROW(future_games)) {
future_games$offensiveAPPS[i] <- ComparisonPPS(OffTeam = future_games$`Home/Neutral`[i], DefTown = future_games$`Visitor/Neutral`[i], SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017)
}
View(future_games)
for(i in 1:NROW(future_games)) {
future_games$defensiveAPPS[i] <- ComparisonPPS(OffTeam = future_games$`Visitor/Neutral`[i], DefTown = future_games$`Home/Neutral`[i], SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017)
}
View(future_games)
library(caret)
BRT <- readRDS("BRT2017_17_Jan.rds")
BRT
summary(BRT)
BRT$call
BRT$modelInfo
BRT$finalModel
future_games <- schedule[schedule$Date >= Sys.Date(),]
future_games$defAPPS <- NA
future_games$offensiveAPPS <- NA
future_games$spread <- NA
for(i in 1:NROW(future_games)) {
future_games$offensiveAPPS[i] <- ComparisonPPS(OffTeam = future_games$`Home/Neutral`[i], DefTown = future_games$`Visitor/Neutral`[i], SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017)
}
future_games <- schedule[schedule$Date >= Sys.Date(),]
future_games$defAPPS <- NA
future_games$offAPPS <- NA
future_games$spread <- NA
for(i in 1:NROW(future_games)) {
future_games$offAPPS[i] <- ComparisonPPS(OffTeam = future_games$`Home/Neutral`[i], DefTown = future_games$`Visitor/Neutral`[i], SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017)
}
for(i in 1:NROW(future_games)) {
future_games$defAPPS[i] <- ComparisonPPS(OffTeam = future_games$`Visitor/Neutral`[i], DefTown = future_games$`Home/Neutral`[i], SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017)
}
library(caret)
BRT <- readRDS("BRT2017_17_Jan.rds")
colnames(future_games)
colnames(future_games[,10:11])
predict(BRT, future_games[,10:11])
predict(BRT, future_games[,10:11])
predict(BRT$finalModel, future_games[,10:11])
predict(BRT, future_games[,10:11], type="raw")
library(caret)
class(future_games[,10:11])
str(future_games[,10:11])
predict(BRT, future_games[,11:10], type="raw")
predict(BRT, data.frame(future_games[,11:10]), type="raw")
predict(BRT, data.frame(future_games[,10:11]), type="raw")
predict(BRT, data.frame(defAPPS = 0, offAPPS = 0), type="raw")
predict(BRT, data.frame(defAPPS = c(0, 0), offAPPS = c(0, 0), type="raw")
)
predict(BRT, data.frame(defAPPS = c(0, 0), offAPPS = c(0, 0)), type="raw")
predict(BRT, data.frame(defAPPS = future_games$defAPPS, offAPPS =future_games$offAPPS), type="raw")
predict(BRT, data.frame(defAPPS = future_games$defAPPS, offAPPS = future_games$offAPPS), type="raw")
defAPPS = future_games$defAPPS, offAPPS = future_games$offAPPS
future_games$offAPPS
future_games$defAPPS
predict(BRT, data.frame(defAPPS = future_games$defAPPS, offAPPS = future_games$offAPPS), type="raw")
class(future_games$defAPPS)
unlist(future_games$defAPPS)
class(unlist(future_games$defAPPS))
predict(BRT, data.frame(defAPPS = unlist(future_games$defAPPS), offAPPS = unlist(future_games$offAPPS)), type="raw")
future_games$spread <- predict(BRT, data.frame(defAPPS = unlist(future_games$defAPPS), offAPPS = unlist(future_games$offAPPS)), type="raw")
future_games <- schedule[schedule$Date >= Sys.Date(),]
future_games$defAPPS <- NA
future_games$offAPPS <- NA
future_games$spread <- NA
for(i in 1:NROW(future_games)) {
future_games$defAPPS[i] <- ComparisonPPS(OffTeam = future_games$`Home/Neutral`[i], DefTown = future_games$`Visitor/Neutral`[i], SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017)
}
for(i in 1:NROW(future_games)) {
future_games$offAPPS[i] <- ComparisonPPS(OffTeam = future_games$`Visitor/Neutral`[i], DefTown = future_games$`Home/Neutral`[i], SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017)
}
library(caret)
BRT <- readRDS("BRT2017_17_Jan.rds")
future_games$spread <- predict(BRT, data.frame(defAPPS = unlist(future_games$defAPPS), offAPPS = unlist(future_games$offAPPS)), type="raw")
####
View(future_games)
View(dplyr::filter(future_games, Home/Neutral == "GSW")
)
View(future_games)
write.csv(future_games, "future_games.csv")
View(future_games)
write.csv(future_games, "future_games.csv")
class(future_games)
class(future_games)
class(future_games)
write.csv(future_games, "future_games.csv")
saveRDS(future_games, "future_games.rds")
saveRDS(future_games, "future_games.rds")
colnames(future_games)
future_games <- future_games[,c(1,3,5,12)]
View(future_games)
write.csv(future_games, "future_games.csv")
future_games$Home <- ifelse(future_games$spread < 0, "W", "L")
future_games$Visit <- ifelse(future_games$spread > 0, "W", "L")
write.csv(future_games, "future_games.csv")
View(future_games)
Home <- cbind(future_games$`Home/Neutral`, future_games$Home)
colnames(Home) <- c("Team", "Result")
Visit <- cbind(future_games$`Visitor/Neutral`, future_games$Visit)
colnames(Visit) <- c("Team", "Result")
Home <- cbind(future_games$`Home/Neutral`, future_games$Home)
colnames(Home) <- c("Team", "Result")
Visit <- cbind(future_games$`Visitor/Neutral`, future_games$Visit)
colnames(Visit) <- c("Team", "Result")
AddedStand <- rbind(Home, Visit)
View(AddedStand)
AddedStand <- rbind(Home, Visit)
AddedStand <- dplyr::group_by(AddedStand,Team)
AddedStand <- dplyr::mutate(count = n())
str(AddedStand)
colnames(Visit) <- c("Team", "Result")
AddedStand <- data.frame(rbind(Home, Visit))
str(AddedStand)
AddedStand <- dplyr::group_by(AddedStand,Team)
AddedStand <- dplyr::mutate(count = n())
AddedStand <- dplyr::mutate(AddedStand,count = n())
View(AddedStand)
AddedStand <- dplyr::group_by(AddedStand,Team)
table(AddedStand)
AddedStand <- data.frame(rbind(Home, Visit))
table(AddedStand)
AddedStand <- data.frame(rbind(Home, Visit))
AddedStand<-table(AddedStand)
View(AddedStand)
