DFDIF <- hex_coord_df(Comparison$x.x, Comparison$y.x, (0.05*Comparison$ST.x),(0.05*Comparison$ST.x), size =1)
DFDIF$Dif <- rep(Comparison$Diff, each = 6)
#Create Legend
OFFLEG <- ggplot(DFOFF, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(low ="blue", high = "red", limits=c(-1.4, 1.4)) +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold"))+ scale_size(range = c(0, maxsize)) + ylim(c(-40, 270))+ theme(legend.position="bottom") +  ggtitle(paste(OffTeam, "Offensive\n Shot Chart", sep = " "))
leg<-g_legend(OFFLEG)
OFF <- ggplot(DFOFF, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(low ="blue", high = "red", limits=c(-1.4, 1.4)) +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold"))+ scale_size(range = c(0, maxsize)) + ylim(c(-40, 270))+ theme(legend.position="none") +  ggtitle(paste(OffTeam, "Offensive\n Shot Chart", sep = " "))
DEF <- ggplot(DFDEF, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS))+ scale_fill_gradient2(low ="blue", high = "red", limits=c(-1.4, 1.4)) +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold"))+ scale_size(range = c(0, maxsize)) + ylim(c(-40, 270))+ theme(legend.position="none") + ggtitle(paste(DefTown, "defensive\n Shot Chart", sep = " "))
COMP <- ggplot(DFDIF, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = Dif)) + scale_fill_gradient2(low ="blue", high = "red", limits=c(-1.4, 1.4)) +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold"))+ scale_size(range = c(0, maxsize)) +  ylim(c(-40, 270))+ theme(legend.position="none") + ggtitle("Comparison\n Shot Chart")
charts <- arrangeGrob(DEF,OFF, COMP, ncol = 3)
p <- grid.arrange(arrangeGrob(arrangeGrob(DEF,OFF, COMP, ncol = 3),leg,ncol=1,heights=c(7/8,1/8)))
return(list(Off = DiffOff, deff = DiffDeff, Comparison = Comparison, Total = Totalhex, PPSAA = PPSAA, p = p, leg = leg, charts = charts))
}
Com1 <- ShotComparisonGraph2(OffTeam = "Mil", DefTown = "Cle", SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017, nbins = 30, quant = 0.8, focus = "plus")
Com3 <- ShotComparisonGraph2(OffTeam = "Mil", DefTown = "Cle", SeasondataOff = shotDataTotal2017b, SeasonDataDef = shotDatafDef2017, nbins = 30, quant = 0.8, focus = "plus")
grid.arrange(Com1$charts,Com3$charts,Com1$leg,ncol=1,heights=c(3/7, 3/7 ,1/7))
court <- readRDS("court.rds")
Com1 <- ShotComparisonGraph2(OffTeam = "Mil", DefTown = "Cle", SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017, nbins = 30, quant = 0.8, focus = "plus")
Com3 <- ShotComparisonGraph2(OffTeam = "Mil", DefTown = "Cle", SeasondataOff = shotDataTotal2017b, SeasonDataDef = shotDatafDef2017, nbins = 30, quant = 0.8, focus = "plus")
grid.arrange(Com1$charts,Com3$charts,Com1$leg,ncol=1,heights=c(3/7, 3/7 ,1/7))
shotDataTotal2017b <- shotDataTotal2017
shotDataTotal2017b$TEAM_NAME <-ifelse(shotDataTotal2017b$PLAYER_NAME == "Giannis Antetokounmpo", "Injured", shotDataTotal2017b$TEAM_NAME)
dfTRADE <- data.frame(matrix(ncol = 30, nrow = 30))
colnames(dfTRADE) <- as.character(unique(shotDataTotal2017$TEAM_NAME))
rownames(dfTRADE) <- names(shotDatafDef2017)
for (i in 1:length(Offensive_teams)) {
for (j in 1:length(defenseve_names)){
dfTRADE[rownames(dfTRADE) == defenseve_names[j],colnames(dfTRADE) == Offensive_teams[i]] <- ComparisonPPS(OffTeam = Offensive_teams[i], DefTown = defenseve_names[j], SeasondataOff = shotDataTotal2017b, SeasonDataDef = shotDatafDef2017, nbins = 30)$PPSAA
}
}
###############Projected Season
future_games <- schedule[schedule$Date >= Sys.Date(),]
future_games$defAPPS <- NA
future_games$offAPPS <- NA
future_games$spread <- NA
for(i in 1:NROW(future_games)) {
future_games$defAPPS[i] <- ComparisonPPS(OffTeam = future_games$`Home/Neutral`[i], DefTown = future_games$`Visitor/Neutral`[i], SeasondataOff = shotDataTotal2017b, SeasonDataDef = shotDatafDef2017)
}
for(i in 1:NROW(future_games)) {
future_games$offAPPS[i] <- ComparisonPPS(OffTeam = future_games$`Visitor/Neutral`[i], DefTown = future_games$`Home/Neutral`[i], SeasondataOff = shotDataTotal2017b, SeasonDataDef = shotDatafDef2017)
}
library(caret)
BRT <- readRDS("BRT2017_17_Jan.rds")
future_trade<- future_games
future_trade$spread <- predict(BRT, data.frame(defAPPS = unlist(future_trade$defAPPS), offAPPS = unlist(future_trade$offAPPS)), type="raw")
future_trade <- future_trade[,c(1,3,5,12)]
future_trade$Home <- ifelse(future_trade$spread < 0, "W", "L")
future_trade$Visit <- ifelse(future_trade$spread > 0, "W", "L")
Home <- cbind(future_trade$`Home/Neutral`, future_trade$Home)
colnames(Home) <- c("Team", "Result")
Visit <- cbind(future_trade$`Visitor/Neutral`, future_trade$Visit)
colnames(Visit) <- c("Team", "Result")
Trade_Added_Stand <- data.frame(rbind(Home, Visit))
#Wins
Trade_Added_Stand_W <- dplyr::filter(Trade_Added_Stand, Result == "W")
Trade_Added_Stand_W <- group_by(Trade_Added_Stand_W, Team)
Trade_Added_Stand_W <- dplyr::summarize(Trade_Added_Stand_W, W = n())
#Loses
Trade_Added_Stand_L <- dplyr::filter(Trade_Added_Stand, Result == "L")
Trade_Added_Stand_L <- group_by(Trade_Added_Stand_L, Team)
Trade_Added_Stand_L <- dplyr::summarize(Trade_Added_Stand_L, L = n())
Trade_Added_Stand <- merge.data.frame(Trade_Added_Stand_W, Trade_Added_Stand_L, all = TRUE)
#####Standing scraper
library(XML)
Trade_Standings <- "http://www.basketball-reference.com/leagues/NBA_2017.html"
Trade_Standings <- readHTMLTable(Trade_Standings)
Trade_Standings <- list(Western = Trade_Standings$confs_standings_W, Eastern = Trade_Standings$confs_standings_E)
Trade_Standings[[1]]$Conference <- c("West")
Trade_Standings[[2]]$Conference <- c("East")
colnames(Trade_Standings[[1]]) <- c("Team", "Current-W", "Current-L", "pct", "GB", "PS/G", "PA/G", "SRS", "Conference")
colnames(Trade_Standings[[2]]) <- c("Team", "Current-W", "Current-L", "pct", "GB", "PS/G", "PA/G", "SRS", "Conference")
Trade_Standings <- rbind(Trade_Standings[[1]], Trade_Standings[[2]])
Trade_Standings <- Trade_Standings[,c(1,2,3,9)]
Trade_Standings$Team <- gsub("76ers", "Phi", Trade_Standings$Team)
Trade_Standings$Team <- gsub("(?<=\\b[A-Z])[^A-Z]+", "", Trade_Standings$Team, perl = TRUE)
Trade_Standings$Team <- gsub("DP", "Det", Trade_Standings$Team)
Trade_Standings$Team<- gsub("AH", "Atl", Trade_Standings$Team)
Trade_Standings$Team <- gsub("CB", "Chi", Trade_Standings$Team)
Trade_Standings$Team<- gsub("BC", "Bos", Trade_Standings$Team)
Trade_Standings$Team<- gsub("CC", "Cle", Trade_Standings$Team)
Trade_Standings$Team<- gsub("NOP", "NO", Trade_Standings$Team)
Trade_Standings$Team<- gsub("OM", "ORL", Trade_Standings$Team)
Trade_Standings$Team<- gsub("WW", "Was", Trade_Standings$Team)
Trade_Standings$Team<- gsub("BN", "Bkn", Trade_Standings$Team)
Trade_Standings$Team<- gsub("UJ", "Uta", Trade_Standings$Team)
Trade_Standings$Team<- gsub("MH", "Mia", Trade_Standings$Team)
Trade_Standings$Team<- gsub("CH", "Cha", Trade_Standings$Team)
Trade_Standings$Team<- gsub("TR", "Tor", Trade_Standings$Team)
Trade_Standings$Team<- gsub("IP", "Ind", Trade_Standings$Team)
Trade_Standings$Team<- gsub("HR", "Hou", Trade_Standings$Team)
Trade_Standings$Team<- gsub("DN", "Den", Trade_Standings$Team)
Trade_Standings$Team<- gsub("MG", "Mem", Trade_Standings$Team)
Trade_Standings$Team<- gsub("NYK", "NY", Trade_Standings$Team)
Trade_Standings$Team<- gsub("MB", "Mil", Trade_Standings$Team)
Trade_Standings$Team<- gsub("OCT", "Okc", Trade_Standings$Team)
Trade_Standings$Team<- gsub("SAS", "Sas", Trade_Standings$Team)
Trade_Standings$Team<- gsub("DM", "Dal", Trade_Standings$Team)
Trade_Standings$Team<- gsub("PS", "Pho", Trade_Standings$Team)
Trade_Standings$Team<- gsub("PTB", "Por", Trade_Standings$Team)
Trade_Standings$Team<- gsub("LAC", "Lac", Trade_Standings$Team)
Trade_Standings$Team<- gsub("SK", "Sac", Trade_Standings$Team)
Trade_Standings$Team<- gsub("LAL", "Lal", Trade_Standings$Team)
Trade_Standings$Team<- gsub("MT", "Min", Trade_Standings$Team)
Trade_Standings$Team<- gsub("PP", "Phi", Trade_Standings$Team)
Trade_Proj_Stand <- merge.data.frame(Trade_Standings, Trade_Added_Stand, all = TRUE)
Trade_Proj_Stand[,2] <- as.numeric(as.character(Trade_Proj_Stand[,2]))
Trade_Proj_Stand[,3] <- as.numeric(as.character(Trade_Proj_Stand[,3]))
Trade_Proj_Stand$W <- Trade_Proj_Stand$`Current-W`+Trade_Proj_Stand$W
Trade_Proj_Stand$L <- Trade_Proj_Stand$`Current-L`+Trade_Proj_Stand$L
Trade_Proj_Stand <- arrange(Trade_Proj_Stand, Conference,desc(W))
View(Trade_Proj_Stand)
future_trade
sum(shotDataTotal2017b$PLAYER_NAME == "LeBron James")
source('~/Sloan/Love_for_Melo.R')
Trade_Standings
Trade_Proj_Stand
source('~/Sloan/Love_for_Melo.R')
Trade_Proj_Stand
future_trade
Trade_Proj_Stand
source('~/Sloan/Love_for_Melo.R')
Trade_Proj_Stand
sum(shotDataTotal2017b$PLAYER_NAME == "Russell Westbrook")
source('~/Sloan/Love_for_Melo.R')
Trade_Proj_Stand
ProjStand <- merge.data.frame(Standings, AddedStand, all = TRUE)
ProjStand[,2] <- as.numeric(as.character(ProjStand[,2]))
ProjStand[,3] <- as.numeric(as.character(ProjStand[,3]))
ProjStand
ProjStand$W <- ProjStand$`Current-W`+ProjStand$W
ProjStand$L <- ProjStand$`Current-L`+ProjStand$L
ProjStand <- arrange(ProjStand, Conference,desc(W))
ProjStand$W <- ProjStand$`Current-W`+ProjStand$W
ProjStand$L <- ProjStand$`Current-L`+ProjStand$L
ProjStand
Trade_Added_Stand_W
Trade_Added_Stand
ifelse(is.na(Trade_Added_Stand), 0, Trade_Added_Stand)
view(ifelse(is.na(Trade_Added_Stand), 0, Trade_Added_Stand))
View(ifelse(is.na(Trade_Added_Stand), 0, Trade_Added_Stand))
Trade_Added_Stand
View(ifelse(is.na(Trade_Added_Stand$L), 0, Trade_Added_Stand$L))
source('~/Sloan/Love_for_Melo.R')
Trade_Added_Stand
Trade_Proj_Stand
source('~/Sloan/Love_for_Melo.R')
Trade_Proj_Stand
source('~/Sloan/Love_for_Melo.R')
Trade_Proj_Stand
source('~/Sloan/Love_for_Melo.R')
Trade_Proj_Stand
kable(head(Trade_Proj_Stand, 8))
?kable
kable(head(Trade_Proj_Stand, 8), format = "html")
install.packages("pwr")
library(pwr)
p.t.two <- pwr.t.test(d=0.3, power = 0.8, type= "two.sample", alternative = "two.sided")
plot(p.t.two)
plot(p.t.two, xlab="sample size per group")
p.t.two <- pwr.t.test(d=0.3, power = 0.9, type= "two.sample", alternative = "two.sided")
plot(p.t.two)
plot(p.t.two, xlab="sample size per group")
p.t.two <- pwr.t.test(d=0.3, power = 0.8, type= "two.sample", alternative = "two.sided")
plot(p.t.two)
plot(p.t.two, xlab="sample size per group")
?pwr.t.test
p.t.two <- pwr.t.test(d=0.1, power = 0.8, type= "two.sample", alternative = "two.sided")
plot(p.t.two)
plot(p.t.two, xlab="sample size per group")
p.t.two <- pwr.t.test(d=0.6, power = 0.8, type= "two.sample", alternative = "two.sided")
plot(p.t.two)
plot(p.t.two, xlab="sample size per group")
p.t.two <- pwr.t.test(d=0.1, power = 0.8, type= "two.sample", alternative = "two.sided")
plot(p.t.two)
plot(p.t.two, xlab="sample size per group")
p.t.two <- pwr.t.test(d=0.9, power = 0.8, type= "two.sample", alternative = "two.sided")
plot(p.t.two)
plot(p.t.two, xlab="sample size per group")
p.t.two <- pwr.t.test(d=0.9, n = 100, type= "two.sample", alternative = "two.sided")
plot(p.t.two)
plot(p.t.two, xlab="sample size per group")
p.t.two <- pwr.t.test(d=0.6, n = 100, type= "two.sample", alternative = "two.sided")
plot(p.t.two)
plot(p.t.two, xlab="sample size per group")
p.t.two
#Load packages
library(ggplot2)
library(lubridate)
library(dplyr)
library(reshape2)
##Read Vegas odds and transform the fromats
NBAOdds <- read.csv("~/Sloan/NBAOdds.csv")
NBAOdds$Date <- mdy(NBAOdds$Date)
#Observed data The observed data, that is the away score - the home score, that will result in a negative value if the home team won, compared to a possitive value if the home team wins
NBAOdds$Diff <- (NBAOdds$Score.1 - NBAOdds$Score)
NBAOdds$Diff <- (NBAOdds$Score - NBAOdds$Score.1)
#Year of the result
NBAOdds$Year <- year(NBAOdds$Date)
#Read the spatial average points per shot difference per year, the Column names are the Offensive team and the row is the defensive team, the value in each cell is the value above average that
#the offensive team would score against the deffensive team, that is, if the value is positive the offensive team would score above NBA average on that team, and if it's negative the opposite is true
datos2016 <- read.csv("~/Sloan/datos2016.csv", row.names=1)
datos2015 <- read.csv("~/Sloan/datos2015.csv", row.names=1)
datos2014 <- read.csv("~/Sloan/datos2014.csv", row.names=1)
datos2013 <- read.csv("~/Sloan/datos2013.csv", row.names=1)
datos2012 <- read.csv("~/Sloan/datos2012.csv", row.names=1)
#Add two columns Aberage points per shot
#Def apps is when the away team is defending
#Off apps is when the away team is attacking
NBAOdds$defAPPS <- NA
NBAOdds$offAPPS <- NA
datos <- list(datos2012 = datos2012 ,datos2013 = datos2013, datos2014 = datos2014, datos2015 = datos2015, datos2016= datos2016)
for (i in 1:nrow(NBAOdds)) {
print(i)
if (NBAOdds$Year[i] == 2016){
NBAOdds$offAPPS[i]<- datos$datos2016[rownames(datos$datos2016) == NBAOdds$Home[i],colnames(datos$datos2016) == NBAOdds$Away[i]]
NBAOdds$defAPPS[i] <- datos$datos2016[rownames(datos$datos2016) == NBAOdds$Away[i],colnames(datos$datos2016) == NBAOdds$Home[i]]
}
if (NBAOdds$Year[i] == 2015){
NBAOdds$offAPPS[i]<- datos$datos2015[rownames(datos$datos2015) == NBAOdds$Home[i],colnames(datos$datos2015) == NBAOdds$Away[i]]
NBAOdds$defAPPS[i] <- datos$datos2015[rownames(datos$datos2015) == NBAOdds$Away[i],colnames(datos$datos2015) == NBAOdds$Home[i]]
}
if (NBAOdds$Year[i] == 2014){
NBAOdds$offAPPS[i]<- datos$datos2014[rownames(datos$datos2014) == NBAOdds$Home[i],colnames(datos$datos2014) == NBAOdds$Away[i]]
NBAOdds$defAPPS[i] <- datos$datos2014[rownames(datos$datos2014) == NBAOdds$Away[i],colnames(datos$datos2014) == NBAOdds$Home[i]]
}
if (NBAOdds$Year[i] == 2013){
NBAOdds$offAPPS[i]<- datos$datos2013[rownames(datos$datos2013) == NBAOdds$Home[i],colnames(datos$datos2013) == NBAOdds$Away[i]]
NBAOdds$defAPPS[i] <- datos$datos2013[rownames(datos$datos2013) == NBAOdds$Away[i],colnames(datos$datos2013) == NBAOdds$Home[i]]
}
if (NBAOdds$Year[i] == 2012){
NBAOdds$offAPPS[i]<- datos$datos2012[rownames(datos$datos2012) == NBAOdds$Home[i],colnames(datos$datos2012) == NBAOdds$Away[i]]
NBAOdds$defAPPS[i] <- datos$datos2012[rownames(datos$datos2012) == NBAOdds$Away[i],colnames(datos$datos2012) == NBAOdds$Home[i]]
}
}
ggplot(NBAOdds, aes(x = Home.Spread, y = Diff)) + geom_point() + geom_smooth()
ggplot(NBAOdds, aes(x = defAPPS, y = Diff)) + geom_point() + geom_smooth()
ggplot(NBAOdds, aes(x = offAPPS, y = Diff)) + geom_point() + geom_smooth()
summary(lm(Diff ~ offAPPS + defAPPS, data=NBAOdds))
summary(lm(Diff ~ defAPPS, data=NBAOdds))
summary(lm(Diff ~ offAPPS, data=NBAOdds))
FinalOdds <- NBAOdds
write.csv(FinalOdds, "FinalOdds.csv")
####Regression trees
library(dismo)
library(gbm)
#Divide odds into 2016 vs 2012-2015
NBAOdds2012_2015 <- filter(NBAOdds, Year != 2016)
NBAOdds2016 <- filter(NBAOdds, Year == 2016)
#####Forcast
####Caret version
library(caret)
ctrl <- trainControl(method = "repeatedcv", number=10, repeats=3)
grid <- expand.grid(interaction.depth = seq(1, 7, by = 2),
n.trees = seq(100, 1000, by = 50),
shrinkage = c(0.01, 0.1),
n.minobsinnode=c(1,5,10))
# train the GBM model
set.seed(7)
modelGbmforcast <- train(x = NBAOdds2012_2015[,14:15],y = NBAOdds2012_2015[,12], method = "gbm",  preProcess = c("center", "scale"), verbose = FALSE, trControl = ctrl, tuneGrid = grid)
modelGbmforcast
summary(modelGbmforcast)
str(modelGbmforcast)
plot(modelGbmforcast)
modelGbmforcast$resample
max(modelGbmforcast$resample$Rsquared)
fit2 <- train(x = NBAOdds2012_2015[,14:16],y = NBAOdds2012_2015[,12], method = "gam",  preProcess = c("center", "scale"), verbose = FALSE, trControl = ctrl)
modelGbmforcast <- train(x = NBAOdds2012_2015[,14:16],y = NBAOdds2012_2015[,12], method = "gbm",  preProcess = c("center", "scale"), verbose = FALSE, trControl = ctrl, tuneGrid = grid)
fit2 <- train(x = NBAOdds2012_2015[,14:15],y = NBAOdds2012_2015[,12], method = "gam",  preProcess = c("center", "scale"), verbose = FALSE, trControl = ctrl)
summary(fit2)
plot(fit2)
fit2 <- train(x = NBAOdds2012_2015[,14:15],y = NBAOdds2012_2015[,12], method = "glm",  preProcess = c("center", "scale"), verbose = FALSE, trControl = ctrl)
fit3 <- train(x = NBAOdds2012_2015[,14:15],y = NBAOdds2012_2015[,12], method = "gam",  preProcess = c("center", "scale"), verbose = FALSE)
plot(fit3)
summary(fit3)
LSGOF <- read.csv("C:/Users/corcoranbarriosd/Downloads/LSGOF.csv")
View(LSGOF)
LSGOF <- read.csv("C:/Users/corcoranbarriosd/Downloads/LSGOF.csv")
LSGOF$Region<-as.factor(LSGOF$Region)
LSGOF$H_Type<-as.factor(LSGOF$H_Type)
LSGOF$Age<-as.factor(LSGOF$Age)
LSGOF$Phase<-as.factor(LSGOF$Phase)
LSGOF$Sex<-as.factor(LSGOF$Sex)
LSGOF$Leg<-as.integer(LSGOF$Leg)
str(LSGOF)
saveRDS(LSGOF, "LSGOF.rds")
LSGOF <- readRDS("LSGOF.rds")
str(LSGOF)
set.seed(150)
trainingRowIndex <- sample(1:nrow(LSGOF), 0.8*nrow(LSGOF))
trainingRowIndex
LSGOFTrD <- LSGOF[trainingRowIndex, ]  # model training data; LSGOFTrD= "LSGO Training Data set"
LSGOFTeD  <- LSGOF[-trainingRowIndex, ]
LSGOFTeD
library(caret)
library(gbm)
ctrl <- trainControl(method = "repeatedcv", number=10, repeats=3)
grid <- expand.grid(interaction.depth = seq(1, 7, by = 2),
n.trees = seq(100, 1000, by = 50),
shrinkage = c(0.01, 0.1),
n.minobsinnode=c(1,5,10))
# train the GBM model
set.seed(7)
#GBM for Predicting Lipid Content
M1 <- train(x = LSGOFTrD[,12:21],y = LSGOFTrD[,9], method = "gbm",  preProcess = c("center", "scale"), verbose = FALSE, trControl = ctrl, tuneGrid = grid)
saveRDS(M1, "M1.rds")
summary(M1)
plot(M1)
max(M1$resample$Rsquared)
LSGOFTrD[,9]
colnames(LSGOFTrD)
names(M1)
M1$bestTune
M1$finalModel
summary(M1$finalModel)
plot(M1$finalModel)
M1$finalModel
print(M1$finalModel)
M1$bestTune
names(M1)
M1$pred
M1$results
names(M1)
M1$metric
M1$resample
names(M1)
M1$resampleCM
M1$resampledCM
M1$times
M1$levels
M1$maximize
gbm.plot(M1, n.plots = 11, write.title = FALSE)
library(gbm)
gbm.plot(M1, n.plots = 11, write.title = FALSE)
?gbm
library(gbm)
plot(M1, n.plots = 11, write.title = FALSE)
library(gbm)
plot.gbm(M1, n.plots = 11, write.title = FALSE)
m1
M1
M1$bestmodel
names(M!)
names(M1)
M1$FinalModel
M1$finalModel
M1$bestTune
summary(M1)
plot(M1)
plot(M1)
summary(M1)
M1$bestTune
predict(M1, LSGOFTeD)
predict(M1, LSGOFTeD[,12:21])
postResample(pred = predict(M1, LSGOFTeD[,12:21]), obs = LSGOFTeD[,9])
colnames(LSGOF)
set.seed(7)
#GBM for Predicting Lipid Content
M1 <- train(x = LSGOFTrD[,c(7,12:21)],y = LSGOFTrD[,9], method = "gbm",  preProcess = c("center", "scale"), verbose = FALSE, trControl = ctrl, tuneGrid = grid)
saveRDS(M1, "M1.rds")
summary(M1)
postResample(pred = predict(M1, LSGOFTeD[,12:21]), obs = LSGOFTeD[,9])
postResample(pred = predict(M1, LSGOFTeD[c(7,12:21)]), obs = LSGOFTeD[,9])
colnames(LSGOF)
M1 <- train(x = LSGOFTrD[,c(14:15)],y = LSGOFTrD[,9], method = "gbm",  preProcess = c("center", "scale"), verbose = FALSE, trControl = ctrl, tuneGrid = grid)
saveRDS(M1, "M1.rds")
# fit2 <- train(x = NBAOdds2012_2015[,14:15],y = NBAOdds2012_2015[,12], method = "gam",  preProcess = c("center", "scale"), verbose = FALSE, trControl = ctrl)
# fit3 <- train(x = NBAOdds2012_2015[,14:15],y = NBAOdds2012_2015[,12], method = "gam",  preProcess = c("center", "scale"), verbose = FALSE)
summary(M1)
plot(M1)
#R squared of model train
max(M1$resample$Rsquared)
M1$bestTune
postResample(pred = predict(M1, LSGOFTeD[c(14:15)]), obs = LSGOFTeD[,9])
residuals(M!)
residuals(M1)
M1$bestTune
postResample(pred = predict(M1, LSGOFTeD[c(14:15)]), obs = LSGOFTeD[,9])
residuals(M1)
hist(residuals(M1))
shapiro.test(residuals(M1))
qqplot(residuals(M1))
qq(residuals(M1))
plot(M1)
M1 <- readRDS("M1.rds")
summary(M1)
plot(M1)
#R squared of model train
max(M1$resample$Rsquared)
M1$bestTune
source('~/Sloan/Love_for_Melo.R')
pacman::p_load(XML, lubridate)
Months <- c("october", "november", "december", "january", "february", "march", "april")
URLs <- paste("http://www.basketball-reference.com/leagues/NBA_2017_games-", Months,".html", sep = "")
schedule <- list()
# import from JSON
for(i in 1:length(Months)){
schedule[[i]] <- readHTMLTable(URLs[[i]])
schedule[[i]] <- schedule[[i]]$schedule
}
schedule <- do.call("rbind", schedule)
schedule$Date <- mdy(as.character(schedule$Date))
schedule[,4] <- as.numeric(as.character(schedule[,4]))
schedule[,6] <- as.numeric(as.character(schedule[,6]))
schedule[,3] <- gsub("Detroit Pistons", "Det", schedule[,3])
schedule[,3] <- gsub("Atlanta Hawks", "Atl", schedule[,3])
schedule[,3] <- gsub("Chicago Bulls", "Chi", schedule[,3])
schedule[,3] <- gsub("Boston Celtics", "Bos", schedule[,3])
schedule[,3] <- gsub("Cleveland Cavaliers", "Cle", schedule[,3])
schedule[,3] <- gsub("New Orleans Pelicans", "NO", schedule[,3])
schedule[,3] <- gsub("Golden State Warriors", "GSW", schedule[,3])
schedule[,3] <- gsub("Orlando Magic", "ORL", schedule[,3])
schedule[,3] <- gsub("Washington Wizards", "Was", schedule[,3])
schedule[,3] <- gsub("Philadelphia 76ers", "Phi", schedule[,3])
schedule[,3] <- gsub("Brooklyn Nets", "Bkn", schedule[,3])
schedule[,3] <- gsub("Utah Jazz", "Uta", schedule[,3])
schedule[,3] <- gsub("Miami Heat", "Mia", schedule[,3])
schedule[,3] <- gsub("Charlotte Hornets", "Cha", schedule[,3])
schedule[,3] <- gsub("Toronto Raptors", "Tor", schedule[,3])
schedule[,3] <- gsub("Indiana Pacers", "Ind", schedule[,3])
schedule[,3] <- gsub("Houston Rockets", "Hou", schedule[,3])
schedule[,3] <- gsub("Denver Nuggets", "Den", schedule[,3])
schedule[,3] <- gsub("Memphis Grizzlies", "Mem", schedule[,3])
schedule[,3] <- gsub("New York Knicks", "NY", schedule[,3])
schedule[,3] <- gsub("Milwaukee Bucks", "Mil", schedule[,3])
schedule[,3] <- gsub("Oklahoma City Thunder", "Okc", schedule[,3])
schedule[,3] <- gsub("San Antonio Spurs", "Sas", schedule[,3])
schedule[,3] <- gsub("Dallas Mavericks", "Dal", schedule[,3])
schedule[,3] <- gsub("Phoenix Suns", "Pho", schedule[,3])
schedule[,3] <- gsub("Portland Trail Blazers", "Por", schedule[,3])
schedule[,3] <- gsub("Los Angeles Clippers", "Lac", schedule[,3])
schedule[,3] <- gsub("Sacramento Kings", "Sac", schedule[,3])
schedule[,3] <- gsub("Los Angeles Lakers", "Lal", schedule[,3])
schedule[,3] <- gsub("Minnesota Timberwolves", "Min", schedule[,3])
schedule[,5] <- gsub("Detroit Pistons", "Det", schedule[,5])
schedule[,5] <- gsub("Atlanta Hawks", "Atl", schedule[,5])
schedule[,5] <- gsub("Chicago Bulls", "Chi", schedule[,5])
schedule[,5] <- gsub("Boston Celtics", "Bos", schedule[,5])
schedule[,5] <- gsub("Cleveland Cavaliers", "Cle", schedule[,5])
schedule[,5] <- gsub("New Orleans Pelicans", "NO", schedule[,5])
schedule[,5] <- gsub("Golden State Warriors", "GSW", schedule[,5])
schedule[,5] <- gsub("Orlando Magic", "ORL", schedule[,5])
schedule[,5] <- gsub("Washington Wizards", "Was", schedule[,5])
schedule[,5] <- gsub("Philadelphia 76ers", "Phi", schedule[,5])
schedule[,5] <- gsub("Brooklyn Nets", "Bkn", schedule[,5])
schedule[,5] <- gsub("Utah Jazz", "Uta", schedule[,5])
schedule[,5] <- gsub("Miami Heat", "Mia", schedule[,5])
schedule[,5] <- gsub("Charlotte Hornets", "Cha", schedule[,5])
schedule[,5] <- gsub("Toronto Raptors", "Tor", schedule[,5])
schedule[,5] <- gsub("Indiana Pacers", "Ind", schedule[,5])
schedule[,5] <- gsub("Houston Rockets", "Hou", schedule[,5])
schedule[,5] <- gsub("Denver Nuggets", "Den", schedule[,5])
schedule[,5] <- gsub("Memphis Grizzlies", "Mem", schedule[,5])
schedule[,5] <- gsub("New York Knicks", "NY", schedule[,5])
schedule[,5] <- gsub("Milwaukee Bucks", "Mil", schedule[,5])
schedule[,5] <- gsub("Oklahoma City Thunder", "Okc", schedule[,5])
schedule[,5] <- gsub("San Antonio Spurs", "Sas", schedule[,5])
schedule[,5] <- gsub("Dallas Mavericks", "Dal", schedule[,5])
schedule[,5] <- gsub("Phoenix Suns", "Pho", schedule[,5])
schedule[,5] <- gsub("Portland Trail Blazers", "Por", schedule[,5])
schedule[,5] <- gsub("Los Angeles Clippers", "Lac", schedule[,5])
schedule[,5] <- gsub("Sacramento Kings", "Sac", schedule[,5])
schedule[,5] <- gsub("Los Angeles Lakers", "Lal", schedule[,5])
schedule[,5] <- gsub("Minnesota Timberwolves", "Min", schedule[,5])
future_games <- schedule[schedule$Date >= Sys.Date(),]
future_games$defAPPS <- NA
future_games$offAPPS <- NA
future_games$spread <- NA
for(i in 1:NROW(future_games)) {
future_games$defAPPS[i] <- ComparisonPPS(OffTeam = future_games$`Home/Neutral`[i], DefTown = future_games$`Visitor/Neutral`[i], SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017)
}
for(i in 1:NROW(future_games)) {
future_games$offAPPS[i] <- ComparisonPPS(OffTeam = future_games$`Visitor/Neutral`[i], DefTown = future_games$`Home/Neutral`[i], SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017)
}
source('~/Sloan/Love_for_Melo.R')
Trade_Standings
View(Trade_Proj_Stand)
Com1 <- ShotComparisonGraph2(OffTeam = "NO", DefTown = "Sac", SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017, nbins = 30, quant = 0.8, focus = "plus")
Com3 <- ShotComparisonGraph2(OffTeam = "NO", DefTown = "Sac", SeasondataOff = shotDataTotal2017b, SeasonDataDef = shotDatafDef2017, nbins = 30, quant = 0.8, focus = "plus")
court <- readRDS("court.rds")
Com1 <- ShotComparisonGraph2(OffTeam = "NO", DefTown = "Sac", SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017, nbins = 30, quant = 0.8, focus = "plus")
Com3 <- ShotComparisonGraph2(OffTeam = "NO", DefTown = "Sac", SeasondataOff = shotDataTotal2017b, SeasonDataDef = shotDatafDef2017, nbins = 30, quant = 0.8, focus = "plus")
grid.arrange(Com1$charts,Com3$charts,ncol=1)
Com1 <- ShotComparisonGraph2(OffTeam = "NO", DefTown = "Sac", SeasondataOff = shotDataTotal2017, SeasonDataDef = shotDatafDef2017, nbins = 30, quant = 0.85, focus = "plus")
Com3 <- ShotComparisonGraph2(OffTeam = "NO", DefTown = "Sac", SeasondataOff = shotDataTotal2017b, SeasonDataDef = shotDatafDef2017, nbins = 30, quant = 0.85, focus = "plus")
grid.arrange(Com1$charts,Com3$charts,ncol=1)
