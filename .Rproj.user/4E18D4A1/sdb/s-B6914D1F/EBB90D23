{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Spatial\"\nauthor: \"Derek Corcoran\"\ndate: \"September 1, 2016\"\noutput: pdf_document\n---\n```{r, echo=FALSE, message=FALSE, warning=FALSE}\nlibrary(rjson)\nlibrary(grid)\nlibrary(gridExtra)\nlibrary(png)\nlibrary(RCurl)\nlibrary(ggplot2)\nlibrary(jpeg)\nlibrary(hexbin)\nlibrary(sp)\nlibrary(knitr)\nlibrary(raster)\nlibrary(rasterVis)\nlibrary(dplyr)\n```\n\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE, cache=TRUE, results='hide'}\n\nby_team <- read.csv(\"~/Sloan/by_team.csv\")\nby_team <- by_team[-1,-1]\nView(by_team)\n```\n\n#2015\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE, cache=TRUE, results='hide'}\n# shot data for Stephen Curry\nteamID <- by_team$team_id\nteamName <- by_team$team_city\ndefensiveURL <- list()\nshotData <- list()\nshotDatafDef <- list()\n\n\nfor (i in 1:length(teamID)){\ndefensiveURL[[i]] <- paste(\"http://stats.nba.com/stats/shotchartdetail?CFID=33&CFPARAMS=2014-15&ContextFilter=&ContextMeasure=FGA&DateFrom=&DateTo=&GameID=&GameSegment=&LastNGames=0&LeagueID=00&Location=&MeasureType=Base&Month=0&OpponentTeamID=\", by_team$team_id[i],\"&Outcome=&PaceAdjust=N&PerMode=PerGame&Period=0&PlayerID=0&PlusMinus=N&Position=&Rank=N&RookieYear=&Season=2014-15&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=&mode=Advanced&showDetails=0&showShots=1&showZones=0\", sep = \"\")\n\n# import from JSON\nshotData[[i]] <- fromJSON(file = defensiveURL[[i]], method=\"C\")\n\n# unlist shot data, save into a data frame\nshotDatafDef[[i]] <- data.frame(matrix(unlist(shotData[[i]]$resultSets[[1]][[3]]), ncol=21, byrow = TRUE))\n\n# shot data headers\ncolnames(shotDatafDef[[i]]) <- shotData[[i]]$resultSets[[1]][[2]]\n\n# covert x and y coordinates into numeric\nshotDatafDef[[i]]$LOC_X <- as.numeric(as.character(shotDatafDef[[i]]$LOC_X))\nshotDatafDef[[i]]$LOC_Y <- as.numeric(as.character(shotDatafDef[[i]]$LOC_Y))\nshotDatafDef[[i]]$SHOT_DISTANCE <- as.numeric(as.character(shotDatafDef[[i]]$SHOT_DISTANCE))\n}\n\nnames(shotDatafDef) <- teamName\n# have a look at the data\n```\n\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE, cache=TRUE, results='hide'}\nshotURLtotal <- paste(\"http://stats.nba.com/stats/shotchartdetail?CFID=33&CFPARAMS=2014-15&ContextFilter=&ContextMeasure=FGA&DateFrom=&DateTo=&GameID=&GameSegment=&LastNGames=0&LeagueID=00&Location=&MeasureType=Base&Month=0&OpponentTeamID=0&Outcome=&PaceAdjust=N&PerMode=PerGame&Period=0&PlayerID=0&PlusMinus=N&Position=&Rank=N&RookieYear=&Season=2014-15&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=&mode=Advanced&showDetails=0&showShots=1&showZones=0\", sep = \"\")\n\n# import from JSON\nshotDataTotal <- fromJSON(file = shotURLtotal, method=\"C\")\n\n# unlist shot data, save into a data frame\nshotDataTotal <- data.frame(matrix(unlist(shotDataTotal$resultSets[[1]][[3]]), ncol=21, byrow = TRUE))\n```\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE, cache=TRUE}\ncolnames(shotDataTotal) <- colnames(shotDatafDef[[1]])\n\n# covert x and y coordinates into numeric\nshotDataTotal$LOC_X <- as.numeric(as.character(shotDataTotal$LOC_X))\nshotDataTotal$LOC_Y <- as.numeric(as.character(shotDataTotal$LOC_Y))\nshotDataTotal$SHOT_DISTANCE <- as.numeric(as.character(shotDataTotal$SHOT_DISTANCE))\n\n\nshotDataTotal2015 <- shotDataTotal\n\nshotDatafDef2015 <- shotDatafDef\n```\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE, cache=TRUE}\ncolnames(shotDataTotal) <- colnames(shotDatafDef[[1]])\n\n# covert x and y coordinates into numeric\nshotDataTotal$LOC_X <- as.numeric(as.character(shotDataTotal$LOC_X))\nshotDataTotal$LOC_Y <- as.numeric(as.character(shotDataTotal$LOC_Y))\nshotDataTotal$SHOT_DISTANCE <- as.numeric(as.character(shotDataTotal$SHOT_DISTANCE))\n\n\nshotDataTotal2015 <- shotDataTotal\n\nshotDatafDef2015 <- shotDatafDef\n```\n\n#2016\n\n\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE, cache=TRUE, results='hide'}\ndefensiveURL <- list()\nshotData <- list()\nshotDatafDef <- list()\n\n\nfor (i in 1:length(teamID)){\ndefensiveURL[[i]] <- paste(\"http://stats.nba.com/stats/shotchartdetail?CFID=33&CFPARAMS=2015-16&ContextFilter=&ContextMeasure=FGA&DateFrom=&DateTo=&GameID=&GameSegment=&LastNGames=0&LeagueID=00&Location=&MeasureType=Base&Month=0&OpponentTeamID=\", by_team$team_id[i],\"&Outcome=&PaceAdjust=N&PerMode=PerGame&Period=0&PlayerID=0&PlusMinus=N&Position=&Rank=N&RookieYear=&Season=2015-16&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=&mode=Advanced&showDetails=0&showShots=1&showZones=0\", sep = \"\")\n\n# import from JSON\nshotData[[i]] <- fromJSON(file = defensiveURL[[i]], method=\"C\")\n\n# unlist shot data, save into a data frame\nshotDatafDef[[i]] <- data.frame(matrix(unlist(shotData[[i]]$resultSets[[1]][[3]]), ncol=21, byrow = TRUE))\n\n# shot data headers\ncolnames(shotDatafDef[[i]]) <- shotData[[i]]$resultSets[[1]][[2]]\n\n# covert x and y coordinates into numeric\nshotDatafDef[[i]]$LOC_X <- as.numeric(as.character(shotDatafDef[[i]]$LOC_X))\nshotDatafDef[[i]]$LOC_Y <- as.numeric(as.character(shotDatafDef[[i]]$LOC_Y))\nshotDatafDef[[i]]$SHOT_DISTANCE <- as.numeric(as.character(shotDatafDef[[i]]$SHOT_DISTANCE))\n}\n\nnames(shotDatafDef) <- teamName\n# have a look at the data\nshotDatafDef2016 <- shotDatafDef\n```\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE, cache=TRUE, results='hide'}\nshotURLtotal <- paste(\"http://stats.nba.com/stats/shotchartdetail?CFID=33&CFPARAMS=2015-16&ContextFilter=&ContextMeasure=FGA&DateFrom=&DateTo=&GameID=&GameSegment=&LastNGames=0&LeagueID=00&Location=&MeasureType=Base&Month=0&OpponentTeamID=0&Outcome=&PaceAdjust=N&PerMode=PerGame&Period=0&PlayerID=0&PlusMinus=N&Position=&Rank=N&RookieYear=&Season=2015-16&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=&mode=Advanced&showDetails=0&showShots=1&showZones=0\", sep = \"\")\n\n# import from JSON\nshotDataTotal <- fromJSON(file = shotURLtotal, method=\"C\")\n\n# unlist shot data, save into a data frame\nshotDataTotal <- data.frame(matrix(unlist(shotDataTotal$resultSets[[1]][[3]]), ncol=21, byrow = TRUE))\ncolnames(shotDataTotal) <- colnames(shotDatafDef[[1]])\n\n# covert x and y coordinates into numeric\nshotDataTotal$LOC_X <- as.numeric(as.character(shotDataTotal$LOC_X))\nshotDataTotal$LOC_Y <- as.numeric(as.character(shotDataTotal$LOC_Y))\nshotDataTotal$SHOT_DISTANCE <- as.numeric(as.character(shotDataTotal$SHOT_DISTANCE))\n\n\nshotDataTotal2016 <- shotDataTotal\n\n```\n\n\n#2014\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE, cache=TRUE, results='hide'}\ndefensiveURL <- list()\nshotData <- list()\nshotDatafDef <- list()\n\n\nfor (i in 1:length(teamID)){\ndefensiveURL[[i]] <- paste(\"http://stats.nba.com/stats/shotchartdetail?CFID=33&CFPARAMS=2013-14&ContextFilter=&ContextMeasure=FGA&DateFrom=&DateTo=&GameID=&GameSegment=&LastNGames=0&LeagueID=00&Location=&MeasureType=Base&Month=0&OpponentTeamID=\", by_team$team_id[i],\"&Outcome=&PaceAdjust=N&PerMode=PerGame&Period=0&PlayerID=0&PlusMinus=N&Position=&Rank=N&RookieYear=&Season=2013-14&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=&mode=Advanced&showDetails=0&showShots=1&showZones=0\", sep = \"\")\n\n# import from JSON\nshotData[[i]] <- fromJSON(file = defensiveURL[[i]], method=\"C\")\n\n# unlist shot data, save into a data frame\nshotDatafDef[[i]] <- data.frame(matrix(unlist(shotData[[i]]$resultSets[[1]][[3]]), ncol=21, byrow = TRUE))\n\n# shot data headers\ncolnames(shotDatafDef[[i]]) <- shotData[[i]]$resultSets[[1]][[2]]\n\n# covert x and y coordinates into numeric\nshotDatafDef[[i]]$LOC_X <- as.numeric(as.character(shotDatafDef[[i]]$LOC_X))\nshotDatafDef[[i]]$LOC_Y <- as.numeric(as.character(shotDatafDef[[i]]$LOC_Y))\nshotDatafDef[[i]]$SHOT_DISTANCE <- as.numeric(as.character(shotDatafDef[[i]]$SHOT_DISTANCE))\n}\n\nnames(shotDatafDef) <- teamName\n# have a look at the data\nshotDatafDef2014 <- shotDatafDef\n```\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE, cache=TRUE, results='hide'}\nshotURLtotal <- paste(\"http://stats.nba.com/stats/shotchartdetail?CFID=33&CFPARAMS=2013-14&ContextFilter=&ContextMeasure=FGA&DateFrom=&DateTo=&GameID=&GameSegment=&LastNGames=0&LeagueID=00&Location=&MeasureType=Base&Month=0&OpponentTeamID=0&Outcome=&PaceAdjust=N&PerMode=PerGame&Period=0&PlayerID=0&PlusMinus=N&Position=&Rank=N&RookieYear=&Season=2013-14&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=&mode=Advanced&showDetails=0&showShots=1&showZones=0\", sep = \"\")\n\n# import from JSON\nshotDataTotal <- fromJSON(file = shotURLtotal, method=\"C\")\n\n# unlist shot data, save into a data frame\nshotDataTotal <- data.frame(matrix(unlist(shotDataTotal$resultSets[[1]][[3]]), ncol=21, byrow = TRUE))\ncolnames(shotDataTotal) <- colnames(shotDatafDef[[1]])\n\n# covert x and y coordinates into numeric\nshotDataTotal$LOC_X <- as.numeric(as.character(shotDataTotal$LOC_X))\nshotDataTotal$LOC_Y <- as.numeric(as.character(shotDataTotal$LOC_Y))\nshotDataTotal$SHOT_DISTANCE <- as.numeric(as.character(shotDataTotal$SHOT_DISTANCE))\n\n\nshotDataTotal2014 <- shotDataTotal\n\n```\n\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE,}\n\n```\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE, cache=TRUE, results='hide'}\n\ncourt <-  readRDS(\"court.rds\")\n```\n\n```{r, cache = TRUE}\n\nBostonOff <- filter(shotDataTotal2016, TEAM_NAME == \"Boston Celtics\")\n\nSAOff <- filter(shotDataTotal2016, TEAM_NAME == \"San Antonio Spurs\")\n\nBostonDef<- shotDatafDef2016[[2]]\n\nSADef <- shotDatafDef2016[[23]]\n\n## find the bounds for the complete data \nxbnds <- range(c(shotDataTotal2016$LOC_X, BostonDef$LOC_X))\nybnds <- range(c(shotDataTotal2016$LOC_Y, BostonDef$LOC_Y))\nnbins <- 40\n\n#  function to make a data.frame for geom_hex that can be used with stat_identity\nmakeHexData <- function(df) {\n  h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)\n  data.frame(hcell2xy(h),\n             PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == \"3pt field goal\", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),\n             ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),\n             cid = h@cell)\n}\n#make dataframes of the hex with percentages\nTotalhex <- makeHexData(shotDataTotal2016)\nBostonDefhex <- makeHexData(BostonDef)\nSAOffhex <- makeHexData(SAOff)\n\n##  not all cells are present in each binning, we need to merge by cellID\nBostonDeffbyCell <- merge(Totalhex, BostonDefhex, by = \"cid\", all = T)\nSAOffByCell <- merge(Totalhex, SAOffhex, by = \"cid\", all = T)\n\n\n##  when calculating the difference empty cells should count as 0\nBostonDeffbyCell$PPS.x[is.na(BostonDeffbyCell$PPS.x)] <- 0\nBostonDeffbyCell$PPS.y[is.na(BostonDeffbyCell$PPS.y)] <- 0\n\nSAOffByCell$PPS.x[is.na(SAOffByCell$PPS.x)] <- 0\nSAOffByCell$PPS.y[is.na(SAOffByCell$PPS.y)] <- 0\nSAOffByCell$ST.y[is.na(SAOffByCell$ST.y)] <- 0\n\n\n##  make a \"difference\" data.frame\nBostonDiffDeff <- data.frame(x = ifelse(is.na(BostonDeffbyCell$x.x), BostonDeffbyCell$x.y, BostonDeffbyCell$x.x),\n                   y = ifelse(is.na(BostonDeffbyCell$y.x), BostonDeffbyCell$y.y, BostonDeffbyCell$y.x),\n                   PPS= BostonDeffbyCell$PPS.y - BostonDeffbyCell$PPS.x,\n                   cid= BostonDeffbyCell$cid)\n\nSADiffOff <- data.frame(x = ifelse(is.na(SAOffByCell$x.x), SAOffByCell$x.y, SAOffByCell$x.x),\n                             y = ifelse(is.na(SAOffByCell$y.x), SAOffByCell$y.y, SAOffByCell$y.x),\n                             PPS= SAOffByCell$PPS.y - SAOffByCell$PPS.x,\n                             ST = SAOffByCell$ST.x,\n                             cid = SAOffByCell$cid)\n\nComparison <- merge(SADiffOff, BostonDiffDeff, by = \"cid\", all = T) \nComparison <- Comparison[,-c(6:7)]\nComparison$Diff <- c(Comparison$PPS.x + Comparison$PPS.y)\n\n\nweighted.mean((Comparison$PPS.x + Comparison$PPS.y), Comparison$ST)\n### Plot Difference data.frame hex\n\nSAOFF <- ggplot(SADiffOff)  + \n  annotation_custom(court, -250, 250, -52, 418) +\n    geom_hex(aes(x = x, y = y, fill = PPS),\n             stat = \"identity\", alpha = 0.8) +\n    scale_fill_gradientn (colours = c(\"blue\",\"red\")) +\n    guides(alpha = FALSE, size = FALSE) +\n\n  coord_fixed()  +theme(line = element_blank(),\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        legend.title = element_blank(),\n        plot.title = element_text(size = 17, lineheight = 1.2, face = \"bold\")) + ggtitle(\"SA Offensive\\n Shot Chart\") + scale_fill_gradient2(name=\"Off PPS\")\n\nBOSDEF <- ggplot(BostonDiffDeff)  + \n  annotation_custom(court, -250, 250, -52, 418) +\n    geom_hex(aes(x = x, y = y, fill = PPS),\n             stat = \"identity\", alpha = 0.8) +\n    guides(alpha = FALSE, size = FALSE) +\n\n  coord_fixed()  +theme(line = element_blank(),\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        legend.title = element_blank(),\n        plot.title = element_text(size = 17, lineheight = 1.2, face = \"bold\")) + ggtitle(\"Bos Deffensive\\n Shot Chart\") + scale_fill_gradient2(name=\"Def PPS\")\n\nCOMP <- ggplot(Comparison)  + \n  annotation_custom(court, -250, 250, -52, 418) +\n    geom_hex(aes(x = x.x, y = y.x, fill = Diff),\n             stat = \"identity\", alpha = 0.8) +\n    scale_fill_gradientn (colours = c(\"blue\",\"red\")) +\n    guides(alpha = FALSE, size = FALSE) +\n\n  coord_fixed()  +theme(line = element_blank(),\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        legend.title = element_blank(),\n        plot.title = element_text(size = 17, lineheight = 1.2, face = \"bold\")) + ggtitle(\"Comparison\\n Shot Chart\") + scale_fill_gradient2(name=\"Difference\\n PPS\")\n\n\n\nBOSDEF\n\nSAOFF\ngrid.arrange(BOSDEF, SAOFF, ncol=2)\n\n\n```",
    "created" : 1472743033597.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3759645208",
    "id" : "EBB90D23",
    "lastKnownWriteTime" : 1474299618,
    "last_content_update" : 1474299618290,
    "path" : "~/Sloan/SloanConference.Rmd",
    "project_path" : "SloanConference.Rmd",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}